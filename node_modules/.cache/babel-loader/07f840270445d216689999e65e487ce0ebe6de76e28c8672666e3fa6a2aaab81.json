{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\MovieRow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport movieTitles from './moviesTitles.json'; // Mapping filename -> Movie title\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction MovieRow({\n  title,\n  setSelectedMovie,\n  topPicks = false\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        let filenames = [];\n        if (topPicks) {\n          const res = await fetch(`${API_URL}/api/top-picks`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          filenames = await res.json();\n        } else {\n          const res = await fetch(`${API_URL}/api/movies`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const allFilenames = await res.json();\n\n          // Only apply filtering to NORMAL movie list\n          filenames = allFilenames.filter(filename => {\n            const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\n            return movieTitles[nameWithoutExtension];\n          });\n        }\n        const metadataPromises = filenames.map(async filename => {\n          const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\n          const searchTitle = movieTitles[nameWithoutExtension] || nameWithoutExtension;\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\n          const metaData = await metaRes.json();\n          return {\n            filename,\n            title: metaData.Title || searchTitle,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        });\n        const movieWithMetadata = await Promise.all(metadataPromises);\n        setMovies(movieWithMetadata);\n      } catch (err) {\n        console.error('Error fetching movies or metadata:', err);\n      }\n    };\n    fetchMovies();\n  }, [topPicks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centreraCards\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => setSelectedMovie({\n            filename: movie.filename\n          }),\n          children: [movie.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.poster,\n            alt: movie.title,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movieTitle\",\n            children: [movie.title, \" \\u2B50\", movie.imdbRating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)]\n        }, `${title}-${movie.filename}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieRow, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = MovieRow;\nexport default MovieRow;\nvar _c;\n$RefreshReg$(_c, \"MovieRow\");","map":{"version":3,"names":["React","useEffect","useState","movieTitles","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","MovieRow","title","setSelectedMovie","topPicks","_s","movies","setMovies","fetchMovies","token","localStorage","getItem","filenames","res","fetch","headers","Authorization","json","allFilenames","filter","filename","nameWithoutExtension","replace","metadataPromises","map","searchTitle","metaRes","encodeURIComponent","metaData","Title","poster","Poster","imdbRating","genre","Genre","movieWithMetadata","Promise","all","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","movie","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/MovieRow.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport movieTitles from './moviesTitles.json'; // Mapping filename -> Movie title\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction MovieRow({ title, setSelectedMovie, topPicks = false }) {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchMovies = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                let filenames = [];\r\n\r\n                if (topPicks) {\r\n                    const res = await fetch(`${API_URL}/api/top-picks`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    filenames = await res.json();\r\n                } else {\r\n                    const res = await fetch(`${API_URL}/api/movies`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    const allFilenames = await res.json();\r\n\r\n                    // Only apply filtering to NORMAL movie list\r\n                    filenames = allFilenames.filter((filename) => {\r\n                        const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\r\n                        return movieTitles[nameWithoutExtension];\r\n                    });\r\n                }\r\n\r\n                const metadataPromises = filenames.map(async (filename) => {\r\n                    const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\r\n\r\n                    const searchTitle = movieTitles[nameWithoutExtension] || nameWithoutExtension;\r\n\r\n                    const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\r\n                    const metaData = await metaRes.json();\r\n\r\n                    return {\r\n                        filename,\r\n                        title: metaData.Title || searchTitle,\r\n                        poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                        imdbRating: metaData.imdbRating || 'N/A',\r\n                        genre: metaData.Genre || '',\r\n                    };\r\n                });\r\n\r\n                const movieWithMetadata = await Promise.all(metadataPromises);\r\n                setMovies(movieWithMetadata);\r\n            } catch (err) {\r\n                console.error('Error fetching movies or metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchMovies();\r\n    }, [topPicks]);\r\n\r\n    return (\r\n        <div className=\"movie-row\">\r\n            <h3>{title}</h3>\r\n            <div className='centreraCards'>\r\n                <div className=\"cards\">\r\n                    {movies.map((movie) => (\r\n                        <div\r\n                            className=\"movie-card\"\r\n                            key={`${title}-${movie.filename}`}\r\n                            onClick={() => setSelectedMovie({ filename: movie.filename })}\r\n                        >\r\n                            {movie.poster && (\r\n                                <img src={movie.poster} alt={movie.title} className=\"movie-poster\" />\r\n                            )}\r\n                            <span className='movieTitle'>{movie.title} ‚≠ê{movie.imdbRating}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}