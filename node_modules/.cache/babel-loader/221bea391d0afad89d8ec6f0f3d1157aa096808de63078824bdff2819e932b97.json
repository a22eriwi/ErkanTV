{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { useAuth } from '../authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const location = useLocation(); // ✅ move this up first\n  const searchParams = new URLSearchParams(location.search);\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const {\n    accessToken\n  } = useAuth();\n  const videoRef = useRef(null);\n  const [videoFileName, setVideoFileName] = useState('');\n  const [contentType, setContentType] = useState('movie');\n  const {\n    user\n  } = useAuth();\n  const [hasSubtitle, setHasSubtitle] = useState(false);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [metadata, setMetadata] = useState(null);\n  const [nextEpisodePath, setNextEpisodePath] = useState(null);\n  const containerRef = useRef(null);\n  const [hovering, setHovering] = useState(false);\n  const saveProgress = () => {\n    if (videoRef.current && user && videoFileName) {\n      const time = videoRef.current.currentTime;\n      const duration = videoRef.current.duration;\n      return api.post('/api/progress', {\n        fileName: videoFileName,\n        type: contentType,\n        time,\n        duration,\n        ...(contentType === 'series' && path ? {\n          fullPath: path\n        } : {})\n      });\n    }\n    return Promise.resolve(); // no-op fallback\n  };\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  useEffect(() => {\n    if (path) {\n      const filename = path.split('/').pop();\n      setVideoFileName(filename);\n      setContentType('series');\n    } else if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      setVideoFileName(metadata.filename);\n      setContentType('movie');\n    }\n  }, [path, movieFolder, metadata]);\n\n  //Fetch progress\n  useEffect(() => {\n    const fetchProgress = async () => {\n      if (videoFileName) {\n        try {\n          var _res$data;\n          const res = await api.get(`/api/progress?fileName=${videoFileName}`);\n          const savedTime = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.time;\n          if (videoRef.current && savedTime) {\n            videoRef.current.currentTime = savedTime;\n          }\n        } catch (err) {\n          var _err$response;\n          console.error('❌ Fetch progress error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n        }\n      }\n    };\n    fetchProgress();\n  }, [videoFileName]);\n\n  //Keeps track of current video progress (used for rendering next episode button)\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    const handleTimeUpdate = () => {\n      if (video.duration) {\n        const progress = video.currentTime / video.duration;\n        if (progress > 0.96 && !showNextButton) {\n          setShowNextButton(true);\n        } else if (progress <= 0.96 && showNextButton) {\n          setShowNextButton(false);\n        }\n      }\n    };\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [path, showNextButton]);\n\n  //Find the next episode in order to play it when the current one is done\n  useEffect(() => {\n    const fetchNextEpisode = async () => {\n      if (!path) return;\n      const parts = path.split('/');\n      const currentFilename = parts.at(-1);\n      const seasonFolder = parts.at(-2);\n      const seriesName = parts.slice(0, -2).join('/'); // ✅ FIXED HERE\n\n      try {\n        var _res$data2;\n        const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\n        if (!((_res$data2 = res.data) !== null && _res$data2 !== void 0 && _res$data2.seasons)) {\n          console.warn('⚠️ Missing \"seasons\" in response');\n          return;\n        }\n        const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\n        if (!seasonData) {\n          console.warn(`⚠️ Season '${seasonFolder}' not found`);\n          return;\n        }\n        const sortedEpisodes = seasonData.episodes.sort((a, b) => {\n          const num = title => {\n            var _title$match;\n            return parseInt(((_title$match = title.match(/\\d+/)) === null || _title$match === void 0 ? void 0 : _title$match[0]) || '0', 10);\n          };\n          return num(a.title) - num(b.title);\n        });\n        const currentIndex = sortedEpisodes.findIndex(ep => ep.path.endsWith(currentFilename));\n        const nextEpisode = sortedEpisodes[currentIndex + 1];\n        if (nextEpisode) {\n          setNextEpisodePath(nextEpisode.path);\n        }\n      } catch (err) {\n        console.error('❌ Failed to fetch next episode:', err);\n      }\n    };\n    fetchNextEpisode();\n  }, [path]);\n  const videoUrl = (() => {\n    if (path && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\n    }\n    return null;\n  })();\n  const subtitleUrl = (() => {\n    if (path) {\n      const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\n    }\n    return null;\n  })();\n\n  //Check for subtitles\n  useEffect(() => {\n    let isMounted = true;\n    const checkSubtitle = async () => {\n      if (!subtitleUrl) return;\n      try {\n        const res = await fetch(subtitleUrl, {\n          method: 'HEAD'\n        });\n        if (isMounted && res.ok) {\n          setHasSubtitle(true);\n        } else {\n          setHasSubtitle(false);\n        }\n      } catch {\n        if (isMounted) setHasSubtitle(false);\n      }\n    };\n    checkSubtitle();\n    return () => {\n      isMounted = false;\n    };\n  }, [subtitleUrl]);\n  useEffect(() => {\n    setShowNextButton(false);\n  }, [path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      ref: containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => {\n          if (contentType === 'series') {\n            const seriesName = path.split('/').slice(0, -2).join('/');\n            navigate(`/series/${encodeURIComponent(seriesName)}`);\n          } else {\n            navigate(-1);\n          }\n        },\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hover-area\",\n        onMouseEnter: () => setHovering(true),\n        onMouseLeave: () => setHovering(false),\n        children: [showNextButton && nextEpisodePath !== path && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-episode-button\",\n          onClick: () => {\n            setShowNextButton(false);\n            navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`, {\n              replace: true\n            });\n          },\n          children: \"\\u25B6 Watch Next Episode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            className: \"video-player\",\n            autoPlay: true,\n            crossOrigin: \"anonymous\",\n            controls: true,\n            controlsList: \"nodownload noplaybackrate\",\n            disablePictureInPicture: true,\n            children: [/*#__PURE__*/_jsxDEV(\"source\", {\n              src: videoUrl,\n              type: \"video/mp4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 33\n            }, this), hasSubtitle && /*#__PURE__*/_jsxDEV(\"track\", {\n              label: \"English\",\n              kind: \"subtitles\",\n              srcLang: \"en\",\n              src: subtitleUrl,\n              default: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 37\n            }, this), \"Your browser does not support the video tag.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading video...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)\n  }, path, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n}\n_s(Watch, \"4n+5mI9JU86u3769BmpTuQPOSDc=\", false, function () {\n  return [useLocation, useNavigate, useAuth, useAuth];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Watch","_s","location","searchParams","URLSearchParams","search","path","get","movieFolder","navigate","accessToken","videoRef","videoFileName","setVideoFileName","contentType","setContentType","user","hasSubtitle","setHasSubtitle","showNextButton","setShowNextButton","metadata","setMetadata","nextEpisodePath","setNextEpisodePath","containerRef","hovering","setHovering","saveProgress","current","time","currentTime","duration","post","fileName","type","fullPath","Promise","resolve","fetchMetadata","res","encodeURIComponent","data","err","console","error","filename","split","pop","fetchProgress","_res$data","savedTime","_err$response","response","message","video","handleTimeUpdate","progress","addEventListener","removeEventListener","fetchNextEpisode","parts","currentFilename","at","seasonFolder","seriesName","slice","join","_res$data2","seasons","warn","seasonData","find","s","season","sortedEpisodes","episodes","sort","a","b","num","title","_title$match","parseInt","match","currentIndex","findIndex","ep","endsWith","nextEpisode","videoUrl","defaults","baseURL","subtitleUrl","vttPath","replace","isMounted","checkSubtitle","fetch","method","ok","className","children","ref","onClick","_jsxFileName","lineNumber","columnNumber","onMouseEnter","onMouseLeave","autoPlay","crossOrigin","controls","controlsList","disablePictureInPicture","src","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\nimport { useAuth } from '../authContext';\r\n\r\nexport default function Watch() {\r\n    const location = useLocation(); // ✅ move this up first\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const path = searchParams.get('path');\r\n    const movieFolder = searchParams.get('movie');\r\n    const navigate = useNavigate();\r\n    const { accessToken } = useAuth();\r\n    const videoRef = useRef(null);\r\n    const [videoFileName, setVideoFileName] = useState('');\r\n    const [contentType, setContentType] = useState('movie');\r\n    const { user } = useAuth();\r\n    const [hasSubtitle, setHasSubtitle] = useState(false);\r\n    const [showNextButton, setShowNextButton] = useState(false);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const [nextEpisodePath, setNextEpisodePath] = useState(null);\r\n    const containerRef = useRef(null);\r\n    const [hovering, setHovering] = useState(false);\r\n\r\n    const saveProgress = () => {\r\n    if (videoRef.current && user && videoFileName) {\r\n        const time = videoRef.current.currentTime;\r\n        const duration = videoRef.current.duration;\r\n\r\n        return api.post('/api/progress', {\r\n            fileName: videoFileName,\r\n            type: contentType,\r\n            time,\r\n            duration,\r\n            ...(contentType === 'series' && path ? { fullPath: path } : {})\r\n        });\r\n    }\r\n    return Promise.resolve(); // no-op fallback\r\n};\r\n\r\n    useEffect(() => {\r\n        if (movieFolder) {\r\n            const fetchMetadata = async () => {\r\n                try {\r\n                    const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n                    setMetadata(res.data);\r\n                } catch (err) {\r\n                    console.error('❌ Failed to load movie metadata:', err);\r\n                }\r\n            };\r\n            fetchMetadata();\r\n        }\r\n    }, [movieFolder]);\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            const filename = path.split('/').pop();\r\n            setVideoFileName(filename);\r\n            setContentType('series');\r\n        } else if (movieFolder && metadata?.filename) {\r\n            setVideoFileName(metadata.filename);\r\n            setContentType('movie');\r\n        }\r\n    }, [path, movieFolder, metadata]);\r\n\r\n    //Fetch progress\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            if (videoFileName) {\r\n                try {\r\n                    const res = await api.get(`/api/progress?fileName=${videoFileName}`);\r\n                    const savedTime = res.data?.time;\r\n                    if (videoRef.current && savedTime) {\r\n                        videoRef.current.currentTime = savedTime;\r\n                    }\r\n                } catch (err) {\r\n                    console.error('❌ Fetch progress error:', err.response?.data || err.message);\r\n                }\r\n            }\r\n        };\r\n        fetchProgress();\r\n    }, [videoFileName]);\r\n\r\n    //Keeps track of current video progress (used for rendering next episode button)\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        if (!video) return;\r\n\r\n        const handleTimeUpdate = () => {\r\n            if (video.duration) {\r\n                const progress = video.currentTime / video.duration;\r\n                if (progress > 0.96 && !showNextButton) {\r\n                    setShowNextButton(true);\r\n                } else if (progress <= 0.96 && showNextButton) {\r\n                    setShowNextButton(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        video.addEventListener('timeupdate', handleTimeUpdate);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', handleTimeUpdate);\r\n        };\r\n    }, [path, showNextButton]);\r\n\r\n    //Find the next episode in order to play it when the current one is done\r\n    useEffect(() => {\r\n        const fetchNextEpisode = async () => {\r\n            if (!path) return;\r\n\r\n            const parts = path.split('/');\r\n            const currentFilename = parts.at(-1);\r\n            const seasonFolder = parts.at(-2);\r\n            const seriesName = parts.slice(0, -2).join('/'); // ✅ FIXED HERE\r\n\r\n            try {\r\n                const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\r\n                if (!res.data?.seasons) {\r\n                    console.warn('⚠️ Missing \"seasons\" in response');\r\n                    return;\r\n                }\r\n\r\n                const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\r\n                if (!seasonData) {\r\n                    console.warn(`⚠️ Season '${seasonFolder}' not found`);\r\n                    return;\r\n                }\r\n\r\n                const sortedEpisodes = seasonData.episodes.sort((a, b) => {\r\n                    const num = (title) => parseInt(title.match(/\\d+/)?.[0] || '0', 10);\r\n                    return num(a.title) - num(b.title);\r\n                });\r\n\r\n                const currentIndex = sortedEpisodes.findIndex(ep =>\r\n                    ep.path.endsWith(currentFilename)\r\n                );\r\n\r\n                const nextEpisode = sortedEpisodes[currentIndex + 1];\r\n\r\n                if (nextEpisode) {\r\n                    setNextEpisodePath(nextEpisode.path);\r\n                }\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch next episode:', err);\r\n            }\r\n        };\r\n\r\n        fetchNextEpisode();\r\n    }, [path]);\r\n\r\n    const videoUrl = (() => {\r\n        if (path && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    const subtitleUrl = (() => {\r\n        if (path) {\r\n            const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename) {\r\n            const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    //Check for subtitles\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        const checkSubtitle = async () => {\r\n            if (!subtitleUrl) return;\r\n\r\n            try {\r\n                const res = await fetch(subtitleUrl, { method: 'HEAD' });\r\n                if (isMounted && res.ok) {\r\n                    setHasSubtitle(true);\r\n                } else {\r\n                    setHasSubtitle(false);\r\n                }\r\n            } catch {\r\n                if (isMounted) setHasSubtitle(false);\r\n            }\r\n        };\r\n\r\n        checkSubtitle();\r\n\r\n        return () => {\r\n            isMounted = false;\r\n        };\r\n    }, [subtitleUrl]);\r\n\r\n    useEffect(() => {\r\n        setShowNextButton(false);\r\n    }, [path]);\r\n\r\n    return (\r\n        <div key={path} className=\"video-overlay\">\r\n            <div className=\"video-wrapper\" ref={containerRef}>\r\n                <button className=\"close-button\" onClick={() => {\r\n                    if (contentType === 'series') {\r\n                        const seriesName = path.split('/').slice(0, -2).join('/');\r\n                        navigate(`/series/${encodeURIComponent(seriesName)}`);\r\n                    } else {\r\n                        navigate(-1);\r\n                    }\r\n                }}>✖</button>\r\n                <div\r\n                    className=\"hover-area\"\r\n                    onMouseEnter={() => setHovering(true)}\r\n                    onMouseLeave={() => setHovering(false)}\r\n                >\r\n                    {showNextButton && nextEpisodePath !== path && (\r\n                        <button\r\n                            className=\"next-episode-button\"\r\n                            onClick={() => {\r\n                                setShowNextButton(false);\r\n                                navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`, { replace: true });\r\n                            }}\r\n                        >\r\n                            ▶ Watch Next Episode\r\n                        </button>\r\n                    )}\r\n\r\n                    <div className=\"video-container\">\r\n                        {videoUrl ? (\r\n                            <video\r\n                                ref={videoRef}\r\n                                className=\"video-player\"\r\n                                autoPlay\r\n                                crossOrigin=\"anonymous\"\r\n                                controls\r\n                                controlsList=\"nodownload noplaybackrate\"\r\n                                disablePictureInPicture\r\n                            >\r\n                                <source src={videoUrl} type=\"video/mp4\" />\r\n                                {hasSubtitle && (\r\n                                    <track\r\n                                        label=\"English\"\r\n                                        kind=\"subtitles\"\r\n                                        srcLang=\"en\"\r\n                                        src={subtitleUrl}\r\n                                        default\r\n                                    />\r\n                                )}\r\n                                Your browser does not support the video tag.\r\n                            </video>\r\n                        ) : (\r\n                            <p>Loading video...</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}