{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\MovieRow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction MovieRow({\n  title,\n  setSelectedMovie,\n  topPicks = false\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const metadataCache = useRef({});\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        let movieList = [];\n        if (topPicks) {\n          const res = await fetch(`${API_URL}/api/top-picks`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          movieList = await res.json(); // [{ filename, title }]\n        } else {\n          const res = await fetch(`${API_URL}/api/movies`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          movieList = await res.json(); // [{ filename, title }]\n        }\n        const metadataPromises = movieList.map(async ({\n          filename,\n          title\n        }) => {\n          if (metadataCache.current[title]) {\n            return {\n              filename,\n              ...metadataCache.current[title]\n            };\n          }\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(title)}`);\n          const metaData = await metaRes.json();\n          const metadata = {\n            title: metaData.Title || title,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n          metadataCache.current[title] = metadata;\n          return {\n            filename,\n            ...metadata\n          };\n        });\n        const movieWithMetadata = await Promise.all(metadataPromises);\n        setMovies(movieWithMetadata);\n      } catch (err) {\n        console.error('Error fetching movies or metadata:', err);\n      }\n    };\n    fetchMovies();\n  }, [topPicks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centreraCards\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homeComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        id: \"homeCards\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => setSelectedMovie({\n            filename: movie.filename\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hover-area\",\n            children: [movie.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/moviePosters/${encodeURIComponent(movie.title)}.jpg`,\n              alt: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"movieTitle\",\n              children: [movie.title, \" \\u2B50\", movie.imdbRating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)\n        }, `${title}-${movie.filename}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieRow, \"MXvA8/0EvsbOvMMKa22u+kO14PI=\");\n_c = MovieRow;\nexport default MovieRow;\nvar _c;\n$RefreshReg$(_c, \"MovieRow\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","MovieRow","title","setSelectedMovie","topPicks","_s","movies","setMovies","metadataCache","fetchMovies","token","localStorage","getItem","movieList","res","fetch","headers","Authorization","json","metadataPromises","map","filename","current","metaRes","encodeURIComponent","metaData","metadata","Title","poster","Poster","imdbRating","genre","Genre","movieWithMetadata","Promise","all","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","movie","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/MovieRow.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction MovieRow({ title, setSelectedMovie, topPicks = false }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const metadataCache = useRef({});\r\n\r\n    useEffect(() => {\r\n        const fetchMovies = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                let movieList = [];\r\n    \r\n                if (topPicks) {\r\n                    const res = await fetch(`${API_URL}/api/top-picks`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    movieList = await res.json(); // [{ filename, title }]\r\n                } else {\r\n                    const res = await fetch(`${API_URL}/api/movies`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    movieList = await res.json(); // [{ filename, title }]\r\n                }\r\n    \r\n                const metadataPromises = movieList.map(async ({ filename, title }) => {\r\n                    if (metadataCache.current[title]) {\r\n                        return {\r\n                            filename,\r\n                            ...metadataCache.current[title],\r\n                        };\r\n                    }\r\n    \r\n                    const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(title)}`);\r\n                    const metaData = await metaRes.json();\r\n    \r\n                    const metadata = {\r\n                        title: metaData.Title || title,\r\n                        poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                        imdbRating: metaData.imdbRating || 'N/A',\r\n                        genre: metaData.Genre || '',\r\n                    };\r\n    \r\n                    metadataCache.current[title] = metadata;\r\n    \r\n                    return {\r\n                        filename,\r\n                        ...metadata,\r\n                    };\r\n                });\r\n    \r\n                const movieWithMetadata = await Promise.all(metadataPromises);\r\n                setMovies(movieWithMetadata);\r\n            } catch (err) {\r\n                console.error('Error fetching movies or metadata:', err);\r\n            }\r\n        };\r\n    \r\n        fetchMovies();\r\n    }, [topPicks]);\r\n\r\n\r\n    return (\r\n        <div className='centreraCards'>\r\n            <div className='homeComponent'>\r\n                <h3>{title}</h3>\r\n                <div className=\"cards\" id='homeCards'>\r\n                    {movies.map((movie) => (\r\n                        <div\r\n                            className=\"movie-card\"\r\n                            key={`${title}-${movie.filename}`}\r\n                            onClick={() => setSelectedMovie({ filename: movie.filename })}\r\n                        >\r\n                            <div className=\"hover-area\">\r\n                                {movie.poster && (\r\n                                   <img\r\n                                   src={`/moviePosters/${encodeURIComponent(movie.title)}.jpg`}\r\n                                   alt={movie.title}\r\n                                 />                                 \r\n                                )}\r\n                                <span className='movieTitle'>{movie.title} ‚≠ê{movie.imdbRating}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieRow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,SAASC,QAAQA,CAAC;EAAEC,KAAK;EAAEC,gBAAgB;EAAEC,QAAQ,GAAG;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC7D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMe,aAAa,GAAGd,MAAM,CAAC,CAAC,CAAC,CAAC;EAEhCF,SAAS,CAAC,MAAM;IACZ,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI;QACA,IAAIC,SAAS,GAAG,EAAE;QAElB,IAAIT,QAAQ,EAAE;UACV,MAAMU,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGlB,OAAO,gBAAgB,EAAE;YAChDmB,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUP,KAAK;YAAG;UAChD,CAAC,CAAC;UACFG,SAAS,GAAG,MAAMC,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,MAAM;UACH,MAAMJ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGlB,OAAO,aAAa,EAAE;YAC7CmB,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUP,KAAK;YAAG;UAChD,CAAC,CAAC;UACFG,SAAS,GAAG,MAAMC,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC;QAEA,MAAMC,gBAAgB,GAAGN,SAAS,CAACO,GAAG,CAAC,OAAO;UAAEC,QAAQ;UAAEnB;QAAM,CAAC,KAAK;UAClE,IAAIM,aAAa,CAACc,OAAO,CAACpB,KAAK,CAAC,EAAE;YAC9B,OAAO;cACHmB,QAAQ;cACR,GAAGb,aAAa,CAACc,OAAO,CAACpB,KAAK;YAClC,CAAC;UACL;UAEA,MAAMqB,OAAO,GAAG,MAAMR,KAAK,CAAC,GAAGlB,OAAO,iBAAiB2B,kBAAkB,CAACtB,KAAK,CAAC,EAAE,CAAC;UACnF,MAAMuB,QAAQ,GAAG,MAAMF,OAAO,CAACL,IAAI,CAAC,CAAC;UAErC,MAAMQ,QAAQ,GAAG;YACbxB,KAAK,EAAEuB,QAAQ,CAACE,KAAK,IAAIzB,KAAK;YAC9B0B,MAAM,EAAEH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACI,MAAM,KAAK,KAAK,GAAGJ,QAAQ,CAACI,MAAM,GAAG,IAAI;YAC7EC,UAAU,EAAEL,QAAQ,CAACK,UAAU,IAAI,KAAK;YACxCC,KAAK,EAAEN,QAAQ,CAACO,KAAK,IAAI;UAC7B,CAAC;UAEDxB,aAAa,CAACc,OAAO,CAACpB,KAAK,CAAC,GAAGwB,QAAQ;UAEvC,OAAO;YACHL,QAAQ;YACR,GAAGK;UACP,CAAC;QACL,CAAC,CAAC;QAEF,MAAMO,iBAAiB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAChB,gBAAgB,CAAC;QAC7DZ,SAAS,CAAC0B,iBAAiB,CAAC;MAChC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAAC;MAC5D;IACJ,CAAC;IAED3B,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAGd,oBACIR,OAAA;IAAK2C,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC1B5C,OAAA;MAAK2C,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1B5C,OAAA;QAAA4C,QAAA,EAAKtC;MAAK;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChBhD,OAAA;QAAK2C,SAAS,EAAC,OAAO;QAACM,EAAE,EAAC,WAAW;QAAAL,QAAA,EAChClC,MAAM,CAACc,GAAG,CAAE0B,KAAK,iBACdlD,OAAA;UACI2C,SAAS,EAAC,YAAY;UAEtBQ,OAAO,EAAEA,CAAA,KAAM5C,gBAAgB,CAAC;YAAEkB,QAAQ,EAAEyB,KAAK,CAACzB;UAAS,CAAC,CAAE;UAAAmB,QAAA,eAE9D5C,OAAA;YAAK2C,SAAS,EAAC,YAAY;YAAAC,QAAA,GACtBM,KAAK,CAAClB,MAAM,iBACVhC,OAAA;cACAoD,GAAG,EAAE,iBAAiBxB,kBAAkB,CAACsB,KAAK,CAAC5C,KAAK,CAAC,MAAO;cAC5D+C,GAAG,EAAEH,KAAK,CAAC5C;YAAM;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClB,CACD,eACDhD,OAAA;cAAM2C,SAAS,EAAC,YAAY;cAAAC,QAAA,GAAEM,KAAK,CAAC5C,KAAK,EAAC,SAAE,EAAC4C,KAAK,CAAChB,UAAU;YAAA;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE;QAAC,GAXD,GAAG1C,KAAK,IAAI4C,KAAK,CAACzB,QAAQ,EAAE;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYhC,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACvC,EAAA,CArFQJ,QAAQ;AAAAiD,EAAA,GAARjD,QAAQ;AAuFjB,eAAeA,QAAQ;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}