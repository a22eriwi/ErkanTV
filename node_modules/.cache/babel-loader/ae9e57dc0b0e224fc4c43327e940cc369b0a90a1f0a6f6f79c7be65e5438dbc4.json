{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Series.js\",\n  _s = $RefreshSig$();\nimport { useAuth } from './authContext';\nimport React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport seriesTitles from './seriesTitles.json';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction Series() {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const initialSeries = params.get('name');\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [selectedSeries, setSelectedSeries] = useState(initialSeries);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [seriesList, setSeriesList] = useState([]);\n  const [episodes, setEpisodes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n\n  // Fetch all series folders + metadata\n  // Fetch all series folders + metadata\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const seriesFolderRes = await fetch(`${API_URL}/api/series/${encodeURIComponent(folder)}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const filesInFolder = await seriesFolderRes.json();\n          let mappedSeriesTitle = folder; // fallback\n          if (filesInFolder.length > 0) {\n            const firstEpisodeName = filesInFolder[0].replace(/\\.[^/.]+$/, '');\n            mappedSeriesTitle = seriesTitles[firstEpisodeName] || folder;\n          }\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(mappedSeriesTitle)}`);\n          const metaData = await metaRes.json();\n          return {\n            folder,\n            // keep the original folder name (ex: South Park S01)\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            title: folder,\n            // show the folder name in the card!\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n        const allGenres = seriesWithMetadata.flatMap(series => series.genre.split(',').map(g => g.trim()));\n        setGenres([...new Set(allGenres)]);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n\n  // Fetch episodes for selected series\n  useEffect(() => {\n    if (!selectedSeries) return;\n    const fetchEpisodes = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const filenames = await res.json();\n        const episodePromises = filenames.filter(filename => {\n          const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\n          return seriesTitles[nameWithoutExtension];\n        }).map(async (filename, index) => {\n          const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\n          const searchTitle = seriesTitles[nameWithoutExtension];\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\n          const metaData = await metaRes.json();\n          return {\n            filename,\n            seriesName: selectedSeries,\n            title: nameWithoutExtension,\n            // Always display episode name!\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || '',\n            episodeNumber: index + 1\n          };\n        });\n        const all = await Promise.all(episodePromises);\n        setEpisodes(all);\n      } catch (err) {\n        console.error('Error fetching episodes:', err);\n      }\n    };\n    fetchEpisodes();\n  }, [selectedSeries]);\n  const filteredSeriesList = seriesList.filter(series => {\n    const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  const filteredEpisodes = episodes.filter(movie => {\n    const matchesSearch = movie.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || movie.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: [isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        children: !selectedSeries ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"msTitel\",\n            children: \"Series\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchBox\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sokDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Search series...\",\n                value: searchTerm,\n                onChange: e => setSearchTerm(e.target.value),\n                className: \"msSearch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"centreraCards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"genre-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(''),\n                  className: !selectedGenre ? 'active' : '',\n                  children: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 45\n                }, this), genres.map((genre, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(genre),\n                  className: selectedGenre === genre ? 'active' : '',\n                  children: genre\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredSeriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => {\n                  setEpisodes([]);\n                  setSelectedSeries(series.folder);\n                },\n                children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: series.poster,\n                  alt: series.title,\n                  className: \"movie-poster\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"movieTitle\",\n                  children: [series.title, \" \\u2B50\", series.imdbRating]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 49\n                }, this)]\n              }, series.folder, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"episodeTitel\",\n            className: \"msTitel\",\n            children: selectedSeries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backButtonDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedSeries(null),\n              className: \"backButton\",\n              children: \"\\u2B05 Back to Series\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredEpisodes.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => setSelectedMovie({\n                  filename: movie.filename,\n                  seriesName: movie.seriesName\n                }),\n                children: [movie.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: movie.poster,\n                  alt: movie.title,\n                  className: \"movie-poster\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"movieTitle\",\n                  children: movie.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 49\n                }, this)]\n              }, `${movie.seriesName}-${movie.filename}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), selectedMovie && /*#__PURE__*/_jsxDEV(VideoOverlay, {\n        filename: selectedMovie.filename,\n        seriesName: selectedMovie.seriesName,\n        onClose: () => setSelectedMovie(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Series, \"PHZqvMTulv60UoN3nZ82eb+QhBw=\", false, function () {\n  return [useLocation, useAuth];\n});\n_c = Series;\nfunction VideoOverlay({\n  filename,\n  seriesName,\n  onClose\n}) {\n  const token = localStorage.getItem('token');\n  const videoUrl = `${API_URL}/api/stream/series/${encodeURIComponent(seriesName)}/${encodeURIComponent(filename)}?token=${token}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        autoPlay: true,\n        className: \"video-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n_c2 = VideoOverlay;\nexport default Series;\nvar _c, _c2;\n$RefreshReg$(_c, \"Series\");\n$RefreshReg$(_c2, \"VideoOverlay\");","map":{"version":3,"names":["useAuth","React","useEffect","useState","Header","seriesTitles","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","Series","_s","location","params","URLSearchParams","search","initialSeries","get","isLoggedIn","selectedSeries","setSelectedSeries","selectedMovie","setSelectedMovie","seriesList","setSeriesList","episodes","setEpisodes","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","genres","setGenres","fetchSeries","token","localStorage","getItem","res","fetch","headers","Authorization","folders","json","seriesWithMetadata","Promise","all","map","folder","seriesFolderRes","encodeURIComponent","filesInFolder","mappedSeriesTitle","length","firstEpisodeName","replace","metaRes","metaData","poster","Poster","title","imdbRating","genre","Genre","allGenres","flatMap","series","split","g","trim","Set","err","console","error","fetchEpisodes","filenames","episodePromises","filter","filename","nameWithoutExtension","index","searchTitle","seriesName","episodeNumber","filteredSeriesList","matchesSearch","toLowerCase","includes","matchesGenre","filteredEpisodes","movie","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","idx","src","alt","id","VideoOverlay","onClose","_c","videoUrl","controls","autoPlay","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Series.js"],"sourcesContent":["import { useAuth } from './authContext';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Header from './Header';\r\nimport seriesTitles from './seriesTitles.json';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction Series() {\r\n    const location = useLocation();\r\n    const params = new URLSearchParams(location.search);\r\n    const initialSeries = params.get('name');\r\n\r\n    const { isLoggedIn } = useAuth();\r\n    const [selectedSeries, setSelectedSeries] = useState(initialSeries);\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedGenre, setSelectedGenre] = useState('');\r\n    const [genres, setGenres] = useState([]);\r\n\r\n    // Fetch all series folders + metadata\r\n    // Fetch all series folders + metadata\r\n    useEffect(() => {\r\n        const fetchSeries = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const folders = await res.json();\r\n\r\n                const seriesWithMetadata = await Promise.all(\r\n                    folders.map(async (folder) => {\r\n                        const seriesFolderRes = await fetch(`${API_URL}/api/series/${encodeURIComponent(folder)}`, {\r\n                            headers: { Authorization: `Bearer ${token}` },\r\n                        });\r\n                        const filesInFolder = await seriesFolderRes.json();\r\n\r\n                        let mappedSeriesTitle = folder; // fallback\r\n                        if (filesInFolder.length > 0) {\r\n                            const firstEpisodeName = filesInFolder[0].replace(/\\.[^/.]+$/, '');\r\n                            mappedSeriesTitle = seriesTitles[firstEpisodeName] || folder;\r\n                        }\r\n\r\n                        const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(mappedSeriesTitle)}`);\r\n                        const metaData = await metaRes.json();\r\n\r\n                        return {\r\n                            folder,                         // keep the original folder name (ex: South Park S01)\r\n                            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                            title: folder,                  // show the folder name in the card!\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setSeriesList(seriesWithMetadata);\r\n\r\n                const allGenres = seriesWithMetadata.flatMap(series =>\r\n                    series.genre.split(',').map(g => g.trim())\r\n                );\r\n                setGenres([...new Set(allGenres)]);\r\n            } catch (err) {\r\n                console.error('Error fetching series folders or metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchSeries();\r\n    }, []);\r\n\r\n    // Fetch episodes for selected series\r\n    useEffect(() => {\r\n        if (!selectedSeries) return;\r\n\r\n        const fetchEpisodes = async () => {\r\n            const token = localStorage.getItem('token');\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const filenames = await res.json();\r\n\r\n                const episodePromises = filenames\r\n                    .filter((filename) => {\r\n                        const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\r\n                        return seriesTitles[nameWithoutExtension];\r\n                    })\r\n                    .map(async (filename, index) => {\r\n                        const nameWithoutExtension = filename.replace(/\\.[^/.]+$/, '');\r\n                        const searchTitle = seriesTitles[nameWithoutExtension];\r\n\r\n                        const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\r\n                        const metaData = await metaRes.json();\r\n\r\n                        return {\r\n                            filename,\r\n                            seriesName: selectedSeries,\r\n                            title: nameWithoutExtension, // Always display episode name!\r\n                            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                            episodeNumber: index + 1\r\n                        };\r\n                    });\r\n\r\n                const all = await Promise.all(episodePromises);\r\n                setEpisodes(all);\r\n            } catch (err) {\r\n                console.error('Error fetching episodes:', err);\r\n            }\r\n        };\r\n\r\n        fetchEpisodes();\r\n    }, [selectedSeries]);\r\n\r\n    const filteredSeriesList = seriesList.filter(series => {\r\n        const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || (series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase()));\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    const filteredEpisodes = episodes.filter(movie => {\r\n        const matchesSearch = movie.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || movie.genre.toLowerCase().includes(selectedGenre.toLowerCase());\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className=\"movie-row\">\r\n                        {!selectedSeries ? (\r\n                            <>\r\n                                <h3 className=\"msTitel\">Series</h3>\r\n                                <div className='searchBox'>\r\n                                    <div className=\"sokDiv\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Search series...\"\r\n                                            value={searchTerm}\r\n                                            onChange={(e) => setSearchTerm(e.target.value)}\r\n                                            className=\"msSearch\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className='centreraCards'>\r\n                                        <div className=\"genre-buttons\">\r\n                                            <button\r\n                                                onClick={() => setSelectedGenre('')}\r\n                                                className={!selectedGenre ? 'active' : ''}\r\n                                            >\r\n                                                All\r\n                                            </button>\r\n                                            {genres.map((genre, idx) => (\r\n                                                <button\r\n                                                    key={idx}\r\n                                                    onClick={() => setSelectedGenre(genre)}\r\n                                                    className={selectedGenre === genre ? 'active' : ''}\r\n                                                >\r\n                                                    {genre}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredSeriesList.map(series => (\r\n                                            <div\r\n                                                key={series.folder}\r\n                                                className=\"movie-card\"\r\n                                                onClick={() => {\r\n                                                    setEpisodes([]);\r\n                                                    setSelectedSeries(series.folder);\r\n                                                }}\r\n                                            >\r\n                                                {series.poster && (\r\n                                                    <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n                                                )}\r\n                                                <span className=\"movieTitle\">{series.title} ⭐{series.imdbRating}</span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <h3 id='episodeTitel' className=\"msTitel\">{selectedSeries}</h3>\r\n                                <div className='backButtonDiv'>\r\n                                    <button onClick={() => setSelectedSeries(null)} className=\"backButton\">⬅ Back to Series</button>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredEpisodes.map((movie) => (\r\n                                            <div\r\n                                                className=\"movie-card\"\r\n                                                key={`${movie.seriesName}-${movie.filename}`}\r\n                                                onClick={() => setSelectedMovie({ filename: movie.filename, seriesName: movie.seriesName })}\r\n                                            >\r\n                                                {movie.poster && (\r\n                                                    <img src={movie.poster} alt={movie.title} className=\"movie-poster\" />\r\n                                                )}\r\n                                                <span className=\"movieTitle\">\r\n                                                    {movie.title}\r\n                                                </span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {selectedMovie && (\r\n                    <VideoOverlay\r\n                        filename={selectedMovie.filename}\r\n                        seriesName={selectedMovie.seriesName}\r\n                        onClose={() => setSelectedMovie(null)}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction VideoOverlay({ filename, seriesName, onClose }) {\r\n    const token = localStorage.getItem('token');\r\n    const videoUrl = `${API_URL}/api/stream/series/${encodeURIComponent(seriesName)}/${encodeURIComponent(filename)}?token=${token}`;\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\">\r\n                <button className=\"close-button\" onClick={onClose}>✖</button>\r\n                <video controls autoPlay className=\"video-player\">\r\n                    <source src={videoUrl} type=\"video/mp4\" />\r\n                    Your browser does not support the video tag.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Series;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}