{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\MovieRow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport movieTitles from './moviesTitles.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction MovieRow({\n  title,\n  setSelectedMovie,\n  topPicks = false\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const metadataCache = useRef({});\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        let filenames = [];\n        if (topPicks) {\n          const res = await fetch(`${API_URL}/api/top-picks`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const topPickFiles = await res.json();\n\n          // Filter using movieTitles.json\n          filenames = topPickFiles.filter(filename => movieTitles[filename]);\n        } else {\n          const res = await fetch(`${API_URL}/api/movies`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const allFilenames = await res.json();\n          filenames = allFilenames.filter(filename => movieTitles[filename]);\n        }\n        const metadataPromises = filenames.map(async filename => {\n          const searchTitle = movieTitles[filename];\n\n          // Cache hit\n          if (metadataCache.current[searchTitle]) {\n            return {\n              filename,\n              ...metadataCache.current[searchTitle]\n            };\n          }\n\n          // Fetch metadata\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\n          const metaData = await metaRes.json();\n          const metadata = {\n            title: metaData.Title || searchTitle,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n          metadataCache.current[searchTitle] = metadata;\n          return {\n            filename,\n            ...metadata\n          };\n        });\n        const movieWithMetadata = await Promise.all(metadataPromises);\n        setMovies(movieWithMetadata);\n      } catch (err) {\n        console.error('Error fetching movies or metadata:', err);\n      }\n    };\n    fetchMovies();\n  }, [topPicks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centreraCards\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => setSelectedMovie({\n            filename: movie.filename\n          }),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hover-area\",\n            children: [movie.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movie.poster,\n              alt: movie.title,\n              className: \"movie-poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"movieTitle\",\n              children: [movie.title, \" \\u2B50\", movie.imdbRating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)\n        }, `${title}-${movie.filename}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieRow, \"MXvA8/0EvsbOvMMKa22u+kO14PI=\");\n_c = MovieRow;\nexport default MovieRow;\nvar _c;\n$RefreshReg$(_c, \"MovieRow\");","map":{"version":3,"names":["React","useEffect","useState","useRef","movieTitles","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","MovieRow","title","setSelectedMovie","topPicks","_s","movies","setMovies","metadataCache","fetchMovies","token","localStorage","getItem","filenames","res","fetch","headers","Authorization","topPickFiles","json","filter","filename","allFilenames","metadataPromises","map","searchTitle","current","metaRes","encodeURIComponent","metaData","metadata","Title","poster","Poster","imdbRating","genre","Genre","movieWithMetadata","Promise","all","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","movie","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/MovieRow.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport movieTitles from './moviesTitles.json';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction MovieRow({ title, setSelectedMovie, topPicks = false }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const metadataCache = useRef({});\r\n\r\n    useEffect(() => {\r\n        const fetchMovies = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                let filenames = [];\r\n    \r\n                if (topPicks) {\r\n                    const res = await fetch(`${API_URL}/api/top-picks`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    const topPickFiles = await res.json();\r\n    \r\n                    // Filter using movieTitles.json\r\n                    filenames = topPickFiles.filter((filename) => movieTitles[filename]);\r\n                } else {\r\n                    const res = await fetch(`${API_URL}/api/movies`, {\r\n                        headers: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    const allFilenames = await res.json();\r\n    \r\n                    filenames = allFilenames.filter((filename) => movieTitles[filename]);\r\n                }\r\n    \r\n                const metadataPromises = filenames.map(async (filename) => {\r\n                    const searchTitle = movieTitles[filename];\r\n    \r\n                    // Cache hit\r\n                    if (metadataCache.current[searchTitle]) {\r\n                        return {\r\n                            filename,\r\n                            ...metadataCache.current[searchTitle],\r\n                        };\r\n                    }\r\n    \r\n                    // Fetch metadata\r\n                    const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(searchTitle)}`);\r\n                    const metaData = await metaRes.json();\r\n    \r\n                    const metadata = {\r\n                        title: metaData.Title || searchTitle,\r\n                        poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                        imdbRating: metaData.imdbRating || 'N/A',\r\n                        genre: metaData.Genre || '',\r\n                    };\r\n    \r\n                    metadataCache.current[searchTitle] = metadata;\r\n    \r\n                    return {\r\n                        filename,\r\n                        ...metadata,\r\n                    };\r\n                });\r\n    \r\n                const movieWithMetadata = await Promise.all(metadataPromises);\r\n                setMovies(movieWithMetadata);\r\n            } catch (err) {\r\n                console.error('Error fetching movies or metadata:', err);\r\n            }\r\n        };\r\n    \r\n        fetchMovies();\r\n    }, [topPicks]);\r\n    \r\n\r\n    return (\r\n        <div className=\"movie-row\">\r\n            <h3>{title}</h3>\r\n            <div className='centreraCards'>\r\n                <div className=\"cards\">\r\n                    {movies.map((movie) => (\r\n                        <div\r\n                            className=\"movie-card\"\r\n                            key={`${title}-${movie.filename}`}\r\n                            onClick={() => setSelectedMovie({ filename: movie.filename })}\r\n                        >\r\n                            <div className=\"hover-area\">\r\n                                {movie.poster && (\r\n                                    <img src={movie.poster} alt={movie.title} className=\"movie-poster\" />\r\n                                )}\r\n                                <span className='movieTitle'>{movie.title} ‚≠ê{movie.imdbRating}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}