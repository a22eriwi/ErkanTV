{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true\n});\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\napi.interceptors.response.use(res => res, async err => {\n  var _err$response;\n  const originalRequest = err.config;\n\n  // ✅ If already retried or not 401, exit\n  if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) !== 401 || originalRequest._retry) {\n    return Promise.reject(err);\n  }\n\n  // ✅ If no access token stored yet, don't retry\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return Promise.reject(err);\n  }\n  originalRequest._retry = true;\n  if (isRefreshing) {\n    return new Promise((resolve, reject) => {\n      failedQueue.push({\n        resolve,\n        reject\n      });\n    }).then(token => {\n      originalRequest.headers['Authorization'] = `Bearer ${token}`;\n      return api(originalRequest);\n    }).catch(err => Promise.reject(err));\n  }\n  isRefreshing = true;\n  try {\n    const response = await api.post('/api/token');\n    const newToken = response.data.accessToken;\n    localStorage.setItem('token', newToken); // or use your login() context here if needed\n\n    api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\n    processQueue(null, newToken);\n    return api(originalRequest);\n  } catch (refreshError) {\n    processQueue(refreshError, null);\n    return Promise.reject(refreshError);\n  } finally {\n    isRefreshing = false;\n  }\n});\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","response","use","res","err","_err$response","originalRequest","config","status","_retry","Promise","localStorage","getItem","push","then","headers","catch","post","newToken","data","accessToken","setItem","defaults","common","refreshError"],"sources":["D:/Erkflix/src/Api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach(prom => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n  failedQueue = [];\r\n};\r\n\r\napi.interceptors.response.use(\r\n  res => res,\r\n  async err => {\r\n    const originalRequest = err.config;\r\n\r\n    // ✅ If already retried or not 401, exit\r\n    if (err.response?.status !== 401 || originalRequest._retry) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    // ✅ If no access token stored yet, don't retry\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    originalRequest._retry = true;\r\n\r\n    if (isRefreshing) {\r\n      return new Promise((resolve, reject) => {\r\n        failedQueue.push({ resolve, reject });\r\n      })\r\n        .then(token => {\r\n          originalRequest.headers['Authorization'] = `Bearer ${token}`;\r\n          return api(originalRequest);\r\n        })\r\n        .catch(err => Promise.reject(err));\r\n    }\r\n\r\n    isRefreshing = true;\r\n\r\n    try {\r\n      const response = await api.post('/api/token');\r\n      const newToken = response.data.accessToken;\r\n      localStorage.setItem('token', newToken); // or use your login() context here if needed\r\n\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n      processQueue(null, newToken);\r\n      return api(originalRequest);\r\n    } catch (refreshError) {\r\n      processQueue(refreshError, null);\r\n      return Promise.reject(refreshError);\r\n    } finally {\r\n      isRefreshing = false;\r\n    }\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AAEtC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,WAAW,GAAG,EAAE;AAEpB,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,GAAG,IAAI,KAAK;EAC5CH,WAAW,CAACI,OAAO,CAACC,IAAI,IAAI;IAC1B,IAAIH,KAAK,EAAE;MACTG,IAAI,CAACC,MAAM,CAACJ,KAAK,CAAC;IACpB,CAAC,MAAM;MACLG,IAAI,CAACE,OAAO,CAACJ,KAAK,CAAC;IACrB;EACF,CAAC,CAAC;EACFH,WAAW,GAAG,EAAE;AAClB,CAAC;AAEDR,GAAG,CAACgB,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC3BC,GAAG,IAAIA,GAAG,EACV,MAAMC,GAAG,IAAI;EAAA,IAAAC,aAAA;EACX,MAAMC,eAAe,GAAGF,GAAG,CAACG,MAAM;;EAElC;EACA,IAAI,EAAAF,aAAA,GAAAD,GAAG,CAACH,QAAQ,cAAAI,aAAA,uBAAZA,aAAA,CAAcG,MAAM,MAAK,GAAG,IAAIF,eAAe,CAACG,MAAM,EAAE;IAC1D,OAAOC,OAAO,CAACZ,MAAM,CAACM,GAAG,CAAC;EAC5B;;EAEA;EACA,MAAMT,KAAK,GAAGgB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACjB,KAAK,EAAE;IACV,OAAOe,OAAO,CAACZ,MAAM,CAACM,GAAG,CAAC;EAC5B;EAEAE,eAAe,CAACG,MAAM,GAAG,IAAI;EAE7B,IAAIlB,YAAY,EAAE;IAChB,OAAO,IAAImB,OAAO,CAAC,CAACX,OAAO,EAAED,MAAM,KAAK;MACtCN,WAAW,CAACqB,IAAI,CAAC;QAAEd,OAAO;QAAED;MAAO,CAAC,CAAC;IACvC,CAAC,CAAC,CACCgB,IAAI,CAACnB,KAAK,IAAI;MACbW,eAAe,CAACS,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUpB,KAAK,EAAE;MAC5D,OAAOX,GAAG,CAACsB,eAAe,CAAC;IAC7B,CAAC,CAAC,CACDU,KAAK,CAACZ,GAAG,IAAIM,OAAO,CAACZ,MAAM,CAACM,GAAG,CAAC,CAAC;EACtC;EAEAb,YAAY,GAAG,IAAI;EAEnB,IAAI;IACF,MAAMU,QAAQ,GAAG,MAAMjB,GAAG,CAACiC,IAAI,CAAC,YAAY,CAAC;IAC7C,MAAMC,QAAQ,GAAGjB,QAAQ,CAACkB,IAAI,CAACC,WAAW;IAC1CT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAAC,CAAC,CAAC;;IAEzClC,GAAG,CAACsC,QAAQ,CAACP,OAAO,CAACQ,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,QAAQ,EAAE;IACnEzB,YAAY,CAAC,IAAI,EAAEyB,QAAQ,CAAC;IAC5B,OAAOlC,GAAG,CAACsB,eAAe,CAAC;EAC7B,CAAC,CAAC,OAAOkB,YAAY,EAAE;IACrB/B,YAAY,CAAC+B,YAAY,EAAE,IAAI,CAAC;IAChC,OAAOd,OAAO,CAACZ,MAAM,CAAC0B,YAAY,CAAC;EACrC,CAAC,SAAS;IACRjC,YAAY,GAAG,KAAK;EACtB;AACF,CACF,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}