{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\SeriesPage.js\",\n  _s2 = $RefreshSig$();\n// src/components/SeriesPage.js\nimport { useAuth } from './authContext';\nimport { useState, useRef, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nexport default function SeriesPage() {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const {\n    seriesName\n  } = useParams();\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [episodes, setEpisodes] = useState([]);\n  const [availableSeasons, setAvailableSeasons] = useState([]);\n  const [currentSeason, setCurrentSeason] = useState('');\n  const [activeTab, setActiveTab] = useState('Episodes');\n  const [suggestedSeries, setSuggestedSeries] = useState([]);\n\n  // Store all episodes grouped by season\n  const [seasonMap, setSeasonMap] = useState({});\n  useEffect(() => {\n    if (!seriesName) return;\n    const token = localStorage.getItem('token');\n    const fetchMetadata = async () => {\n      try {\n        const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(seriesName)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) throw new Error('Metadata not found');\n        const data = await res.json();\n        setMetadata(data);\n        return data; // ← add this\n      } catch (err) {\n        console.error('❌ Failed to fetch series metadata:', err);\n      }\n    };\n    const fetchSeasons = async () => {\n      try {\n        const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(seriesName)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) throw new Error('Seasons not found');\n        const data = await res.json();\n        const grouped = {};\n        for (const {\n          season,\n          episodes\n        } of data.seasons) {\n          grouped[season] = episodes;\n        }\n        const allSeasons = Object.keys(grouped);\n        setSeasonMap(grouped);\n        setAvailableSeasons(allSeasons);\n        setCurrentSeason(allSeasons[0]);\n        setEpisodes(grouped[allSeasons[0]]);\n      } catch (err) {\n        console.error('❌ Failed to fetch seasons:', err);\n      }\n    };\n    fetchMetadata();\n    fetchSeasons();\n    const fetchSuggested = async () => {\n      try {\n        if (!(metadata !== null && metadata !== void 0 && metadata.Genre)) return;\n        const res = await fetch(`${API_URL}/api/series-metadata`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) throw new Error('Failed to fetch all series metadata');\n        const allMetadata = await res.json();\n        const currentGenres = metadata.Genre.split(',').map(g => g.trim().toLowerCase());\n        const suggestions = Object.entries(allMetadata).filter(([folder, data]) => {\n          if (folder === seriesName) return false;\n          if (!data.Genre) return false;\n          const otherGenres = data.Genre.split(',').map(g => g.trim().toLowerCase());\n          return currentGenres.some(g => otherGenres.includes(g));\n        }).map(([folder, data]) => ({\n          folder,\n          title: data.Title,\n          poster: data.Poster\n        }));\n        setSuggestedSeries(suggestions);\n      } catch (err) {\n        console.error('❌ Error fetching suggested series:', err);\n      }\n    };\n    fetchMetadata().then(fetchSuggested); // fetchSuggested after metadata is loaded\n  }, [seriesName]);\n  useEffect(() => {\n    if (currentSeason && seasonMap[currentSeason]) {\n      setEpisodes(seasonMap[currentSeason]);\n    }\n  }, [currentSeason, seasonMap]);\n  function SeasonDropdown({\n    availableSeasons,\n    currentSeason,\n    setCurrentSeason\n  }) {\n    _s();\n    const [isOpen, setIsOpen] = useState(false);\n    const dropdownRef = useRef();\n\n    // Close dropdown when clicking outside\n    useEffect(() => {\n      const handleClickOutside = event => {\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n          setIsOpen(false);\n        }\n      };\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"season-dropdown\",\n      ref: dropdownRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropdown-toggle\",\n        onClick: () => setIsOpen(!isOpen),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: currentSeason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: availableSeasons.map(season => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `dropdown-item ${currentSeason === season ? 'active' : ''}`,\n          onClick: () => {\n            setCurrentSeason(season);\n            setIsOpen(false);\n          },\n          children: season\n        }, season, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n  _s(SeasonDropdown, \"uhOyve9TWk+bvhPJTPlaMsUEQAY=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        id: \"movie-row-Home\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"componentDiv\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"msTitel\",\n                children: [(metadata === null || metadata === void 0 ? void 0 : metadata.Title) || seriesName, \" \\u2B50\", metadata === null || metadata === void 0 ? void 0 : metadata.imdbRating]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"tablist\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: activeTab === 'Episodes' ? 'active' : '',\n                  onClick: () => setActiveTab('Episodes'),\n                  children: \"Episodes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: activeTab === 'Suggested' ? 'active' : '',\n                  onClick: () => setActiveTab('Suggested'),\n                  children: \"Suggested\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: activeTab === 'Details' ? 'active' : '',\n                  onClick: () => setActiveTab('Details'),\n                  children: \"Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 37\n              }, this), activeTab === 'Episodes' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"season-select-wrapper\",\n                  children: /*#__PURE__*/_jsxDEV(SeasonDropdown, {\n                    availableSeasons: availableSeasons,\n                    currentSeason: currentSeason,\n                    setCurrentSeason: setCurrentSeason\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards\",\n                  id: \"episodeCards\",\n                  children: episodes.sort((a, b) => {\n                    const getEpNum = filename => {\n                      const match = filename.match(/^(\\d+)\\./);\n                      return match ? parseInt(match[1], 10) : 0;\n                    };\n                    return getEpNum(a.filename) - getEpNum(b.filename);\n                  }).map(episode => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"movie-card\",\n                    onClick: () => {\n                      setSelectedMovie({\n                        filename: episode.filename,\n                        path: episode.path,\n                        seriesName\n                      });\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"hover-area\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"image-container\",\n                        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                          src: `${API_URL}/seriesPosters/${encodeURIComponent(seriesName)}.jpg`,\n                          alt: seriesName\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 216,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"movieTitle\",\n                          children: episode.filename\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 220,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 215,\n                        columnNumber: 65\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 214,\n                      columnNumber: 61\n                    }, this)\n                  }, episode.filename, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true), activeTab === 'Suggested' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"suggested-wrapper\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Suggested series based on genres: \", (metadata === null || metadata === void 0 ? void 0 : metadata.Genre) || 'Unknown']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 41\n              }, this), activeTab === 'Details' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"details-wrapper\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"plot\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Plot:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 240,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Plot\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 240,\n                      columnNumber: 90\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"genre\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Released:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Released\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 94\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Genre:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Genre\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 91\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"starring\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Director:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Director\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 94\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Starring:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Actors\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 94\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Awards:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Awards\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 92\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this), selectedMovie && /*#__PURE__*/_jsxDEV(VideoOverlay, {\n            path: selectedMovie.path,\n            onClose: () => setSelectedMovie(null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s2(SeriesPage, \"xVSnKIksknARcudQonzJiRxj/4U=\", false, function () {\n  return [useAuth, useParams];\n});\n_c = SeriesPage;\nfunction VideoOverlay({\n  path = '',\n  onClose\n}) {\n  if (!path) return null;\n  const token = localStorage.getItem('token');\n  const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        autoPlay: true,\n        className: \"video-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 9\n  }, this);\n}\n_c2 = VideoOverlay;\nvar _c, _c2;\n$RefreshReg$(_c, \"SeriesPage\");\n$RefreshReg$(_c2, \"VideoOverlay\");","map":{"version":3,"names":["useAuth","useState","useRef","useEffect","useParams","Header","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","SeriesPage","_s2","_s","$RefreshSig$","isLoggedIn","seriesName","selectedMovie","setSelectedMovie","metadata","setMetadata","episodes","setEpisodes","availableSeasons","setAvailableSeasons","currentSeason","setCurrentSeason","activeTab","setActiveTab","suggestedSeries","setSuggestedSeries","seasonMap","setSeasonMap","token","localStorage","getItem","fetchMetadata","res","fetch","encodeURIComponent","headers","Authorization","ok","Error","data","json","err","console","error","fetchSeasons","grouped","season","seasons","allSeasons","Object","keys","fetchSuggested","Genre","allMetadata","currentGenres","split","map","g","trim","toLowerCase","suggestions","entries","filter","folder","otherGenres","some","includes","title","Title","poster","Poster","then","SeasonDropdown","isOpen","setIsOpen","dropdownRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","ref","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","imdbRating","sort","a","b","getEpNum","filename","match","parseInt","episode","path","src","alt","Plot","Released","Director","Actors","Awards","VideoOverlay","onClose","_c","videoUrl","controls","autoPlay","type","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/SeriesPage.js"],"sourcesContent":["// src/components/SeriesPage.js\r\nimport { useAuth } from './authContext';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Header from './Header';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport default function SeriesPage() {\r\n    const { isLoggedIn } = useAuth();\r\n    const { seriesName } = useParams();\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [availableSeasons, setAvailableSeasons] = useState([]);\r\n    const [currentSeason, setCurrentSeason] = useState('');\r\n    const [activeTab, setActiveTab] = useState('Episodes');\r\n    const [suggestedSeries, setSuggestedSeries] = useState([]);\r\n\r\n    // Store all episodes grouped by season\r\n    const [seasonMap, setSeasonMap] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!seriesName) return;\r\n\r\n        const token = localStorage.getItem('token');\r\n\r\n        const fetchMetadata = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(seriesName)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                if (!res.ok) throw new Error('Metadata not found');\r\n                const data = await res.json();\r\n                setMetadata(data);\r\n                return data; // ← add this\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch series metadata:', err);\r\n            }\r\n        };\r\n\r\n        const fetchSeasons = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(seriesName)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                if (!res.ok) throw new Error('Seasons not found');\r\n                const data = await res.json();\r\n\r\n                const grouped = {};\r\n                for (const { season, episodes } of data.seasons) {\r\n                    grouped[season] = episodes;\r\n                }\r\n\r\n                const allSeasons = Object.keys(grouped);\r\n                setSeasonMap(grouped);\r\n                setAvailableSeasons(allSeasons);\r\n                setCurrentSeason(allSeasons[0]);\r\n                setEpisodes(grouped[allSeasons[0]]);\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch seasons:', err);\r\n            }\r\n        };\r\n\r\n        fetchMetadata();\r\n        fetchSeasons();\r\n\r\n        const fetchSuggested = async () => {\r\n            try {\r\n                if (!metadata?.Genre) return;\r\n\r\n                const res = await fetch(`${API_URL}/api/series-metadata`, {\r\n                    headers: { Authorization: `Bearer ${token}` }\r\n                });\r\n                if (!res.ok) throw new Error('Failed to fetch all series metadata');\r\n                const allMetadata = await res.json();\r\n\r\n                const currentGenres = metadata.Genre.split(',').map(g => g.trim().toLowerCase());\r\n\r\n                const suggestions = Object.entries(allMetadata)\r\n                    .filter(([folder, data]) => {\r\n                        if (folder === seriesName) return false;\r\n                        if (!data.Genre) return false;\r\n\r\n                        const otherGenres = data.Genre.split(',').map(g => g.trim().toLowerCase());\r\n                        return currentGenres.some(g => otherGenres.includes(g));\r\n                    })\r\n                    .map(([folder, data]) => ({\r\n                        folder,\r\n                        title: data.Title,\r\n                        poster: data.Poster\r\n                    }));\r\n\r\n                setSuggestedSeries(suggestions);\r\n            } catch (err) {\r\n                console.error('❌ Error fetching suggested series:', err);\r\n            }\r\n        };\r\n\r\n        fetchMetadata().then(fetchSuggested); // fetchSuggested after metadata is loaded\r\n    }, [seriesName]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (currentSeason && seasonMap[currentSeason]) {\r\n            setEpisodes(seasonMap[currentSeason]);\r\n        }\r\n    }, [currentSeason, seasonMap]);\r\n\r\n    function SeasonDropdown({ availableSeasons, currentSeason, setCurrentSeason }) {\r\n        const [isOpen, setIsOpen] = useState(false);\r\n        const dropdownRef = useRef();\r\n\r\n        // Close dropdown when clicking outside\r\n        useEffect(() => {\r\n            const handleClickOutside = (event) => {\r\n                if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n                    setIsOpen(false);\r\n                }\r\n            };\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n            return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }, []);\r\n\r\n        return (\r\n            <div className=\"season-dropdown\" ref={dropdownRef}>\r\n                <button\r\n                    className=\"dropdown-toggle\"\r\n                    onClick={() => setIsOpen(!isOpen)}\r\n                >\r\n                    <span>{currentSeason}</span>\r\n                    <span>▼</span>\r\n                </button>\r\n                {isOpen && (\r\n                    <div className=\"dropdown-menu\">\r\n                        {availableSeasons.map((season) => (\r\n                            <div\r\n                                key={season}\r\n                                className={`dropdown-item ${currentSeason === season ? 'active' : ''}`}\r\n                                onClick={() => {\r\n                                    setCurrentSeason(season);\r\n                                    setIsOpen(false);\r\n                                }}\r\n                            >\r\n                                {season}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className='movie-row' id='movie-row-Home'>\r\n                        <>\r\n                            <div className=\"centreraCards\">\r\n                                <div className=\"componentDiv\">\r\n                                    <h3 className=\"msTitel\">{metadata?.Title || seriesName} ⭐{metadata?.imdbRating}</h3>\r\n                                    <ul className='tablist'>\r\n                                        <li\r\n                                            className={activeTab === 'Episodes' ? 'active' : ''}\r\n                                            onClick={() => setActiveTab('Episodes')}\r\n                                        >\r\n                                            Episodes\r\n                                        </li>\r\n                                        <li\r\n                                            className={activeTab === 'Suggested' ? 'active' : ''}\r\n                                            onClick={() => setActiveTab('Suggested')}\r\n                                        >\r\n                                            Suggested\r\n                                        </li>\r\n                                        <li\r\n                                            className={activeTab === 'Details' ? 'active' : ''}\r\n                                            onClick={() => setActiveTab('Details')}\r\n                                        >\r\n                                            Details\r\n                                        </li>\r\n                                    </ul>\r\n                                    {activeTab === 'Episodes' && (\r\n                                        <>\r\n                                            <div className=\"season-select-wrapper\">\r\n                                                <SeasonDropdown\r\n                                                    availableSeasons={availableSeasons}\r\n                                                    currentSeason={currentSeason}\r\n                                                    setCurrentSeason={setCurrentSeason}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"cards\" id=\"episodeCards\">\r\n                                                {episodes\r\n                                                    .sort((a, b) => {\r\n                                                        const getEpNum = (filename) => {\r\n                                                            const match = filename.match(/^(\\d+)\\./);\r\n                                                            return match ? parseInt(match[1], 10) : 0;\r\n                                                        };\r\n                                                        return getEpNum(a.filename) - getEpNum(b.filename);\r\n                                                    })\r\n                                                    .map((episode) => (\r\n                                                        <div\r\n                                                            className=\"movie-card\"\r\n                                                            key={episode.filename}\r\n                                                            onClick={() => {\r\n                                                                setSelectedMovie({\r\n                                                                    filename: episode.filename,\r\n                                                                    path: episode.path,\r\n                                                                    seriesName,\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            <div className=\"hover-area\">\r\n                                                                <div className=\"image-container\">\r\n                                                                    <img\r\n                                                                        src={`${API_URL}/seriesPosters/${encodeURIComponent(seriesName)}.jpg`}\r\n                                                                        alt={seriesName}\r\n                                                                    />\r\n                                                                    <span className=\"movieTitle\">{episode.filename}</span>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    ))}\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n\r\n                                    {activeTab === 'Suggested' && (\r\n                                        <div className=\"suggested-wrapper\">\r\n                                            <p>Suggested series based on genres: {metadata?.Genre || 'Unknown'}</p>\r\n                                            {/* You can later fetch and render actual suggested series here */}\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {activeTab === 'Details' && (\r\n                                        <div className='details'>\r\n                                            <div className=\"details-wrapper\">\r\n                                                <div className='plot'>\r\n                                                    <p className='detailsTitle'>Plot:</p><p>{metadata?.Plot}</p></div>\r\n                                                <div className='genre'>\r\n                                                    <p className='detailsTitle'>Released:</p><p>{metadata?.Released}</p>\r\n                                                    <p className='detailsTitle'>Genre:</p><p>{metadata?.Genre}</p>\r\n                                                </div>\r\n                                                <div className='starring'>\r\n                                                    <p className='detailsTitle'>Director:</p><p>{metadata?.Director}</p>\r\n                                                    <p className='detailsTitle'>Starring:</p><p>{metadata?.Actors}</p>\r\n                                                    <p className='detailsTitle'>Awards:</p><p>{metadata?.Awards}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            {selectedMovie && (\r\n                                <VideoOverlay\r\n                                    path={selectedMovie.path}\r\n                                    onClose={() => setSelectedMovie(null)}\r\n                                />\r\n                            )}\r\n                        </>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction VideoOverlay({ path = '', onClose }) {\r\n    if (!path) return null;\r\n\r\n    const token = localStorage.getItem('token');\r\n    const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\">\r\n                <button className=\"close-button\" onClick={onClose}>✖</button>\r\n                <video controls autoPlay className=\"video-player\">\r\n                    <source src={videoUrl} type=\"video/mp4\" />\r\n                    Your browser does not support the video tag.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}