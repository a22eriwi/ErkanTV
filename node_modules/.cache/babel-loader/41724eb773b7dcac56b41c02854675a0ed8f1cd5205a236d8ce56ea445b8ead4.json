{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { useAuth } from '../authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const {\n    accessToken\n  } = useAuth();\n  const videoRef = useRef(null);\n  const [videoFileName, setVideoFileName] = useState('');\n  const [contentType, setContentType] = useState('movie');\n  const {\n    user\n  } = useAuth();\n  const [metadata, setMetadata] = useState(null);\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  useEffect(() => {\n    if (path) {\n      const filename = path.split('/').pop();\n      setVideoFileName(filename);\n      setContentType('series');\n    } else if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      setVideoFileName(metadata.filename);\n      setContentType('movie');\n    }\n  }, [path, movieFolder, metadata]);\n\n  //Save progress for series and movies\n  useEffect(() => {\n    const saveProgress = () => {\n      if (videoRef.current && user && videoFileName) {\n        const time = videoRef.current.currentTime;\n        axios.post('/api/progress', {\n          fileName: videoFileName,\n          type: contentType,\n          time\n        });\n      }\n    };\n    const interval = setInterval(saveProgress, 10000);\n    return () => {\n      saveProgress();\n      clearInterval(interval);\n    };\n  }, [videoFileName, contentType, user]);\n\n  //Fetch progress for series and movies\n  useEffect(() => {\n    const fetchProgress = async () => {\n      if (videoFileName) {\n        var _res$data;\n        const res = await axios.get(`/api/progress?fileName=${videoFileName}`);\n        const savedTime = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.time;\n        if (videoRef.current && savedTime) {\n          videoRef.current.currentTime = savedTime;\n        }\n      }\n    };\n    fetchProgress();\n  }, [videoFileName]);\n  const videoUrl = (() => {\n    if (path && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\n    }\n    return null;\n  })();\n  const subtitleUrl = (() => {\n    if (path) {\n      const vttPath = path.replace(/\\.[^.]+$/, '.vtt'); // change .mp4 to .vtt\n      return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\n    }\n    return null;\n  })();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => navigate(-1),\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        autoPlay: true,\n        className: \"video-player\",\n        crossOrigin: \"anonymous\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), subtitleUrl && /*#__PURE__*/_jsxDEV(\"track\", {\n          ref: videoRef,\n          label: \"English\",\n          kind: \"subtitles\",\n          srcLang: \"en\",\n          src: subtitleUrl,\n          default: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading video...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_s(Watch, \"adiGIRKWUWjuE/iK3dbHgyT8XBw=\", false, function () {\n  return [useSearchParams, useNavigate, useAuth, useAuth];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSearchParams","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Watch","_s","searchParams","path","get","movieFolder","navigate","accessToken","videoRef","videoFileName","setVideoFileName","contentType","setContentType","user","metadata","setMetadata","fetchMetadata","res","encodeURIComponent","data","err","console","error","filename","split","pop","saveProgress","current","time","currentTime","axios","post","fileName","type","interval","setInterval","clearInterval","fetchProgress","_res$data","savedTime","videoUrl","defaults","baseURL","subtitleUrl","vttPath","replace","className","children","onClick","_jsxFileName","lineNumber","columnNumber","controls","autoPlay","crossOrigin","src","ref","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\nimport { useAuth } from '../authContext';\r\n\r\nexport default function Watch() {\r\n    const [searchParams] = useSearchParams();\r\n    const path = searchParams.get('path');\r\n    const movieFolder = searchParams.get('movie');\r\n    const navigate = useNavigate();\r\n    const { accessToken } = useAuth();\r\n    const videoRef = useRef(null);\r\n    const [videoFileName, setVideoFileName] = useState('');\r\n    const [contentType, setContentType] = useState('movie');\r\n    const { user } = useAuth();\r\n\r\n    const [metadata, setMetadata] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (movieFolder) {\r\n            const fetchMetadata = async () => {\r\n                try {\r\n                    const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n                    setMetadata(res.data);\r\n                } catch (err) {\r\n                    console.error('❌ Failed to load movie metadata:', err);\r\n                }\r\n            };\r\n            fetchMetadata();\r\n        }\r\n    }, [movieFolder]);\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            const filename = path.split('/').pop();\r\n            setVideoFileName(filename);\r\n            setContentType('series');\r\n        } else if (movieFolder && metadata?.filename) {\r\n            setVideoFileName(metadata.filename);\r\n            setContentType('movie');\r\n        }\r\n    }, [path, movieFolder, metadata]);\r\n\r\n    //Save progress for series and movies\r\n    useEffect(() => {\r\n        const saveProgress = () => {\r\n            if (videoRef.current && user && videoFileName) {\r\n                const time = videoRef.current.currentTime;\r\n                axios.post('/api/progress', {\r\n                    fileName: videoFileName,\r\n                    type: contentType,\r\n                    time,\r\n                });\r\n            }\r\n        };\r\n\r\n        const interval = setInterval(saveProgress, 10000);\r\n        return () => {\r\n            saveProgress();\r\n            clearInterval(interval);\r\n        };\r\n    }, [videoFileName, contentType, user]);\r\n\r\n    //Fetch progress for series and movies\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            if (videoFileName) {\r\n                const res = await axios.get(`/api/progress?fileName=${videoFileName}`);\r\n                const savedTime = res.data?.time;\r\n                if (videoRef.current && savedTime) {\r\n                    videoRef.current.currentTime = savedTime;\r\n                }\r\n            }\r\n        };\r\n        fetchProgress();\r\n    }, [videoFileName]);\r\n\r\n\r\n    const videoUrl = (() => {\r\n        if (path && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    const subtitleUrl = (() => {\r\n        if (path) {\r\n            const vttPath = path.replace(/\\.[^.]+$/, '.vtt'); // change .mp4 to .vtt\r\n            return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename) {\r\n            const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\">\r\n                <button className=\"close-button\" onClick={() => navigate(-1)}>✖</button>\r\n                {videoUrl ? (\r\n                    <video controls autoPlay className=\"video-player\" crossOrigin=\"anonymous\">\r\n                        <source src={videoUrl} type=\"video/mp4\" />\r\n                        {subtitleUrl && (\r\n                            <track\r\n                                ref={videoRef}\r\n                                label=\"English\"\r\n                                kind=\"subtitles\"\r\n                                srcLang=\"en\"\r\n                                src={subtitleUrl}\r\n                                default\r\n                            />\r\n                        )}\r\n                        Your browser does not support the video tag.\r\n                    </video>\r\n                ) : (\r\n                    <p>Loading video...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}