{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\SeriesRow.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction SeriesRow({\n  title,\n  topSeries = false\n}) {\n  _s();\n  const [seriesList, setSeriesList] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        let folders = [];\n        const endpoint = topSeries ? '/api/top-series' : '/api/series';\n        const res = await fetch(`${API_URL}${endpoint}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error(`Failed to fetch series list (${res.status})`);\n        }\n        folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          try {\n            const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`);\n            if (!metaRes.ok) {\n              throw new Error(`Failed to fetch metadata for ${folder}`);\n            }\n            const metaData = await metaRes.json();\n            return {\n              folder,\n              title: metaData.Title || folder,\n              poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n              imdbRating: metaData.imdbRating || 'N/A'\n            };\n          } catch (err) {\n            console.warn(err.message);\n            return {\n              folder,\n              title: folder,\n              poster: null,\n              imdbRating: 'N/A'\n            };\n          }\n        }));\n        setSeriesList(seriesWithMetadata);\n      } catch (err) {\n        console.error('Error fetching series:', err.message);\n      }\n    };\n    fetchSeries();\n  }, [topSeries]);\n  const handleSeriesClick = folderName => {\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centreraCards\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: seriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => handleSeriesClick(series.folder),\n          children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: series.poster,\n            alt: series.title,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movieTitle\",\n            children: [series.title, \" \\u2B50\", series.imdbRating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, series.folder, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(SeriesRow, \"tmWH8qMBt08zh9vY7E3LO0JqIy8=\", false, function () {\n  return [useNavigate];\n});\n_c = SeriesRow;\nexport default SeriesRow;\nvar _c;\n$RefreshReg$(_c, \"SeriesRow\");","map":{"version":3,"names":["useNavigate","React","useEffect","useState","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","SeriesRow","title","topSeries","_s","seriesList","setSeriesList","navigate","fetchSeries","token","localStorage","getItem","folders","endpoint","res","fetch","headers","Authorization","ok","Error","status","json","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","Title","poster","Poster","imdbRating","err","console","warn","message","error","handleSeriesClick","folderName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","series","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/SeriesRow.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction SeriesRow({ title, topSeries = false }) {\r\n  const [seriesList, setSeriesList] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchSeries = async () => {\r\n      const token = localStorage.getItem('token');\r\n\r\n      try {\r\n        let folders = [];\r\n        const endpoint = topSeries ? '/api/top-series' : '/api/series';\r\n        const res = await fetch(`${API_URL}${endpoint}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch series list (${res.status})`);\r\n        }\r\n\r\n        folders = await res.json();\r\n\r\n        const seriesWithMetadata = await Promise.all(\r\n          folders.map(async (folder) => {\r\n            try {\r\n              const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`);\r\n              if (!metaRes.ok) {\r\n                throw new Error(`Failed to fetch metadata for ${folder}`);\r\n              }\r\n\r\n              const metaData = await metaRes.json();\r\n\r\n              return {\r\n                folder,\r\n                title: metaData.Title || folder,\r\n                poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                imdbRating: metaData.imdbRating || 'N/A',\r\n              };\r\n            } catch (err) {\r\n              console.warn(err.message);\r\n              return {\r\n                folder,\r\n                title: folder,\r\n                poster: null,\r\n                imdbRating: 'N/A',\r\n              };\r\n            }\r\n          })\r\n        );\r\n\r\n        setSeriesList(seriesWithMetadata);\r\n      } catch (err) {\r\n        console.error('Error fetching series:', err.message);\r\n      }\r\n    };\r\n\r\n    fetchSeries();\r\n  }, [topSeries]);\r\n\r\n  const handleSeriesClick = (folderName) => {\r\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie-row\">\r\n      <h3>{title}</h3>\r\n      <div className='centreraCards'>\r\n        <div className=\"cards\">\r\n          {seriesList.map(series => (\r\n            <div\r\n              key={series.folder}\r\n              className=\"movie-card\"\r\n              onClick={() => handleSeriesClick(series.folder)}\r\n            >\r\n              {series.poster && (\r\n                <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n              )}\r\n              <span className=\"movieTitle\">{series.title} ‚≠ê{series.imdbRating}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeriesRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}