{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\SeriesPage.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useAuth } from '../authContext';\nimport { useState, useRef, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from '../Components/Header';\nimport api from '../Api';\nimport ProgressBar from '../Components/ProgressBar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RenderSeriesPage() {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  if (!isLoggedIn) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoggedIn && /*#__PURE__*/_jsxDEV(SeriesPage, {\n      title: \"SeriesPage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 28\n    }, this)\n  }, void 0, false);\n}\n_s(RenderSeriesPage, \"Jbx0LrCfdz/EDenJV2YbpvzQ6CY=\", false, function () {\n  return [useAuth];\n});\n_c = RenderSeriesPage;\nfunction SeriesPage() {\n  _s3();\n  var _s2 = $RefreshSig$(),\n    _metadata$Actors;\n  const {\n    isLoggedIn\n  } = useAuth();\n  const {\n    seriesName\n  } = useParams();\n  const navigate = useNavigate();\n  const [lastWatchedPath, setLastWatchedPath] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [episodes, setEpisodes] = useState([]);\n  const [availableSeasons, setAvailableSeasons] = useState([]);\n  const [currentSeason, setCurrentSeason] = useState('');\n  const [activeTab, setActiveTab] = useState('Episodes');\n  const [suggestedSeries, setSuggestedSeries] = useState([]);\n  const [seasonMap, setSeasonMap] = useState({});\n  const [watchedEpisodes, setWatchedEpisodes] = useState(new Set());\n  const [episodeProgress, setEpisodeProgress] = useState({});\n\n  //Last watched episode fetch\n  useEffect(() => {\n    const fetchLastWatched = async () => {\n      try {\n        const res = await api.get(`/api/progress/last-series-episode?seriesName=${encodeURIComponent(seriesName)}`);\n        const pathToUse = res.data.fullPath || res.data.fileName;\n        setLastWatchedPath(pathToUse);\n      } catch (err) {\n        console.warn('ℹ️ No resume data found for this series.');\n      }\n    };\n    fetchLastWatched();\n  }, [seriesName]);\n\n  //Fetch progress for watched episodes to enable episode checkmarks\n  useEffect(() => {\n    const fetchProgress = async () => {\n      try {\n        const res = await api.get(`/api/progress/all-for-series?seriesName=${encodeURIComponent(seriesName)}`);\n        const watched = new Set();\n        const episodeProgressMap = {};\n        res.data.forEach(item => {\n          if (item.time && item.duration) {\n            if (item.time / item.duration > 0.96) {\n              watched.add(item.fullPath);\n            }\n            episodeProgressMap[item.fullPath] = {\n              time: item.time,\n              duration: item.duration\n            };\n          }\n        });\n        setWatchedEpisodes(watched);\n        setEpisodeProgress(episodeProgressMap); // ⬅️ new state\n      } catch (err) {\n        console.warn('ℹ️ Could not fetch watch progress for this series.');\n      }\n    };\n    fetchProgress();\n  }, [seriesName]);\n\n  //Fetch metadata for series\n  useEffect(() => {\n    if (!seriesName) return;\n    const fetchMetadata = async () => {\n      try {\n        const res = await api.get(`/api/series-metadata/${encodeURIComponent(seriesName)}`);\n        setMetadata(res.data);\n      } catch (err) {\n        console.error('❌ Failed to fetch series metadata:', err);\n      }\n    };\n    const fetchSeasons = async () => {\n      try {\n        const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\n        const data = res.data;\n        const grouped = {};\n        for (const {\n          season,\n          episodes\n        } of data.seasons) {\n          grouped[season] = episodes;\n        }\n        const allSeasons = Object.keys(grouped);\n        setSeasonMap(grouped);\n        setAvailableSeasons(allSeasons);\n        setCurrentSeason(allSeasons[0]);\n        setEpisodes(grouped[allSeasons[0]]);\n      } catch (err) {\n        console.error('❌ Failed to fetch seasons:', err);\n      }\n    };\n    fetchMetadata();\n    fetchSeasons();\n  }, [seriesName]);\n\n  //Fetch suggested series\n  useEffect(() => {\n    if (!(metadata !== null && metadata !== void 0 && metadata.Genre)) return;\n    const fetchSuggested = async () => {\n      try {\n        const res = await api.get('/api/series-metadata');\n        const allMetadata = res.data;\n        const currentGenres = metadata.Genre.split(',').map(g => g.trim().toLowerCase());\n        const suggestions = Object.entries(allMetadata).filter(([folder, data]) => {\n          if (folder === seriesName) return false;\n          if (!data.Genre) return false;\n          const otherGenres = data.Genre.split(',').map(g => g.trim().toLowerCase());\n          return currentGenres.some(g => otherGenres.includes(g));\n        }).map(([folder, data]) => ({\n          folder,\n          title: data.Title,\n          poster: data.Poster\n        }));\n        setSuggestedSeries(suggestions);\n      } catch (err) {\n        console.error('❌ Error fetching suggested series:', err);\n      }\n    };\n    fetchSuggested();\n  }, [metadata, seriesName]);\n  useEffect(() => {\n    if (currentSeason && seasonMap[currentSeason]) {\n      setEpisodes(seasonMap[currentSeason]);\n    }\n  }, [currentSeason, seasonMap]);\n  function SeasonDropdown({\n    availableSeasons,\n    currentSeason,\n    setCurrentSeason\n  }) {\n    _s2();\n    const [isOpen, setIsOpen] = useState(false);\n    const dropdownRef = useRef();\n    useEffect(() => {\n      const handleClickOutside = event => {\n        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n          setIsOpen(false);\n        }\n      };\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"season-dropdown\",\n      ref: dropdownRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropdown-toggle\",\n        onClick: () => setIsOpen(!isOpen),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: currentSeason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-menu\",\n        children: availableSeasons.map(season => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `dropdown-item ${currentSeason === season ? 'active' : ''}`,\n          onClick: () => {\n            setCurrentSeason(season);\n            setIsOpen(false);\n          },\n          children: season\n        }, season, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this);\n  }\n  _s2(SeasonDropdown, \"uhOyve9TWk+bvhPJTPlaMsUEQAY=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        id: \"movie-row-Home\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centreraCards\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"componentDiv\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movieComponent\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"msTitel\",\n                children: [(metadata === null || metadata === void 0 ? void 0 : metadata.Title) || seriesName, \" \\u2B50\", metadata === null || metadata === void 0 ? void 0 : metadata.imdbRating]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 37\n              }, this), lastWatchedPath && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"play-button\",\n                onClick: () => navigate(`/watch?path=${encodeURIComponent(lastWatchedPath)}`),\n                children: \"\\u25B6 Resume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"tablist\",\n              children: ['Episodes', 'Suggested', 'Details'].map(tab => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: activeTab === tab ? 'active' : '',\n                onClick: () => setActiveTab(tab),\n                children: tab\n              }, tab, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this), activeTab === 'Episodes' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"season-select-wrapper\",\n                children: /*#__PURE__*/_jsxDEV(SeasonDropdown, {\n                  availableSeasons: availableSeasons,\n                  currentSeason: currentSeason,\n                  setCurrentSeason: setCurrentSeason\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards\",\n                id: \"episodeCards\",\n                children: episodes.sort((a, b) => {\n                  const getEpNum = title => {\n                    const match = title.match(/^(\\d+)[. -]?/);\n                    return match ? parseInt(match[1], 10) : 0;\n                  };\n                  return getEpNum(a.title) - getEpNum(b.title);\n                }).map(episode => {\n                  var _episodeProgress$epis, _episodeProgress$epis2;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"episode-card\",\n                    onClick: () => navigate(`/watch?path=${encodeURIComponent(episode.path)}`),\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"hover-area\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"image-container\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"img-wrapper\",\n                          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                            src: `${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(seriesName)}.jpg`,\n                            alt: episode.title\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 263,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n                            time: (_episodeProgress$epis = episodeProgress[episode.path]) === null || _episodeProgress$epis === void 0 ? void 0 : _episodeProgress$epis.time,\n                            duration: (_episodeProgress$epis2 = episodeProgress[episode.path]) === null || _episodeProgress$epis2 === void 0 ? void 0 : _episodeProgress$epis2.duration\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 267,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 262,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"movieTitle\",\n                          children: episode.title\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 272,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 65\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 260,\n                      columnNumber: 61\n                    }, this)\n                  }, episode.path, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 57\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true), activeTab === 'Suggested' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              id: \"suggestedCards\",\n              children: suggestedSeries.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No suggestions found.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 45\n              }, this) : suggestedSeries.map(s => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => window.location.href = `/series/${encodeURIComponent(s.folder)}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"hover-area\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(s.folder)}.jpg`,\n                    alt: s.title || s.folder\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 53\n                }, this)\n              }, s.folder, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 37\n            }, this), activeTab === 'Details' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"details\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"details-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plot\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"detailsTitle\",\n                    children: \"Plot:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: metadata === null || metadata === void 0 ? void 0 : metadata.Plot\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"genre\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"detailsDiv\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Released:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Released\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"detailsTitle\",\n                    children: \"Genre:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: metadata === null || metadata === void 0 ? void 0 : metadata.Genre\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"starring\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"detailsDiv\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Director:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Director\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 325,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"detailsDiv\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Starring:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : (_metadata$Actors = metadata.Actors) === null || _metadata$Actors === void 0 ? void 0 : _metadata$Actors.split(',').map((actor, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: actor.trim()\n                      }, i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 331,\n                        columnNumber: 61\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"detailsDiv\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"detailsTitle\",\n                      children: \"Awards:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 336,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: metadata === null || metadata === void 0 ? void 0 : metadata.Awards\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 337,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s3(SeriesPage, \"KSJSXLPfjyWQu8InsFHXp4kCjNU=\", false, function () {\n  return [useAuth, useParams, useNavigate];\n});\n_c2 = SeriesPage;\nexport default RenderSeriesPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"RenderSeriesPage\");\n$RefreshReg$(_c2, \"SeriesPage\");","map":{"version":3,"names":["useAuth","useState","useRef","useEffect","useParams","useNavigate","Header","api","ProgressBar","jsxDEV","_jsxDEV","Fragment","_Fragment","RenderSeriesPage","_s","isLoggedIn","children","SeriesPage","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s3","_s2","$RefreshSig$","_metadata$Actors","seriesName","navigate","lastWatchedPath","setLastWatchedPath","metadata","setMetadata","episodes","setEpisodes","availableSeasons","setAvailableSeasons","currentSeason","setCurrentSeason","activeTab","setActiveTab","suggestedSeries","setSuggestedSeries","seasonMap","setSeasonMap","watchedEpisodes","setWatchedEpisodes","Set","episodeProgress","setEpisodeProgress","fetchLastWatched","res","get","encodeURIComponent","pathToUse","data","fullPath","err","console","warn","fetchProgress","watched","episodeProgressMap","forEach","item","time","duration","add","fetchMetadata","error","fetchSeasons","grouped","season","seasons","allSeasons","Object","keys","Genre","fetchSuggested","allMetadata","currentGenres","split","map","g","trim","toLowerCase","suggestions","entries","filter","folder","otherGenres","some","includes","Title","poster","Poster","SeasonDropdown","isOpen","setIsOpen","dropdownRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","ref","onClick","id","imdbRating","tab","sort","a","b","getEpNum","match","parseInt","episode","_episodeProgress$epis","_episodeProgress$epis2","path","src","defaults","baseURL","alt","length","s","window","location","href","Plot","Released","Director","Actors","actor","i","Awards","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/SeriesPage.js"],"sourcesContent":["import { useAuth } from '../authContext';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Header from '../Components/Header';\r\nimport api from '../Api';\r\nimport ProgressBar from '../Components/ProgressBar';\r\n\r\nfunction RenderSeriesPage() {\r\n    const { isLoggedIn } = useAuth();\r\n    if (!isLoggedIn) return null;\r\n    return (\r\n        <>\r\n            {isLoggedIn && <SeriesPage title=\"SeriesPage\" />}\r\n        </>\r\n    );\r\n}\r\n\r\nfunction SeriesPage() {\r\n    const { isLoggedIn } = useAuth();\r\n    const { seriesName } = useParams();\r\n    const navigate = useNavigate();\r\n    const [lastWatchedPath, setLastWatchedPath] = useState(null);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [availableSeasons, setAvailableSeasons] = useState([]);\r\n    const [currentSeason, setCurrentSeason] = useState('');\r\n    const [activeTab, setActiveTab] = useState('Episodes');\r\n    const [suggestedSeries, setSuggestedSeries] = useState([]);\r\n    const [seasonMap, setSeasonMap] = useState({});\r\n    const [watchedEpisodes, setWatchedEpisodes] = useState(new Set());\r\n    const [episodeProgress, setEpisodeProgress] = useState({});\r\n\r\n    //Last watched episode fetch\r\n    useEffect(() => {\r\n        const fetchLastWatched = async () => {\r\n            try {\r\n                const res = await api.get(`/api/progress/last-series-episode?seriesName=${encodeURIComponent(seriesName)}`);\r\n\r\n                const pathToUse = res.data.fullPath || res.data.fileName;\r\n                setLastWatchedPath(pathToUse);\r\n            } catch (err) {\r\n                console.warn('ℹ️ No resume data found for this series.');\r\n            }\r\n        };\r\n\r\n        fetchLastWatched();\r\n    }, [seriesName]);\r\n\r\n    //Fetch progress for watched episodes to enable episode checkmarks\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            try {\r\n                const res = await api.get(`/api/progress/all-for-series?seriesName=${encodeURIComponent(seriesName)}`);\r\n\r\n                const watched = new Set();\r\n                const episodeProgressMap = {};\r\n\r\n                res.data.forEach(item => {\r\n                    if (item.time && item.duration) {\r\n                        if ((item.time / item.duration) > 0.96) {\r\n                            watched.add(item.fullPath);\r\n                        }\r\n\r\n                        episodeProgressMap[item.fullPath] = {\r\n                            time: item.time,\r\n                            duration: item.duration\r\n                        };\r\n                    }\r\n                });\r\n\r\n                setWatchedEpisodes(watched);\r\n                setEpisodeProgress(episodeProgressMap); // ⬅️ new state\r\n            } catch (err) {\r\n                console.warn('ℹ️ Could not fetch watch progress for this series.');\r\n            }\r\n        };\r\n\r\n        fetchProgress();\r\n    }, [seriesName]);\r\n\r\n\r\n    //Fetch metadata for series\r\n    useEffect(() => {\r\n        if (!seriesName) return;\r\n\r\n        const fetchMetadata = async () => {\r\n            try {\r\n                const res = await api.get(`/api/series-metadata/${encodeURIComponent(seriesName)}`);\r\n                setMetadata(res.data);\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch series metadata:', err);\r\n            }\r\n        };\r\n\r\n        const fetchSeasons = async () => {\r\n            try {\r\n                const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\r\n                const data = res.data;\r\n\r\n                const grouped = {};\r\n                for (const { season, episodes } of data.seasons) {\r\n                    grouped[season] = episodes;\r\n                }\r\n\r\n                const allSeasons = Object.keys(grouped);\r\n                setSeasonMap(grouped);\r\n                setAvailableSeasons(allSeasons);\r\n                setCurrentSeason(allSeasons[0]);\r\n                setEpisodes(grouped[allSeasons[0]]);\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch seasons:', err);\r\n            }\r\n        };\r\n\r\n        fetchMetadata();\r\n        fetchSeasons();\r\n    }, [seriesName]);\r\n\r\n    //Fetch suggested series\r\n    useEffect(() => {\r\n        if (!metadata?.Genre) return;\r\n\r\n        const fetchSuggested = async () => {\r\n            try {\r\n                const res = await api.get('/api/series-metadata');\r\n                const allMetadata = res.data;\r\n\r\n                const currentGenres = metadata.Genre.split(',').map((g) => g.trim().toLowerCase());\r\n\r\n                const suggestions = Object.entries(allMetadata)\r\n                    .filter(([folder, data]) => {\r\n                        if (folder === seriesName) return false;\r\n                        if (!data.Genre) return false;\r\n                        const otherGenres = data.Genre.split(',').map((g) => g.trim().toLowerCase());\r\n                        return currentGenres.some((g) => otherGenres.includes(g));\r\n                    })\r\n                    .map(([folder, data]) => ({\r\n                        folder,\r\n                        title: data.Title,\r\n                        poster: data.Poster,\r\n                    }));\r\n\r\n                setSuggestedSeries(suggestions);\r\n            } catch (err) {\r\n                console.error('❌ Error fetching suggested series:', err);\r\n            }\r\n        };\r\n\r\n        fetchSuggested();\r\n    }, [metadata, seriesName]);\r\n\r\n    useEffect(() => {\r\n        if (currentSeason && seasonMap[currentSeason]) {\r\n            setEpisodes(seasonMap[currentSeason]);\r\n        }\r\n    }, [currentSeason, seasonMap]);\r\n\r\n    function SeasonDropdown({ availableSeasons, currentSeason, setCurrentSeason }) {\r\n        const [isOpen, setIsOpen] = useState(false);\r\n        const dropdownRef = useRef();\r\n\r\n        useEffect(() => {\r\n            const handleClickOutside = (event) => {\r\n                if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n                    setIsOpen(false);\r\n                }\r\n            };\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return () => document.removeEventListener('mousedown', handleClickOutside);\r\n        }, []);\r\n\r\n        return (\r\n            <div className=\"season-dropdown\" ref={dropdownRef}>\r\n                <button className=\"dropdown-toggle\" onClick={() => setIsOpen(!isOpen)}>\r\n                    <span>{currentSeason}</span>\r\n                    <span>▼</span>\r\n                </button>\r\n                {isOpen && (\r\n                    <div className=\"dropdown-menu\">\r\n                        {availableSeasons.map((season) => (\r\n                            <div\r\n                                key={season}\r\n                                className={`dropdown-item ${currentSeason === season ? 'active' : ''}`}\r\n                                onClick={() => {\r\n                                    setCurrentSeason(season);\r\n                                    setIsOpen(false);\r\n                                }}\r\n                            >\r\n                                {season}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className=\"movie-row\" id=\"movie-row-Home\">\r\n                        <div className=\"centreraCards\">\r\n                            <div className=\"componentDiv\">\r\n                                <div className='movieComponent'>\r\n                                    <h3 className=\"msTitel\">\r\n                                        {metadata?.Title || seriesName} ⭐{metadata?.imdbRating}\r\n                                    </h3>\r\n                                    {lastWatchedPath && (\r\n                                        <button\r\n                                            className=\"play-button\"\r\n                                            onClick={() => navigate(`/watch?path=${encodeURIComponent(lastWatchedPath)}`)}\r\n                                        >\r\n                                            ▶ Resume\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                <ul className=\"tablist\">\r\n                                    {['Episodes', 'Suggested', 'Details'].map((tab) => (\r\n                                        <li\r\n                                            key={tab}\r\n                                            className={activeTab === tab ? 'active' : ''}\r\n                                            onClick={() => setActiveTab(tab)}\r\n                                        >\r\n                                            {tab}\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n\r\n                                {activeTab === 'Episodes' && (\r\n                                    <>\r\n                                        <div className=\"season-select-wrapper\">\r\n                                            <SeasonDropdown\r\n                                                availableSeasons={availableSeasons}\r\n                                                currentSeason={currentSeason}\r\n                                                setCurrentSeason={setCurrentSeason}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"cards\" id=\"episodeCards\">\r\n                                            {episodes\r\n                                                .sort((a, b) => {\r\n                                                    const getEpNum = (title) => {\r\n                                                        const match = title.match(/^(\\d+)[. -]?/);\r\n                                                        return match ? parseInt(match[1], 10) : 0;\r\n                                                    };\r\n                                                    return getEpNum(a.title) - getEpNum(b.title);\r\n                                                })\r\n                                                .map((episode) => {\r\n\r\n                                                    return (\r\n                                                        <div\r\n                                                            className=\"episode-card\"\r\n                                                            key={episode.path}\r\n                                                            onClick={() =>\r\n                                                                navigate(`/watch?path=${encodeURIComponent(episode.path)}`)\r\n                                                            }\r\n                                                        >\r\n                                                            <div className=\"hover-area\">\r\n                                                                <div className=\"image-container\">\r\n                                                                    <div className=\"img-wrapper\">\r\n                                                                        <img\r\n                                                                            src={`${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(seriesName)}.jpg`}\r\n                                                                            alt={episode.title}\r\n                                                                        />\r\n                                                                        <ProgressBar\r\n                                                                            time={episodeProgress[episode.path]?.time}\r\n                                                                            duration={episodeProgress[episode.path]?.duration}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                    <span className=\"movieTitle\">{episode.title}</span>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    );\r\n                                                })}\r\n                                        </div>\r\n                                    </>\r\n                                )}\r\n\r\n                                {activeTab === 'Suggested' && (\r\n                                    <div className=\"cards\" id=\"suggestedCards\">\r\n                                        {suggestedSeries.length === 0 ? (\r\n                                            <p>No suggestions found.</p>\r\n                                        ) : (\r\n                                            suggestedSeries.map((s) => (\r\n                                                <div\r\n                                                    key={s.folder}\r\n                                                    className=\"movie-card\"\r\n                                                    onClick={() =>\r\n                                                        (window.location.href = `/series/${encodeURIComponent(s.folder)}`)\r\n                                                    }\r\n                                                >\r\n                                                    <div className=\"hover-area\">\r\n                                                        <img\r\n                                                            src={`${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(s.folder)}.jpg`}\r\n                                                            alt={s.title || s.folder}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n\r\n                                {activeTab === 'Details' && (\r\n                                    <div className=\"details\">\r\n                                        <div className=\"details-wrapper\">\r\n                                            <div className=\"plot\">\r\n                                                <p className=\"detailsTitle\">Plot:</p>\r\n                                                <p>{metadata?.Plot}</p>\r\n                                            </div>\r\n                                            <div className=\"genre\">\r\n                                                <div className=\"detailsDiv\">\r\n                                                    <p className=\"detailsTitle\">Released:</p>\r\n                                                    <p>{metadata?.Released}</p>\r\n                                                </div>\r\n                                                <p className=\"detailsTitle\">Genre:</p>\r\n                                                <p>{metadata?.Genre}</p>\r\n                                            </div>\r\n                                            <div className=\"starring\">\r\n                                                <div className=\"detailsDiv\">\r\n                                                    <p className=\"detailsTitle\">Director:</p>\r\n                                                    <p>{metadata?.Director}</p>\r\n                                                </div>\r\n                                                <div className=\"detailsDiv\">\r\n                                                    <p className=\"detailsTitle\">Starring:</p>\r\n                                                    <div>\r\n                                                        {metadata?.Actors?.split(',').map((actor, i) => (\r\n                                                            <p key={i}>{actor.trim()}</p>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"detailsDiv\">\r\n                                                    <p className=\"detailsTitle\">Awards:</p>\r\n                                                    <p>{metadata?.Awards}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RenderSeriesPage;"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAW,CAAC,GAAGf,OAAO,CAAC,CAAC;EAChC,IAAI,CAACe,UAAU,EAAE,OAAO,IAAI;EAC5B,oBACIL,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACKD,UAAU,iBAAIL,OAAA,CAACO,UAAU;MAACC,KAAK,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAClD,CAAC;AAEX;AAACR,EAAA,CARQD,gBAAgB;EAAA,QACEb,OAAO;AAAA;AAAAuB,EAAA,GADzBV,gBAAgB;AAUzB,SAASI,UAAUA,CAAA,EAAG;EAAAO,GAAA;EAAA,IAAAC,GAAA,GAAAC,YAAA;IAAAC,gBAAA;EAClB,MAAM;IAAEZ;EAAW,CAAC,GAAGf,OAAO,CAAC,CAAC;EAChC,MAAM;IAAE4B;EAAW,CAAC,GAAGxB,SAAS,CAAC,CAAC;EAClC,MAAMyB,QAAQ,GAAGxB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACyB,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,UAAU,CAAC;EACtD,MAAM,CAACyC,eAAe,EAAEC,kBAAkB,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC6C,eAAe,EAAEC,kBAAkB,CAAC,GAAG9C,QAAQ,CAAC,IAAI+C,GAAG,CAAC,CAAC,CAAC;EACjE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjD,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1D;EACAE,SAAS,CAAC,MAAM;IACZ,MAAMgD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA,MAAMC,GAAG,GAAG,MAAM7C,GAAG,CAAC8C,GAAG,CAAC,gDAAgDC,kBAAkB,CAAC1B,UAAU,CAAC,EAAE,CAAC;QAE3G,MAAM2B,SAAS,GAAGH,GAAG,CAACI,IAAI,CAACC,QAAQ,IAAIL,GAAG,CAACI,IAAI,CAACrC,QAAQ;QACxDY,kBAAkB,CAACwB,SAAS,CAAC;MACjC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACVC,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;MAC5D;IACJ,CAAC;IAEDT,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACvB,UAAU,CAAC,CAAC;;EAEhB;EACAzB,SAAS,CAAC,MAAM;IACZ,MAAM0D,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMT,GAAG,GAAG,MAAM7C,GAAG,CAAC8C,GAAG,CAAC,2CAA2CC,kBAAkB,CAAC1B,UAAU,CAAC,EAAE,CAAC;QAEtG,MAAMkC,OAAO,GAAG,IAAId,GAAG,CAAC,CAAC;QACzB,MAAMe,kBAAkB,GAAG,CAAC,CAAC;QAE7BX,GAAG,CAACI,IAAI,CAACQ,OAAO,CAACC,IAAI,IAAI;UACrB,IAAIA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,QAAQ,EAAE;YAC5B,IAAKF,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,QAAQ,GAAI,IAAI,EAAE;cACpCL,OAAO,CAACM,GAAG,CAACH,IAAI,CAACR,QAAQ,CAAC;YAC9B;YAEAM,kBAAkB,CAACE,IAAI,CAACR,QAAQ,CAAC,GAAG;cAChCS,IAAI,EAAED,IAAI,CAACC,IAAI;cACfC,QAAQ,EAAEF,IAAI,CAACE;YACnB,CAAC;UACL;QACJ,CAAC,CAAC;QAEFpB,kBAAkB,CAACe,OAAO,CAAC;QAC3BZ,kBAAkB,CAACa,kBAAkB,CAAC,CAAC,CAAC;MAC5C,CAAC,CAAC,OAAOL,GAAG,EAAE;QACVC,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAC;MACtE;IACJ,CAAC;IAEDC,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACjC,UAAU,CAAC,CAAC;;EAGhB;EACAzB,SAAS,CAAC,MAAM;IACZ,IAAI,CAACyB,UAAU,EAAE;IAEjB,MAAMyC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMjB,GAAG,GAAG,MAAM7C,GAAG,CAAC8C,GAAG,CAAC,wBAAwBC,kBAAkB,CAAC1B,UAAU,CAAC,EAAE,CAAC;QACnFK,WAAW,CAACmB,GAAG,CAACI,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACVC,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEZ,GAAG,CAAC;MAC5D;IACJ,CAAC;IAED,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMnB,GAAG,GAAG,MAAM7C,GAAG,CAAC8C,GAAG,CAAC,eAAeC,kBAAkB,CAAC1B,UAAU,CAAC,EAAE,CAAC;QAC1E,MAAM4B,IAAI,GAAGJ,GAAG,CAACI,IAAI;QAErB,MAAMgB,OAAO,GAAG,CAAC,CAAC;QAClB,KAAK,MAAM;UAAEC,MAAM;UAAEvC;QAAS,CAAC,IAAIsB,IAAI,CAACkB,OAAO,EAAE;UAC7CF,OAAO,CAACC,MAAM,CAAC,GAAGvC,QAAQ;QAC9B;QAEA,MAAMyC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC;QACvC3B,YAAY,CAAC2B,OAAO,CAAC;QACrBnC,mBAAmB,CAACsC,UAAU,CAAC;QAC/BpC,gBAAgB,CAACoC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/BxC,WAAW,CAACqC,OAAO,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOjB,GAAG,EAAE;QACVC,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEZ,GAAG,CAAC;MACpD;IACJ,CAAC;IAEDW,aAAa,CAAC,CAAC;IACfE,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAAC3C,UAAU,CAAC,CAAC;;EAEhB;EACAzB,SAAS,CAAC,MAAM;IACZ,IAAI,EAAC6B,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAE8C,KAAK,GAAE;IAEtB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAM3B,GAAG,GAAG,MAAM7C,GAAG,CAAC8C,GAAG,CAAC,sBAAsB,CAAC;QACjD,MAAM2B,WAAW,GAAG5B,GAAG,CAACI,IAAI;QAE5B,MAAMyB,aAAa,GAAGjD,QAAQ,CAAC8C,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;QAElF,MAAMC,WAAW,GAAGX,MAAM,CAACY,OAAO,CAACR,WAAW,CAAC,CAC1CS,MAAM,CAAC,CAAC,CAACC,MAAM,EAAElC,IAAI,CAAC,KAAK;UACxB,IAAIkC,MAAM,KAAK9D,UAAU,EAAE,OAAO,KAAK;UACvC,IAAI,CAAC4B,IAAI,CAACsB,KAAK,EAAE,OAAO,KAAK;UAC7B,MAAMa,WAAW,GAAGnC,IAAI,CAACsB,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;UAC5E,OAAOL,aAAa,CAACW,IAAI,CAAER,CAAC,IAAKO,WAAW,CAACE,QAAQ,CAACT,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CACDD,GAAG,CAAC,CAAC,CAACO,MAAM,EAAElC,IAAI,CAAC,MAAM;UACtBkC,MAAM;UACNxE,KAAK,EAAEsC,IAAI,CAACsC,KAAK;UACjBC,MAAM,EAAEvC,IAAI,CAACwC;QACjB,CAAC,CAAC,CAAC;QAEPrD,kBAAkB,CAAC4C,WAAW,CAAC;MACnC,CAAC,CAAC,OAAO7B,GAAG,EAAE;QACVC,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEZ,GAAG,CAAC;MAC5D;IACJ,CAAC;IAEDqB,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAAC/C,QAAQ,EAAEJ,UAAU,CAAC,CAAC;EAE1BzB,SAAS,CAAC,MAAM;IACZ,IAAImC,aAAa,IAAIM,SAAS,CAACN,aAAa,CAAC,EAAE;MAC3CH,WAAW,CAACS,SAAS,CAACN,aAAa,CAAC,CAAC;IACzC;EACJ,CAAC,EAAE,CAACA,aAAa,EAAEM,SAAS,CAAC,CAAC;EAE9B,SAASqD,cAAcA,CAAC;IAAE7D,gBAAgB;IAAEE,aAAa;IAAEC;EAAiB,CAAC,EAAE;IAAAd,GAAA;IAC3E,MAAM,CAACyE,MAAM,EAAEC,SAAS,CAAC,GAAGlG,QAAQ,CAAC,KAAK,CAAC;IAC3C,MAAMmG,WAAW,GAAGlG,MAAM,CAAC,CAAC;IAE5BC,SAAS,CAAC,MAAM;MACZ,MAAMkG,kBAAkB,GAAIC,KAAK,IAAK;QAClC,IAAIF,WAAW,CAACG,OAAO,IAAI,CAACH,WAAW,CAACG,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;UACpEN,SAAS,CAAC,KAAK,CAAC;QACpB;MACJ,CAAC;MACDO,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;MAC1D,OAAO,MAAMK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;IAC9E,CAAC,EAAE,EAAE,CAAC;IAEN,oBACI3F,OAAA;MAAKmG,SAAS,EAAC,iBAAiB;MAACC,GAAG,EAAEV,WAAY;MAAApF,QAAA,gBAC9CN,OAAA;QAAQmG,SAAS,EAAC,iBAAiB;QAACE,OAAO,EAAEA,CAAA,KAAMZ,SAAS,CAAC,CAACD,MAAM,CAAE;QAAAlF,QAAA,gBAClEN,OAAA;UAAAM,QAAA,EAAOsB;QAAa;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5BZ,OAAA;UAAAM,QAAA,EAAM;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,EACR4E,MAAM,iBACHxF,OAAA;QAAKmG,SAAS,EAAC,eAAe;QAAA7F,QAAA,EACzBoB,gBAAgB,CAAC+C,GAAG,CAAEV,MAAM,iBACzB/D,OAAA;UAEImG,SAAS,EAAE,iBAAiBvE,aAAa,KAAKmC,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;UACvEsC,OAAO,EAAEA,CAAA,KAAM;YACXxE,gBAAgB,CAACkC,MAAM,CAAC;YACxB0B,SAAS,CAAC,KAAK,CAAC;UACpB,CAAE;UAAAnF,QAAA,EAEDyD;QAAM,GAPFA,MAAM;UAAAtD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQV,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEd;EAACG,GAAA,CAtCQwE,cAAc;EAwCvB,oBACIvF,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACIN,OAAA,CAACJ,MAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVZ,OAAA;MAAKmG,SAAS,EAAC,SAAS;MAAA7F,QAAA,EACnBD,UAAU,iBACPL,OAAA;QAAKmG,SAAS,EAAC,WAAW;QAACG,EAAE,EAAC,gBAAgB;QAAAhG,QAAA,eAC1CN,OAAA;UAAKmG,SAAS,EAAC,eAAe;UAAA7F,QAAA,eAC1BN,OAAA;YAAKmG,SAAS,EAAC,cAAc;YAAA7F,QAAA,gBACzBN,OAAA;cAAKmG,SAAS,EAAC,gBAAgB;cAAA7F,QAAA,gBAC3BN,OAAA;gBAAImG,SAAS,EAAC,SAAS;gBAAA7F,QAAA,GAClB,CAAAgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE8D,KAAK,KAAIlE,UAAU,EAAC,SAAE,EAACI,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEiF,UAAU;cAAA;gBAAA9F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtD,CAAC,EACJQ,eAAe,iBACZpB,OAAA;gBACImG,SAAS,EAAC,aAAa;gBACvBE,OAAO,EAAEA,CAAA,KAAMlF,QAAQ,CAAC,eAAeyB,kBAAkB,CAACxB,eAAe,CAAC,EAAE,CAAE;gBAAAd,QAAA,EACjF;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CACX;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACNZ,OAAA;cAAImG,SAAS,EAAC,SAAS;cAAA7F,QAAA,EAClB,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,CAACmE,GAAG,CAAE+B,GAAG,iBAC1CxG,OAAA;gBAEImG,SAAS,EAAErE,SAAS,KAAK0E,GAAG,GAAG,QAAQ,GAAG,EAAG;gBAC7CH,OAAO,EAAEA,CAAA,KAAMtE,YAAY,CAACyE,GAAG,CAAE;gBAAAlG,QAAA,EAEhCkG;cAAG,GAJCA,GAAG;gBAAA/F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKR,CACP;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,EAEJkB,SAAS,KAAK,UAAU,iBACrB9B,OAAA,CAAAE,SAAA;cAAAI,QAAA,gBACIN,OAAA;gBAAKmG,SAAS,EAAC,uBAAuB;gBAAA7F,QAAA,eAClCN,OAAA,CAACuF,cAAc;kBACX7D,gBAAgB,EAAEA,gBAAiB;kBACnCE,aAAa,EAAEA,aAAc;kBAC7BC,gBAAgB,EAAEA;gBAAiB;kBAAApB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD,CAAC,eAENZ,OAAA;gBAAKmG,SAAS,EAAC,OAAO;gBAACG,EAAE,EAAC,cAAc;gBAAAhG,QAAA,EACnCkB,QAAQ,CACJiF,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;kBACZ,MAAMC,QAAQ,GAAIpG,KAAK,IAAK;oBACxB,MAAMqG,KAAK,GAAGrG,KAAK,CAACqG,KAAK,CAAC,cAAc,CAAC;oBACzC,OAAOA,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;kBAC7C,CAAC;kBACD,OAAOD,QAAQ,CAACF,CAAC,CAAClG,KAAK,CAAC,GAAGoG,QAAQ,CAACD,CAAC,CAACnG,KAAK,CAAC;gBAChD,CAAC,CAAC,CACDiE,GAAG,CAAEsC,OAAO,IAAK;kBAAA,IAAAC,qBAAA,EAAAC,sBAAA;kBAEd,oBACIjH,OAAA;oBACImG,SAAS,EAAC,cAAc;oBAExBE,OAAO,EAAEA,CAAA,KACLlF,QAAQ,CAAC,eAAeyB,kBAAkB,CAACmE,OAAO,CAACG,IAAI,CAAC,EAAE,CAC7D;oBAAA5G,QAAA,eAEDN,OAAA;sBAAKmG,SAAS,EAAC,YAAY;sBAAA7F,QAAA,eACvBN,OAAA;wBAAKmG,SAAS,EAAC,iBAAiB;wBAAA7F,QAAA,gBAC5BN,OAAA;0BAAKmG,SAAS,EAAC,aAAa;0BAAA7F,QAAA,gBACxBN,OAAA;4BACImH,GAAG,EAAE,GAAGtH,GAAG,CAACuH,QAAQ,CAACC,OAAO,kBAAkBzE,kBAAkB,CAAC1B,UAAU,CAAC,MAAO;4BACnFoG,GAAG,EAAEP,OAAO,CAACvG;0BAAM;4BAAAC,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OACtB,CAAC,eACFZ,OAAA,CAACF,WAAW;4BACR0D,IAAI,GAAAwD,qBAAA,GAAEzE,eAAe,CAACwE,OAAO,CAACG,IAAI,CAAC,cAAAF,qBAAA,uBAA7BA,qBAAA,CAA+BxD,IAAK;4BAC1CC,QAAQ,GAAAwD,sBAAA,GAAE1E,eAAe,CAACwE,OAAO,CAACG,IAAI,CAAC,cAAAD,sBAAA,uBAA7BA,sBAAA,CAA+BxD;0BAAS;4BAAAhD,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OACrD,CAAC;wBAAA;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OACD,CAAC,eACNZ,OAAA;0BAAMmG,SAAS,EAAC,YAAY;0BAAA7F,QAAA,EAAEyG,OAAO,CAACvG;wBAAK;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAO,CAAC;sBAAA;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAClD;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACL;kBAAC,GAnBDmG,OAAO,CAACG,IAAI;oBAAAzG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAoBhB,CAAC;gBAEd,CAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC;YAAA,eACR,CACL,EAEAkB,SAAS,KAAK,WAAW,iBACtB9B,OAAA;cAAKmG,SAAS,EAAC,OAAO;cAACG,EAAE,EAAC,gBAAgB;cAAAhG,QAAA,EACrC0B,eAAe,CAACuF,MAAM,KAAK,CAAC,gBACzBvH,OAAA;gBAAAM,QAAA,EAAG;cAAqB;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,GAE5BoB,eAAe,CAACyC,GAAG,CAAE+C,CAAC,iBAClBxH,OAAA;gBAEImG,SAAS,EAAC,YAAY;gBACtBE,OAAO,EAAEA,CAAA,KACJoB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAW/E,kBAAkB,CAAC4E,CAAC,CAACxC,MAAM,CAAC,EAClE;gBAAA1E,QAAA,eAEDN,OAAA;kBAAKmG,SAAS,EAAC,YAAY;kBAAA7F,QAAA,eACvBN,OAAA;oBACImH,GAAG,EAAE,GAAGtH,GAAG,CAACuH,QAAQ,CAACC,OAAO,kBAAkBzE,kBAAkB,CAAC4E,CAAC,CAACxC,MAAM,CAAC,MAAO;oBACjFsC,GAAG,EAAEE,CAAC,CAAChH,KAAK,IAAIgH,CAAC,CAACxC;kBAAO;oBAAAvE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5B;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD;cAAC,GAXD4G,CAAC,CAACxC,MAAM;gBAAAvE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAYZ,CACR;YACJ;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CACR,EAEAkB,SAAS,KAAK,SAAS,iBACpB9B,OAAA;cAAKmG,SAAS,EAAC,SAAS;cAAA7F,QAAA,eACpBN,OAAA;gBAAKmG,SAAS,EAAC,iBAAiB;gBAAA7F,QAAA,gBAC5BN,OAAA;kBAAKmG,SAAS,EAAC,MAAM;kBAAA7F,QAAA,gBACjBN,OAAA;oBAAGmG,SAAS,EAAC,cAAc;oBAAA7F,QAAA,EAAC;kBAAK;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAG,CAAC,eACrCZ,OAAA;oBAAAM,QAAA,EAAIgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEsG;kBAAI;oBAAAnH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtB,CAAC,eACNZ,OAAA;kBAAKmG,SAAS,EAAC,OAAO;kBAAA7F,QAAA,gBAClBN,OAAA;oBAAKmG,SAAS,EAAC,YAAY;oBAAA7F,QAAA,gBACvBN,OAAA;sBAAGmG,SAAS,EAAC,cAAc;sBAAA7F,QAAA,EAAC;oBAAS;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAG,CAAC,eACzCZ,OAAA;sBAAAM,QAAA,EAAIgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEuG;oBAAQ;sBAAApH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAI,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC1B,CAAC,eACNZ,OAAA;oBAAGmG,SAAS,EAAC,cAAc;oBAAA7F,QAAA,EAAC;kBAAM;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAG,CAAC,eACtCZ,OAAA;oBAAAM,QAAA,EAAIgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE8C;kBAAK;oBAAA3D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvB,CAAC,eACNZ,OAAA;kBAAKmG,SAAS,EAAC,UAAU;kBAAA7F,QAAA,gBACrBN,OAAA;oBAAKmG,SAAS,EAAC,YAAY;oBAAA7F,QAAA,gBACvBN,OAAA;sBAAGmG,SAAS,EAAC,cAAc;sBAAA7F,QAAA,EAAC;oBAAS;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAG,CAAC,eACzCZ,OAAA;sBAAAM,QAAA,EAAIgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEwG;oBAAQ;sBAAArH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAI,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC1B,CAAC,eACNZ,OAAA;oBAAKmG,SAAS,EAAC,YAAY;oBAAA7F,QAAA,gBACvBN,OAAA;sBAAGmG,SAAS,EAAC,cAAc;sBAAA7F,QAAA,EAAC;oBAAS;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAG,CAAC,eACzCZ,OAAA;sBAAAM,QAAA,EACKgB,QAAQ,aAARA,QAAQ,wBAAAL,gBAAA,GAARK,QAAQ,CAAEyG,MAAM,cAAA9G,gBAAA,uBAAhBA,gBAAA,CAAkBuD,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACuD,KAAK,EAAEC,CAAC,kBACvCjI,OAAA;wBAAAM,QAAA,EAAY0H,KAAK,CAACrD,IAAI,CAAC;sBAAC,GAAhBsD,CAAC;wBAAAxH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAmB,CAC/B;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACD,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACL,CAAC,eACNZ,OAAA;oBAAKmG,SAAS,EAAC,YAAY;oBAAA7F,QAAA,gBACvBN,OAAA;sBAAGmG,SAAS,EAAC,cAAc;sBAAA7F,QAAA,EAAC;oBAAO;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAG,CAAC,eACvCZ,OAAA;sBAAAM,QAAA,EAAIgB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE4G;oBAAM;sBAAAzH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAI,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACxB,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACL,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CACR;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA,eACR,CAAC;AAEX;AAACE,GAAA,CA5UQP,UAAU;EAAA,QACQjB,OAAO,EACPI,SAAS,EACfC,WAAW;AAAA;AAAAwI,GAAA,GAHvB5H,UAAU;AA8UnB,eAAeJ,gBAAgB;AAAC,IAAAU,EAAA,EAAAsH,GAAA;AAAAC,YAAA,CAAAvH,EAAA;AAAAuH,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}