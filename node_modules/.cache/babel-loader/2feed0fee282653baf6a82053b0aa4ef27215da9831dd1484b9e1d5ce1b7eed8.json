{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Series.js\",\n  _s = $RefreshSig$();\nimport { useAuth } from './authContext';\nimport React, { useEffect, useState, useRef } from 'react';\nimport Header from './Header';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction Series() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [seriesList, setSeriesList] = useState([]);\n  const [episodes, setEpisodes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\n  const [availableSeasons, setAvailableSeasons] = useState([]);\n  const [currentSeason, setCurrentSeason] = useState('');\n  const seriesMetadataCache = useRef({});\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const seriesName = params.get('name');\n    setSelectedSeries(seriesName);\n  }, [location.search]);\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\n          const metaData = await metaRes.json();\n          return {\n            folder,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            title: folder,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n        const allGenres = seriesWithMetadata.flatMap(series => series.genre.split(',').map(g => g.trim()));\n        setGenres([...new Set(allGenres)]);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n\n  // Fetch episodes for selected series\n  useEffect(() => {\n    if (!selectedSeries) return;\n    const fetchEpisodes = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error('Failed to fetch episodes');\n        }\n        const data = await res.json();\n        const allEpisodes = [];\n        const seasonNames = data.seasons.map(seasonObj => seasonObj.season);\n        setAvailableSeasons(seasonNames);\n        setCurrentSeason(seasonNames[0] || ''); // Default to first season\n\n        data.seasons.forEach(seasonObj => {\n          seasonObj.episodes.forEach(episode => {\n            allEpisodes.push({\n              filename: episode.filename,\n              seriesName: selectedSeries,\n              season: seasonObj.season,\n              title: episode.filename.replace(/\\.[^/.]+$/, ''),\n              path: episode.path\n            });\n          });\n        });\n        setEpisodes(allEpisodes);\n      } catch (err) {\n        console.error('Error fetching episodes:', err);\n      }\n    };\n    fetchEpisodes();\n  }, [selectedSeries]);\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      if (!selectedSeries) return;\n\n      // Use cached version if available\n      if (seriesMetadataCache.current[selectedSeries]) {\n        setSelectedSeriesMetadata(seriesMetadataCache.current[selectedSeries]);\n        return;\n      }\n      try {\n        const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(selectedSeries)}`);\n        const data = await res.json();\n\n        // Cache the result\n        seriesMetadataCache.current[selectedSeries] = data;\n        setSelectedSeriesMetadata(data);\n      } catch (err) {\n        console.error('Error fetching selected series metadata:', err);\n      }\n    };\n    fetchMetadata();\n  }, [selectedSeries]);\n  const filteredSeriesList = seriesList.filter(series => {\n    const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  const filteredEpisodes = episodes.filter(episode => {\n    const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSeason = episode.season === currentSeason;\n    return matchesSearch && matchesSeason;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: [isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        children: !selectedSeries ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"msTitel\",\n            children: \"Series\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchBox\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sokDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Search series...\",\n                value: searchTerm,\n                onChange: e => setSearchTerm(e.target.value),\n                className: \"msSearch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"centreraCards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"genre-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(''),\n                  className: !selectedGenre ? 'active' : '',\n                  children: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 45\n                }, this), genres.map((genre, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(genre),\n                  className: selectedGenre === genre ? 'active' : '',\n                  children: genre\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredSeriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => {\n                  setSelectedSeries(series.folder);\n                  navigate(`/series?name=${encodeURIComponent(series.folder)}`);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"hover-area\",\n                  children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: series.poster,\n                    alt: series.title,\n                    className: \"movie-poster\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"movieTitle\",\n                    children: [series.title, \" \\u2B50\", series.imdbRating]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 49\n                }, this)\n              }, series.folder, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"episodeTitel\",\n            className: \"msTitel\",\n            children: [selectedSeries, \" \", currentSeason]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backButtonDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedSeries(null),\n              className: \"backButton\",\n              children: \"\\u2B05 Back to Series\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backButtonDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"season-buttons\",\n              children: availableSeasons.map(season => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentSeason(season),\n                className: currentSeason === season ? 'active' : '',\n                children: season\n              }, season, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredEpisodes.map(episode => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => {\n                  navigate(`/series?name=${encodeURIComponent(episode.seriesName)}&play=${encodeURIComponent(episode.filename)}`);\n                  setSelectedMovie({\n                    filename: episode.filename,\n                    path: episode.path,\n                    seriesName: episode.seriesName\n                  });\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"hover-area\",\n                  children: [(selectedSeriesMetadata === null || selectedSeriesMetadata === void 0 ? void 0 : selectedSeriesMetadata.Poster) && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: selectedSeriesMetadata.Poster,\n                    alt: episode.title,\n                    className: \"movie-poster\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"movieTitle\",\n                    children: [episode.title, \" \\u2B50\", (selectedSeriesMetadata === null || selectedSeriesMetadata === void 0 ? void 0 : selectedSeriesMetadata.imdbRating) || 'N/A']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 49\n                }, this)\n              }, `${episode.seriesName}-${episode.filename}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), selectedMovie && /*#__PURE__*/_jsxDEV(VideoOverlay, {\n        path: selectedMovie.path,\n        onClose: () => setSelectedMovie(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Series, \"Q8Y6yZOCB/zlLtoNL7/JTdHUJrM=\", false, function () {\n  return [useNavigate, useLocation, useAuth];\n});\n_c = Series;\nfunction VideoOverlay({\n  path,\n  onClose\n}) {\n  const token = localStorage.getItem('token');\n  const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        autoPlay: true,\n        className: \"video-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 9\n  }, this);\n}\n_c2 = VideoOverlay;\nexport default Series;\nvar _c, _c2;\n$RefreshReg$(_c, \"Series\");\n$RefreshReg$(_c2, \"VideoOverlay\");","map":{"version":3,"names":["useAuth","React","useEffect","useState","useRef","Header","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","Series","_s","navigate","location","params","URLSearchParams","search","isLoggedIn","selectedMovie","setSelectedMovie","seriesList","setSeriesList","episodes","setEpisodes","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","genres","setGenres","selectedSeriesMetadata","setSelectedSeriesMetadata","availableSeasons","setAvailableSeasons","currentSeason","setCurrentSeason","seriesMetadataCache","seriesName","get","setSelectedSeries","fetchSeries","token","localStorage","getItem","res","fetch","headers","Authorization","folders","json","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","poster","Poster","title","imdbRating","genre","Genre","allGenres","flatMap","series","split","g","trim","Set","err","console","error","selectedSeries","fetchEpisodes","ok","Error","data","allEpisodes","seasonNames","seasons","seasonObj","season","forEach","episode","push","filename","replace","path","fetchMetadata","current","filteredSeriesList","filter","matchesSearch","toLowerCase","includes","matchesGenre","filteredEpisodes","matchesSeason","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","idx","class","src","alt","id","VideoOverlay","onClose","_c","videoUrl","controls","autoPlay","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Series.js"],"sourcesContent":["import { useAuth } from './authContext';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport Header from './Header';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction Series() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const params = new URLSearchParams(location.search);\r\n    const { isLoggedIn } = useAuth();\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedGenre, setSelectedGenre] = useState('');\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\r\n    const [availableSeasons, setAvailableSeasons] = useState([]);\r\n    const [currentSeason, setCurrentSeason] = useState('');\r\n    const seriesMetadataCache = useRef({});\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        const seriesName = params.get('name');\r\n        setSelectedSeries(seriesName);\r\n    }, [location.search]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchSeries = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const folders = await res.json();\r\n\r\n                const seriesWithMetadata = await Promise.all(\r\n                    folders.map(async (folder) => {\r\n\r\n                        const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\r\n                        const metaData = await metaRes.json();\r\n\r\n                        return {\r\n                            folder,\r\n                            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                            title: folder,\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setSeriesList(seriesWithMetadata);\r\n\r\n                const allGenres = seriesWithMetadata.flatMap(series =>\r\n                    series.genre.split(',').map(g => g.trim())\r\n                );\r\n                setGenres([...new Set(allGenres)]);\r\n            } catch (err) {\r\n                console.error('Error fetching series folders or metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchSeries();\r\n    }, []);\r\n\r\n    // Fetch episodes for selected series\r\n    useEffect(() => {\r\n        if (!selectedSeries) return;\r\n\r\n        const fetchEpisodes = async () => {\r\n            const token = localStorage.getItem('token');\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    throw new Error('Failed to fetch episodes');\r\n                }\r\n\r\n                const data = await res.json();\r\n                const allEpisodes = [];\r\n\r\n                const seasonNames = data.seasons.map((seasonObj) => seasonObj.season);\r\n                setAvailableSeasons(seasonNames);\r\n                setCurrentSeason(seasonNames[0] || ''); // Default to first season\r\n\r\n                data.seasons.forEach((seasonObj) => {\r\n                    seasonObj.episodes.forEach((episode) => {\r\n                        allEpisodes.push({\r\n                            filename: episode.filename,\r\n                            seriesName: selectedSeries,\r\n                            season: seasonObj.season,\r\n                            title: episode.filename.replace(/\\.[^/.]+$/, ''),\r\n                            path: episode.path,\r\n                        });\r\n                    });\r\n                });\r\n\r\n                setEpisodes(allEpisodes);\r\n            } catch (err) {\r\n                console.error('Error fetching episodes:', err);\r\n            }\r\n        };\r\n\r\n        fetchEpisodes();\r\n    }, [selectedSeries]);\r\n\r\n    useEffect(() => {\r\n        const fetchMetadata = async () => {\r\n            if (!selectedSeries) return;\r\n\r\n            // Use cached version if available\r\n            if (seriesMetadataCache.current[selectedSeries]) {\r\n                setSelectedSeriesMetadata(seriesMetadataCache.current[selectedSeries]);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(selectedSeries)}`);\r\n                const data = await res.json();\r\n\r\n                // Cache the result\r\n                seriesMetadataCache.current[selectedSeries] = data;\r\n                setSelectedSeriesMetadata(data);\r\n            } catch (err) {\r\n                console.error('Error fetching selected series metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchMetadata();\r\n    }, [selectedSeries]);\r\n\r\n    const filteredSeriesList = seriesList.filter(series => {\r\n        const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || (series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase()));\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    const filteredEpisodes = episodes.filter(episode => {\r\n        const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesSeason = episode.season === currentSeason;\r\n        return matchesSearch && matchesSeason;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className=\"movie-row\">\r\n                        {!selectedSeries ? (\r\n                            <>\r\n                                <h3 className=\"msTitel\">Series</h3>\r\n                                <div className='searchBox'>\r\n                                    <div className=\"sokDiv\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Search series...\"\r\n                                            value={searchTerm}\r\n                                            onChange={(e) => setSearchTerm(e.target.value)}\r\n                                            className=\"msSearch\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className='centreraCards'>\r\n                                        <div className=\"genre-buttons\">\r\n                                            <button\r\n                                                onClick={() => setSelectedGenre('')}\r\n                                                className={!selectedGenre ? 'active' : ''}\r\n                                            >\r\n                                                All\r\n                                            </button>\r\n                                            {genres.map((genre, idx) => (\r\n                                                <button\r\n                                                    key={idx}\r\n                                                    onClick={() => setSelectedGenre(genre)}\r\n                                                    className={selectedGenre === genre ? 'active' : ''}\r\n                                                >\r\n                                                    {genre}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredSeriesList.map(series => (\r\n                                            <div\r\n                                                key={series.folder}\r\n                                                className=\"movie-card\"\r\n                                                onClick={() => {\r\n                                                    setSelectedSeries(series.folder);\r\n                                                    navigate(`/series?name=${encodeURIComponent(series.folder)}`);\r\n                                                }}\r\n                                            >\r\n                                                <div class=\"hover-area\">\r\n                                                    {series.poster && (\r\n                                                        <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n                                                    )}\r\n                                                    <span className=\"movieTitle\">{series.title} ⭐{series.imdbRating}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <h3 id='episodeTitel' className=\"msTitel\">{selectedSeries} {currentSeason}</h3>\r\n                                <div className='backButtonDiv'>\r\n                                    <button onClick={() => setSelectedSeries(null)} className=\"backButton\">⬅ Back to Series</button>\r\n                                </div>\r\n                                <div className='backButtonDiv'>\r\n                                    <div className=\"season-buttons\">\r\n                                        {availableSeasons.map((season) => (\r\n                                            <button\r\n                                                key={season}\r\n                                                onClick={() => setCurrentSeason(season)}\r\n                                                className={currentSeason === season ? 'active' : ''}\r\n                                            >\r\n                                                {season}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredEpisodes.map((episode) => (\r\n                                            <div\r\n                                                className=\"movie-card\"\r\n                                                key={`${episode.seriesName}-${episode.filename}`}\r\n                                                onClick={() => {\r\n                                                    navigate(`/series?name=${encodeURIComponent(episode.seriesName)}&play=${encodeURIComponent(episode.filename)}`);\r\n                                                    setSelectedMovie({\r\n                                                        filename: episode.filename,\r\n                                                        path: episode.path,\r\n                                                        seriesName: episode.seriesName\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <div className=\"hover-area\">\r\n                                                    {selectedSeriesMetadata?.Poster && (\r\n                                                        <img\r\n                                                            src={selectedSeriesMetadata.Poster}\r\n                                                            alt={episode.title}\r\n                                                            className=\"movie-poster\"\r\n                                                        />\r\n                                                    )}\r\n                                                    <span className=\"movieTitle\">\r\n                                                        {episode.title} ⭐{selectedSeriesMetadata?.imdbRating || 'N/A'}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {selectedMovie && (\r\n                    <VideoOverlay\r\n                        path={selectedMovie.path}\r\n                        onClose={() => setSelectedMovie(null)}\r\n                    />\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction VideoOverlay({ path, onClose }) {\r\n    const token = localStorage.getItem('token');\r\n    const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\">\r\n                <button className=\"close-button\" onClick={onClose}>✖</button>\r\n                <video controls autoPlay className=\"video-player\">\r\n                    <source src={videoUrl} type=\"video/mp4\" />\r\n                    Your browser does not support the video tag.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Series;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}