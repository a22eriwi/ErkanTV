{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/authContext.js\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const refreshTimeout = useRef();\n  useEffect(() => {\n    refreshAccessToken(); // Try to refresh when app loads\n  }, []);\n  const refreshAccessToken = async () => {\n    try {\n      const res = await api.post('/api/token');\n      const newToken = res.data.accessToken;\n      const decoded = jwtDecode(newToken);\n      setUser(decoded);\n      setAccessToken(newToken);\n      setIsLoggedIn(true);\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n      clearTimeout(refreshTimeout.current);\n      refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000); // refresh 2s before expiry\n    } catch (err) {\n      logout();\n    }\n  };\n  const login = token => {\n    const decoded = jwtDecode(token);\n    setUser(decoded);\n    setAccessToken(token);\n    setIsLoggedIn(true);\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n    clearTimeout(refreshTimeout.current);\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\n  };\n  const logout = async () => {\n    try {\n      await api.post('/api/logout');\n    } catch (err) {\n      console.error('Logout error:', err);\n    }\n    setUser(null);\n    setAccessToken(null);\n    setIsLoggedIn(false);\n    clearTimeout(refreshTimeout.current);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      accessToken,\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"g5TbnvrgAmRVuEPJ9obj6rCKA+8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useRef","jwtDecode","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","accessToken","setAccessToken","isLoggedIn","setIsLoggedIn","refreshTimeout","refreshAccessToken","res","post","newToken","data","decoded","timeout","exp","Date","now","clearTimeout","current","setTimeout","err","logout","login","token","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Erkflix/src/authContext.js"],"sourcesContent":["// src/authContext.js\r\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport api from './Api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const refreshTimeout = useRef();\r\n\r\n  useEffect(() => {\r\n    refreshAccessToken(); // Try to refresh when app loads\r\n  }, []);\r\n\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const res = await api.post('/api/token');\r\n      const newToken = res.data.accessToken;\r\n\r\n      const decoded = jwtDecode(newToken);\r\n      setUser(decoded);\r\n      setAccessToken(newToken);\r\n      setIsLoggedIn(true);\r\n\r\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n      clearTimeout(refreshTimeout.current);\r\n      refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000); // refresh 2s before expiry\r\n    } catch (err) {\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const login = (token) => {\r\n    const decoded = jwtDecode(token);\r\n    setUser(decoded);\r\n    setAccessToken(token);\r\n    setIsLoggedIn(true);\r\n\r\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n    clearTimeout(refreshTimeout.current);\r\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('/api/logout');\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n    }\r\n    setUser(null);\r\n    setAccessToken(null);\r\n    setIsLoggedIn(false);\r\n    clearTimeout(refreshTimeout.current);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, accessToken, isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}