{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\SeriesPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useAuth } from '../authContext';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from '../Components/Header';\nimport api from '../Api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SeriesPage() {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  if (!isLoggedIn) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SeriesRow, {\n      title: \"Series\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(SeriesPage, \"Jbx0LrCfdz/EDenJV2YbpvzQ6CY=\", false, function () {\n  return [useAuth];\n});\n_c = SeriesPage;\nfunction SeriesRow() {\n  _s2();\n  const navigate = useNavigate();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [seriesList, setSeriesList] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  useEffect(() => {\n    const fetchSeries = async () => {\n      try {\n        const res = await api.get('/api/series');\n        const folders = res.data;\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const metaRes = await api.get(`/api/series-metadata/${encodeURIComponent(folder)}`);\n          const metaData = metaRes.data;\n          return {\n            folder,\n            poster: `${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\n            title: metaData.Title || folder,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n        const allGenres = seriesWithMetadata.flatMap(series => series.genre.split(',').map(g => g.trim()));\n        setGenres([...new Set(allGenres)]);\n      } catch (err) {\n        console.error('Error fetching series:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n  const filteredSeriesList = seriesList.filter(series => {\n    const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainDiv\",\n    children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"msTitel\",\n        children: \"Series\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sokDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search series...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"msSearch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"centreraCards\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"genre-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedGenre(''),\n              className: !selectedGenre ? 'active' : '',\n              children: \"All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this), genres.map((genre, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedGenre(genre),\n              className: selectedGenre === genre ? 'active' : '',\n              children: genre\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centreraCards\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: filteredSeriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-card\",\n            onClick: () => navigate(`/series/${encodeURIComponent(series.folder)}`),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hover-area\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: series.poster,\n                alt: series.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this)\n          }, series.folder, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s2(SeriesRow, \"txyZ7clAo/u47cTk0w0ndGdL7EY=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c2 = SeriesRow;\nexport default SeriesPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"SeriesPage\");\n$RefreshReg$(_c2, \"SeriesRow\");","map":{"version":3,"names":["useAuth","useState","useEffect","useNavigate","Header","api","jsxDEV","_jsxDEV","Fragment","_Fragment","SeriesPage","_s","isLoggedIn","children","fileName","_jsxFileName","lineNumber","columnNumber","SeriesRow","title","_c","_s2","navigate","seriesList","setSeriesList","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","genres","setGenres","fetchSeries","res","get","folders","data","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","poster","defaults","baseURL","Title","imdbRating","genre","Genre","allGenres","flatMap","series","split","g","trim","Set","err","console","error","filteredSeriesList","filter","matchesSearch","toLowerCase","includes","matchesGenre","className","type","placeholder","value","onChange","e","target","onClick","idx","src","alt","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/SeriesPage.js"],"sourcesContent":["import { useAuth } from '../authContext';\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../Components/Header';\r\nimport api from '../Api';\r\n\r\nfunction SeriesPage() {\r\n    const { isLoggedIn } = useAuth();\r\n    if (!isLoggedIn) return null;\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <SeriesRow title=\"Series\" />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction SeriesRow() {\r\n    const navigate = useNavigate();\r\n    const { isLoggedIn } = useAuth();\r\n\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedGenre, setSelectedGenre] = useState('');\r\n    const [genres, setGenres] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchSeries = async () => {\r\n            try {\r\n                const res = await api.get('/api/series');\r\n                const folders = res.data;\r\n\r\n                const seriesWithMetadata = await Promise.all(\r\n                    folders.map(async (folder) => {\r\n                        const metaRes = await api.get(`/api/series-metadata/${encodeURIComponent(folder)}`);\r\n                        const metaData = metaRes.data;\r\n\r\n                        return {\r\n                            folder,\r\n                            poster: `${api.defaults.baseURL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\r\n                            title: metaData.Title || folder,\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setSeriesList(seriesWithMetadata);\r\n\r\n                const allGenres = seriesWithMetadata.flatMap(series =>\r\n                    series.genre.split(',').map(g => g.trim())\r\n                );\r\n                setGenres([...new Set(allGenres)]);\r\n            } catch (err) {\r\n                console.error('Error fetching series:', err);\r\n            }\r\n        };\r\n\r\n        fetchSeries();\r\n    }, []);\r\n\r\n    const filteredSeriesList = seriesList.filter(series => {\r\n        const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || (series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase()));\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    return (\r\n        <div className=\"mainDiv\">\r\n            {isLoggedIn && (\r\n                <div className=\"movie-row\">\r\n                    <h3 className=\"msTitel\">Series</h3>\r\n\r\n                    <div className='searchBox'>\r\n                        <div className=\"sokDiv\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search series...\"\r\n                                value={searchTerm}\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                className=\"msSearch\"\r\n                            />\r\n                        </div>\r\n                        <div className='centreraCards'>\r\n                            <div className=\"genre-buttons\">\r\n                                <button\r\n                                    onClick={() => setSelectedGenre('')}\r\n                                    className={!selectedGenre ? 'active' : ''}\r\n                                >\r\n                                    All\r\n                                </button>\r\n                                {genres.map((genre, idx) => (\r\n                                    <button\r\n                                        key={idx}\r\n                                        onClick={() => setSelectedGenre(genre)}\r\n                                        className={selectedGenre === genre ? 'active' : ''}\r\n                                    >\r\n                                        {genre}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='centreraCards'>\r\n                        <div className=\"cards\">\r\n                            {filteredSeriesList.map((series) => (\r\n                                <div\r\n                                    key={series.folder}\r\n                                    className=\"movie-card\"\r\n                                    onClick={() => navigate(`/series/${encodeURIComponent(series.folder)}`)}\r\n                                >\r\n                                    <div className=\"hover-area\">\r\n                                        <img\r\n                                            src={series.poster}\r\n                                            alt={series.title}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SeriesPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}