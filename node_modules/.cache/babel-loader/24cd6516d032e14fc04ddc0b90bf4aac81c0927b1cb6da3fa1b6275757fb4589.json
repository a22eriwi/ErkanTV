{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\recentlyAddedRow.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction RecentlyAddedRow({\n  title,\n  setSelectedMovie\n}) {\n  _s();\n  const [items, setItems] = useState([]);\n  const navigate = useNavigate();\n  const metadataCache = useRef({});\n  useEffect(() => {\n    const fetchRecent = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const movieEntries = recentlyAdded.movies.map(title => {\n          // 🔥 Use the entry with matching Title\n          const match = Object.entries(moviesMetadata).find(([folderName, meta]) => {\n            var _meta$Title;\n            return ((_meta$Title = meta.Title) === null || _meta$Title === void 0 ? void 0 : _meta$Title.toLowerCase()) === title.toLowerCase();\n          });\n          if (!match) return null;\n          const [actualFolderName, meta] = match;\n          return {\n            type: 'movie',\n            fileName: meta.filename,\n            title: meta.Title,\n            folder: actualFolderName // ✅ Use actual folder name\n          };\n        });\n        const data = await res.json();\n        const enriched = await Promise.all(data.map(async item => {\n          const cacheKey = item.title;\n          if (metadataCache.current[cacheKey]) {\n            return {\n              ...item,\n              ...metadataCache.current[cacheKey]\n            };\n          }\n          let meta;\n          try {\n            if (item.type === 'movie') {\n              const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(item.title)}`, {\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              meta = await res.json();\n            } else {\n              const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(item.seriesName)}`, {\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              meta = await res.json();\n            }\n          } catch (err) {\n            console.warn(`Failed to load metadata for: ${item.title}`);\n            return item;\n          }\n          const metadata = {\n            title: meta.Title || item.title,\n            imdbRating: meta.imdbRating || 'N/A',\n            genre: meta.Genre || ''\n          };\n          metadataCache.current[cacheKey] = metadata;\n          return {\n            ...item,\n            ...metadata\n          };\n        }));\n        setItems(enriched);\n      } catch (err) {\n        console.error('Failed to load recent items:', err);\n      }\n    };\n    fetchRecent();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centreraCards\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homeComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        id: \"homeCards\",\n        children: items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => {\n            if (item.type === 'movie') {\n              setSelectedMovie({\n                filename: item.fileName,\n                folder: item.folder\n              });\n              navigate(`?play=${encodeURIComponent(item.fileName)}&folder=${encodeURIComponent(item.folder)}`);\n            } else {\n              navigate(`/series?name=${encodeURIComponent(item.seriesName)}`);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hover-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/${item.type === 'movie' ? 'moviePosters' : 'seriesPosters'}/${encodeURIComponent(item.folder || item.seriesName)}.jpg`,\n              alt: item.title,\n              onError: e => e.target.style.display = 'none'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"movieTitle\",\n              children: [item.title, \" \\u2B50\", item.imdbRating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)\n        }, `${item.type}-${item.title}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(RecentlyAddedRow, \"ol5QmqtmexoEY/hnDucvsqGgLqc=\", false, function () {\n  return [useNavigate];\n});\n_c = RecentlyAddedRow;\nexport default RecentlyAddedRow;\nvar _c;\n$RefreshReg$(_c, \"RecentlyAddedRow\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","RecentlyAddedRow","title","setSelectedMovie","_s","items","setItems","navigate","metadataCache","fetchRecent","token","localStorage","getItem","movieEntries","recentlyAdded","movies","map","match","Object","entries","moviesMetadata","find","folderName","meta","_meta$Title","Title","toLowerCase","actualFolderName","type","fileName","filename","folder","data","res","json","enriched","Promise","all","item","cacheKey","current","fetch","encodeURIComponent","headers","Authorization","seriesName","err","console","warn","metadata","imdbRating","genre","Genre","error","className","children","_jsxFileName","lineNumber","columnNumber","id","onClick","src","alt","onError","e","target","style","display","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/recentlyAddedRow.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction RecentlyAddedRow({ title, setSelectedMovie }) {\r\n    const [items, setItems] = useState([]);\r\n    const navigate = useNavigate();\r\n    const metadataCache = useRef({});\r\n\r\n    useEffect(() => {\r\n        const fetchRecent = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                const movieEntries = recentlyAdded.movies.map((title) => {\r\n                    // 🔥 Use the entry with matching Title\r\n                    const match = Object.entries(moviesMetadata).find(([folderName, meta]) =>\r\n                      meta.Title?.toLowerCase() === title.toLowerCase()\r\n                    );\r\n                  \r\n                    if (!match) return null;\r\n                  \r\n                    const [actualFolderName, meta] = match;\r\n                  \r\n                    return {\r\n                      type: 'movie',\r\n                      fileName: meta.filename,\r\n                      title: meta.Title,\r\n                      folder: actualFolderName // ✅ Use actual folder name\r\n                    };\r\n                  });\r\n                  \r\n                const data = await res.json();\r\n\r\n                const enriched = await Promise.all(data.map(async (item) => {\r\n                    const cacheKey = item.title;\r\n\r\n                    if (metadataCache.current[cacheKey]) {\r\n                        return { ...item, ...metadataCache.current[cacheKey] };\r\n                    }\r\n\r\n                    let meta;\r\n                    try {\r\n                        if (item.type === 'movie') {\r\n                            const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(item.title)}`, {\r\n                                headers: { Authorization: `Bearer ${token}` }\r\n                            });\r\n                            meta = await res.json();\r\n                        } else {\r\n                            const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(item.seriesName)}`, {\r\n                                headers: { Authorization: `Bearer ${token}` }\r\n                            });\r\n                            meta = await res.json();\r\n                        }\r\n                    } catch (err) {\r\n                        console.warn(`Failed to load metadata for: ${item.title}`);\r\n                        return item;\r\n                    }\r\n\r\n                    const metadata = {\r\n                        title: meta.Title || item.title,\r\n                        imdbRating: meta.imdbRating || 'N/A',\r\n                        genre: meta.Genre || '',\r\n                    };\r\n\r\n                    metadataCache.current[cacheKey] = metadata;\r\n\r\n                    return { ...item, ...metadata };\r\n                }));\r\n\r\n                setItems(enriched);\r\n            } catch (err) {\r\n                console.error('Failed to load recent items:', err);\r\n            }\r\n        };\r\n\r\n        fetchRecent();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='centreraCards'>\r\n            <div className='homeComponent'>\r\n                <h3>{title}</h3>\r\n                <div className=\"cards\" id='homeCards'>\r\n                    {items.map(item => (\r\n                        <div\r\n                            key={`${item.type}-${item.title}`}\r\n                            className=\"movie-card\"\r\n                            onClick={() => {\r\n                                if (item.type === 'movie') {\r\n                                    setSelectedMovie({\r\n                                        filename: item.fileName,\r\n                                        folder: item.folder\r\n                                    });\r\n                                    navigate(`?play=${encodeURIComponent(item.fileName)}&folder=${encodeURIComponent(item.folder)}`);\r\n                                } else {\r\n                                    navigate(`/series?name=${encodeURIComponent(item.seriesName)}`);\r\n                                }\r\n                            }}\r\n                        >\r\n                            <div className=\"hover-area\">\r\n                                <img\r\n                                    src={`/${item.type === 'movie' ? 'moviePosters' : 'seriesPosters'}/${encodeURIComponent(item.folder || item.seriesName)}.jpg`}\r\n                                    alt={item.title}\r\n                                    onError={(e) => (e.target.style.display = 'none')}\r\n                                />\r\n                                <span className='movieTitle'>{item.title} ⭐{item.imdbRating}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecentlyAddedRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}