{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from '../api'; // ← make sure path matches\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  let logoutTimer;\n  useEffect(() => {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n          refreshAccessToken();\n        } else {\n          setUser(decoded);\n          setIsLoggedIn(true);\n          const timeout = (decoded.exp - currentTime) * 1000;\n          logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000); // refresh 2s early\n        }\n      } catch (err) {\n        console.error('Invalid token:', err);\n        logout();\n      }\n    } else {\n      refreshAccessToken(); // try refresh on initial load\n    }\n    // eslint-disable-next-line\n  }, []);\n  const refreshAccessToken = async () => {\n    try {\n      const res = await api.post('/api/token');\n      const newAccessToken = res.data.accessToken;\n      localStorage.setItem('accessToken', newAccessToken);\n      const decoded = jwtDecode(newAccessToken);\n      setUser(decoded);\n      setIsLoggedIn(true);\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n      logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000);\n    } catch (err) {\n      logout();\n    }\n  };\n  const login = accessToken => {\n    localStorage.setItem('accessToken', accessToken);\n    const decoded = jwtDecode(accessToken);\n    setUser(decoded);\n    setIsLoggedIn(true);\n    clearTimeout(logoutTimer);\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n    logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000);\n  };\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"4bYv/j5yOMazbJb4xFyUTJyGHFM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","jwtDecode","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoggedIn","setIsLoggedIn","logoutTimer","token","localStorage","getItem","decoded","currentTime","Date","now","exp","refreshAccessToken","timeout","setTimeout","err","console","error","logout","res","post","newAccessToken","data","accessToken","setItem","login","clearTimeout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Erkflix/src/authContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport api from '../api'; // ← make sure path matches\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  let logoutTimer;\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (decoded.exp < currentTime) {\r\n          refreshAccessToken();\r\n        } else {\r\n          setUser(decoded);\r\n          setIsLoggedIn(true);\r\n\r\n          const timeout = (decoded.exp - currentTime) * 1000;\r\n          logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000); // refresh 2s early\r\n        }\r\n      } catch (err) {\r\n        console.error('Invalid token:', err);\r\n        logout();\r\n      }\r\n    } else {\r\n      refreshAccessToken(); // try refresh on initial load\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const res = await api.post('/api/token');\r\n      const newAccessToken = res.data.accessToken;\r\n      localStorage.setItem('accessToken', newAccessToken);\r\n\r\n      const decoded = jwtDecode(newAccessToken);\r\n      setUser(decoded);\r\n      setIsLoggedIn(true);\r\n\r\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n      logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000);\r\n    } catch (err) {\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const login = (accessToken) => {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    const decoded = jwtDecode(accessToken);\r\n    setUser(decoded);\r\n    setIsLoggedIn(true);\r\n\r\n    clearTimeout(logoutTimer);\r\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n    logoutTimer = setTimeout(() => refreshAccessToken(), timeout - 2000);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('accessToken');\r\n    setUser(null);\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}