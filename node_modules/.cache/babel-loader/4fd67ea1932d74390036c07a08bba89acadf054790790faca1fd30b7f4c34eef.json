{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const [metadata, setMetadata] = useState(null);\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  const videoUrl = (() => {\n    if (path) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}`;\n    }\n    return null;\n  })();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoOverlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => navigate(-1),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          autoPlay: true,\n          className: \"video-player\",\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoUrl,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading video...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Watch, \"Jogw7TzBu81p79xBofEyBeNG2u4=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useSearchParams","useNavigate","api","jsxDEV","_jsxDEV","Watch","_s","searchParams","path","get","movieFolder","navigate","metadata","setMetadata","fetchMetadata","res","encodeURIComponent","data","err","console","error","videoUrl","defaults","baseURL","filename","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","controls","autoPlay","src","type","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\n\r\nexport default function Watch() {\r\n  const [searchParams] = useSearchParams();\r\n  const path = searchParams.get('path');\r\n  const movieFolder = searchParams.get('movie');\r\n  const navigate = useNavigate();\r\n\r\n  const [metadata, setMetadata] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (movieFolder) {\r\n      const fetchMetadata = async () => {\r\n        try {\r\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n          setMetadata(res.data);\r\n        } catch (err) {\r\n          console.error('❌ Failed to load movie metadata:', err);\r\n        }\r\n      };\r\n      fetchMetadata();\r\n    }\r\n  }, [movieFolder]);\r\n\r\n  const videoUrl = (() => {\r\n    if (path) {\r\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}`;\r\n    }\r\n    if (movieFolder && metadata?.filename) {\r\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}`;\r\n    }\r\n    return null;\r\n  })();\r\n\r\n  return (\r\n    <div className=\"mainDiv\">\r\n      <div className=\"videoOverlay\">\r\n        <div className=\"video-wrapper\">\r\n          <button className=\"close-button\" onClick={() => navigate(-1)}>✖</button>\r\n          {videoUrl ? (\r\n            <video controls autoPlay className=\"video-player\">\r\n              <source src={videoUrl} type=\"video/mp4\" />\r\n              Your browser does not support the video tag.\r\n            </video>\r\n          ) : (\r\n            <p>Loading video...</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}