{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { useAuth } from '../authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const location = useLocation(); // ✅ move this up first\n  const searchParams = new URLSearchParams(location.search);\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const {\n    accessToken\n  } = useAuth();\n  const videoRef = useRef(null);\n  const [videoFileName, setVideoFileName] = useState('');\n  const [contentType, setContentType] = useState('movie');\n  const {\n    user\n  } = useAuth();\n  const [hasSubtitle, setHasSubtitle] = useState(false);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [metadata, setMetadata] = useState(null);\n  const [nextEpisodePath, setNextEpisodePath] = useState(null);\n  const containerRef = useRef(null);\n  const autoSaveInterval = useRef(null);\n  const saveProgress = () => {\n    if (videoRef.current && user && videoFileName) {\n      const time = videoRef.current.currentTime;\n      const duration = videoRef.current.duration;\n      console.log(\"Saving exact progress on next:\", {\n        fileName: videoFileName,\n        time,\n        duration\n      });\n      return api.post('/api/progress', {\n        fileName: videoFileName,\n        type: contentType,\n        time,\n        duration,\n        ...(contentType === 'series' && path ? {\n          fullPath: path\n        } : {})\n      });\n    }\n    return Promise.resolve();\n  };\n\n  //Save progress for series and movies\n  useEffect(() => {\n    const autoSave = () => {\n      if (videoRef.current && user && videoFileName && videoRef.current.duration > 0 && videoRef.current.currentTime > 0) {\n        const time = videoRef.current.currentTime;\n        const duration = videoRef.current.duration;\n        api.post('/api/progress', {\n          fileName: videoFileName,\n          type: contentType,\n          time,\n          duration,\n          ...(contentType === 'series' && path ? {\n            fullPath: path\n          } : {})\n        }).catch(err => {\n          var _err$response;\n          return console.error('❌ Auto-save error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n        });\n      }\n    };\n    autoSaveInterval.current = setInterval(autoSave, 2000);\n    return () => {\n      autoSave(); // final save\n      clearInterval(autoSaveInterval.current);\n    };\n  }, [videoFileName, contentType, user, path]);\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  useEffect(() => {\n    if (path) {\n      const filename = path.split('/').pop();\n      setVideoFileName(filename);\n      setContentType('series');\n    } else if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      setVideoFileName(metadata.filename);\n      setContentType('movie');\n    }\n  }, [path, movieFolder, metadata]);\n\n  //Fetch progress\n  useEffect(() => {\n    const fetchProgress = async () => {\n      if (videoFileName) {\n        try {\n          var _res$data;\n          const res = await api.get(`/api/progress?fileName=${videoFileName}`);\n          const savedTime = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.time;\n          if (videoRef.current && savedTime) {\n            videoRef.current.currentTime = savedTime;\n          }\n        } catch (err) {\n          var _err$response2;\n          console.error('❌ Fetch progress error:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n        }\n      }\n    };\n    fetchProgress();\n  }, [videoFileName]);\n\n  //Keeps track of current video progress (used for rendering next episode button)\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    const handleTimeUpdate = () => {\n      if (video.duration) {\n        const progress = video.currentTime / video.duration;\n        if (progress > 0.96 && !showNextButton) {\n          setShowNextButton(true);\n        } else if (progress <= 0.96 && showNextButton) {\n          setShowNextButton(false);\n        }\n      }\n    };\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, [path, showNextButton]);\n\n  //Find the next episode in order to play it when the current one is done\n  useEffect(() => {\n    const fetchNextEpisode = async () => {\n      if (!path) return;\n      const parts = path.split('/');\n      const currentFilename = parts.at(-1);\n      const seasonFolder = parts.at(-2);\n      const seriesName = parts.slice(0, -2).join('/'); // ✅ FIXED HERE\n\n      try {\n        var _res$data2;\n        const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\n        if (!((_res$data2 = res.data) !== null && _res$data2 !== void 0 && _res$data2.seasons)) {\n          console.warn('Missing \"seasons\" in response');\n          return;\n        }\n        const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\n        if (!seasonData) {\n          console.warn(`Season '${seasonFolder}' not found`);\n          return;\n        }\n        const sortedEpisodes = seasonData.episodes.sort((a, b) => {\n          const num = title => {\n            var _title$match;\n            return parseInt(((_title$match = title.match(/\\d+/)) === null || _title$match === void 0 ? void 0 : _title$match[0]) || '0', 10);\n          };\n          return num(a.title) - num(b.title);\n        });\n        const currentIndex = sortedEpisodes.findIndex(ep => ep.path.endsWith(currentFilename));\n        const nextEpisode = sortedEpisodes[currentIndex + 1];\n        if (nextEpisode) {\n          setNextEpisodePath(nextEpisode.path);\n        }\n      } catch (err) {\n        console.error('Failed to fetch next episode:', err);\n      }\n    };\n    fetchNextEpisode();\n  }, [path]);\n  const videoUrl = (() => {\n    if (path && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\n    }\n    return null;\n  })();\n  const subtitleUrl = (() => {\n    if (path) {\n      const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\n    }\n    return null;\n  })();\n\n  //Check for subtitles\n  useEffect(() => {\n    let isMounted = true;\n    const checkSubtitle = async () => {\n      if (!subtitleUrl) return;\n      try {\n        const res = await fetch(subtitleUrl, {\n          method: 'HEAD'\n        });\n        if (isMounted && res.ok) {\n          setHasSubtitle(true);\n        } else {\n          setHasSubtitle(false);\n        }\n      } catch {\n        if (isMounted) setHasSubtitle(false);\n      }\n    };\n    checkSubtitle();\n    return () => {\n      isMounted = false;\n    };\n  }, [subtitleUrl]);\n  useEffect(() => {\n    setShowNextButton(false);\n  }, [path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      ref: containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => {\n          if (contentType === 'series') {\n            const seriesName = path.split('/').slice(0, -2).join('/');\n            navigate(`/series/${encodeURIComponent(seriesName)}`);\n          } else {\n            navigate(-1);\n          }\n        },\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), showNextButton && nextEpisodePath && nextEpisodePath !== path && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-episode-button\",\n        onClick: async () => {\n          setShowNextButton(false);\n          clearInterval(autoSaveInterval.current);\n          try {\n            await saveProgress(); // ✅ Save exact currentTime\n          } catch (err) {\n            console.error(\"❌ Failed to save progress before skipping episode:\", err);\n          }\n\n          // ✅ Delay navigate to ensure state has updated\n          setTimeout(() => {\n            navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`, {\n              replace: true\n            });\n          }, 100); // small buffer\n        },\n        children: \"\\u25B6 Watch Next Episode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          className: \"video-player\",\n          autoPlay: true,\n          crossOrigin: \"anonymous\",\n          controls: true,\n          controlsList: \"nodownload noplaybackrate\",\n          disablePictureInPicture: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoUrl,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 29\n          }, this), hasSubtitle && /*#__PURE__*/_jsxDEV(\"track\", {\n            label: \"English\",\n            kind: \"subtitles\",\n            srcLang: \"en\",\n            src: subtitleUrl,\n            default: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 33\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading video...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this)\n  }, path, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n}\n_s(Watch, \"NRHDwAmQZgNEOwwICVFOjvgoznk=\", false, function () {\n  return [useLocation, useNavigate, useAuth, useAuth];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Watch","_s","location","searchParams","URLSearchParams","search","path","get","movieFolder","navigate","accessToken","videoRef","videoFileName","setVideoFileName","contentType","setContentType","user","hasSubtitle","setHasSubtitle","showNextButton","setShowNextButton","metadata","setMetadata","nextEpisodePath","setNextEpisodePath","containerRef","autoSaveInterval","saveProgress","current","time","currentTime","duration","console","log","fileName","post","type","fullPath","Promise","resolve","autoSave","catch","err","_err$response","error","response","data","message","setInterval","clearInterval","fetchMetadata","res","encodeURIComponent","filename","split","pop","fetchProgress","_res$data","savedTime","_err$response2","video","handleTimeUpdate","progress","addEventListener","removeEventListener","fetchNextEpisode","parts","currentFilename","at","seasonFolder","seriesName","slice","join","_res$data2","seasons","warn","seasonData","find","s","season","sortedEpisodes","episodes","sort","a","b","num","title","_title$match","parseInt","match","currentIndex","findIndex","ep","endsWith","nextEpisode","videoUrl","defaults","baseURL","subtitleUrl","vttPath","replace","isMounted","checkSubtitle","fetch","method","ok","className","children","ref","onClick","_jsxFileName","lineNumber","columnNumber","setTimeout","autoPlay","crossOrigin","controls","controlsList","disablePictureInPicture","src","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\nimport { useAuth } from '../authContext';\r\n\r\nexport default function Watch() {\r\n    const location = useLocation(); // ✅ move this up first\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const path = searchParams.get('path');\r\n    const movieFolder = searchParams.get('movie');\r\n    const navigate = useNavigate();\r\n    const { accessToken } = useAuth();\r\n    const videoRef = useRef(null);\r\n    const [videoFileName, setVideoFileName] = useState('');\r\n    const [contentType, setContentType] = useState('movie');\r\n    const { user } = useAuth();\r\n    const [hasSubtitle, setHasSubtitle] = useState(false);\r\n    const [showNextButton, setShowNextButton] = useState(false);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const [nextEpisodePath, setNextEpisodePath] = useState(null);\r\n    const containerRef = useRef(null);\r\n    const autoSaveInterval = useRef(null);\r\n\r\n    const saveProgress = () => {\r\n        if (videoRef.current && user && videoFileName) {\r\n            const time = videoRef.current.currentTime;\r\n            const duration = videoRef.current.duration;\r\n\r\n            console.log(\"Saving exact progress on next:\", {\r\n                fileName: videoFileName,\r\n                time,\r\n                duration\r\n            });\r\n\r\n            return api.post('/api/progress', {\r\n                fileName: videoFileName,\r\n                type: contentType,\r\n                time,\r\n                duration,\r\n                ...(contentType === 'series' && path ? { fullPath: path } : {})\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n\r\n    //Save progress for series and movies\r\n    useEffect(() => {\r\n        const autoSave = () => {\r\n            if (\r\n                videoRef.current &&\r\n                user &&\r\n                videoFileName &&\r\n                videoRef.current.duration > 0 &&\r\n                videoRef.current.currentTime > 0\r\n            ) {\r\n                const time = videoRef.current.currentTime;\r\n                const duration = videoRef.current.duration;\r\n\r\n                api.post('/api/progress', {\r\n                    fileName: videoFileName,\r\n                    type: contentType,\r\n                    time,\r\n                    duration,\r\n                    ...(contentType === 'series' && path ? { fullPath: path } : {})\r\n                }).catch(err => console.error('❌ Auto-save error:', err.response?.data || err.message));\r\n            }\r\n        };\r\n\r\n        autoSaveInterval.current = setInterval(autoSave, 2000);\r\n\r\n        return () => {\r\n            autoSave(); // final save\r\n            clearInterval(autoSaveInterval.current);\r\n        };\r\n    }, [videoFileName, contentType, user, path]);\r\n\r\n    useEffect(() => {\r\n        if (movieFolder) {\r\n            const fetchMetadata = async () => {\r\n                try {\r\n                    const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n                    setMetadata(res.data);\r\n                } catch (err) {\r\n                    console.error('❌ Failed to load movie metadata:', err);\r\n                }\r\n            };\r\n            fetchMetadata();\r\n        }\r\n    }, [movieFolder]);\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            const filename = path.split('/').pop();\r\n            setVideoFileName(filename);\r\n            setContentType('series');\r\n        } else if (movieFolder && metadata?.filename) {\r\n            setVideoFileName(metadata.filename);\r\n            setContentType('movie');\r\n        }\r\n    }, [path, movieFolder, metadata]);\r\n\r\n    //Fetch progress\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            if (videoFileName) {\r\n                try {\r\n                    const res = await api.get(`/api/progress?fileName=${videoFileName}`);\r\n                    const savedTime = res.data?.time;\r\n                    if (videoRef.current && savedTime) {\r\n                        videoRef.current.currentTime = savedTime;\r\n                    }\r\n                } catch (err) {\r\n                    console.error('❌ Fetch progress error:', err.response?.data || err.message);\r\n                }\r\n            }\r\n        };\r\n        fetchProgress();\r\n    }, [videoFileName]);\r\n\r\n    //Keeps track of current video progress (used for rendering next episode button)\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        if (!video) return;\r\n\r\n        const handleTimeUpdate = () => {\r\n            if (video.duration) {\r\n                const progress = video.currentTime / video.duration;\r\n                if (progress > 0.96 && !showNextButton) {\r\n                    setShowNextButton(true);\r\n                } else if (progress <= 0.96 && showNextButton) {\r\n                    setShowNextButton(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        video.addEventListener('timeupdate', handleTimeUpdate);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', handleTimeUpdate);\r\n        };\r\n    }, [path, showNextButton]);\r\n\r\n    //Find the next episode in order to play it when the current one is done\r\n    useEffect(() => {\r\n        const fetchNextEpisode = async () => {\r\n            if (!path) return;\r\n\r\n            const parts = path.split('/');\r\n            const currentFilename = parts.at(-1);\r\n            const seasonFolder = parts.at(-2);\r\n            const seriesName = parts.slice(0, -2).join('/'); // ✅ FIXED HERE\r\n\r\n            try {\r\n                const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\r\n                if (!res.data?.seasons) {\r\n                    console.warn('Missing \"seasons\" in response');\r\n                    return;\r\n                }\r\n\r\n                const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\r\n                if (!seasonData) {\r\n                    console.warn(`Season '${seasonFolder}' not found`);\r\n                    return;\r\n                }\r\n\r\n                const sortedEpisodes = seasonData.episodes.sort((a, b) => {\r\n                    const num = (title) => parseInt(title.match(/\\d+/)?.[0] || '0', 10);\r\n                    return num(a.title) - num(b.title);\r\n                });\r\n\r\n                const currentIndex = sortedEpisodes.findIndex(ep =>\r\n                    ep.path.endsWith(currentFilename)\r\n                );\r\n\r\n                const nextEpisode = sortedEpisodes[currentIndex + 1];\r\n\r\n                if (nextEpisode) {\r\n                    setNextEpisodePath(nextEpisode.path);\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to fetch next episode:', err);\r\n            }\r\n        };\r\n\r\n        fetchNextEpisode();\r\n    }, [path]);\r\n\r\n    const videoUrl = (() => {\r\n        if (path && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    const subtitleUrl = (() => {\r\n        if (path) {\r\n            const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename) {\r\n            const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    //Check for subtitles\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        const checkSubtitle = async () => {\r\n            if (!subtitleUrl) return;\r\n\r\n            try {\r\n                const res = await fetch(subtitleUrl, { method: 'HEAD' });\r\n                if (isMounted && res.ok) {\r\n                    setHasSubtitle(true);\r\n                } else {\r\n                    setHasSubtitle(false);\r\n                }\r\n            } catch {\r\n                if (isMounted) setHasSubtitle(false);\r\n            }\r\n        };\r\n\r\n        checkSubtitle();\r\n\r\n        return () => {\r\n            isMounted = false;\r\n        };\r\n    }, [subtitleUrl]);\r\n\r\n    useEffect(() => {\r\n        setShowNextButton(false);\r\n    }, [path]);\r\n\r\n    return (\r\n        <div key={path} className=\"video-overlay\">\r\n            <div className=\"video-wrapper\" ref={containerRef}>\r\n                <button className=\"close-button\" onClick={() => {\r\n                    if (contentType === 'series') {\r\n                        const seriesName = path.split('/').slice(0, -2).join('/');\r\n                        navigate(`/series/${encodeURIComponent(seriesName)}`);\r\n                    } else {\r\n                        navigate(-1);\r\n                    }\r\n                }}>✖</button>\r\n                {showNextButton && nextEpisodePath && nextEpisodePath !== path && (\r\n                    <button\r\n                        className=\"next-episode-button\"\r\n                        onClick={async () => {\r\n                            setShowNextButton(false);\r\n                            clearInterval(autoSaveInterval.current);\r\n\r\n                            try {\r\n                                await saveProgress(); // ✅ Save exact currentTime\r\n                            } catch (err) {\r\n                                console.error(\"❌ Failed to save progress before skipping episode:\", err);\r\n                            }\r\n\r\n                            // ✅ Delay navigate to ensure state has updated\r\n                            setTimeout(() => {\r\n                                navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`, { replace: true });\r\n                            }, 100); // small buffer\r\n                        }}\r\n                    >\r\n                        ▶ Watch Next Episode\r\n                    </button>\r\n                )}\r\n\r\n                <div className=\"video-container\">\r\n                    {videoUrl ? (\r\n                        <video\r\n                            ref={videoRef}\r\n                            className=\"video-player\"\r\n                            autoPlay\r\n                            crossOrigin=\"anonymous\"\r\n                            controls\r\n                            controlsList=\"nodownload noplaybackrate\"\r\n                            disablePictureInPicture\r\n                        >\r\n                            <source src={videoUrl} type=\"video/mp4\" />\r\n                            {hasSubtitle && (\r\n                                <track\r\n                                    label=\"English\"\r\n                                    kind=\"subtitles\"\r\n                                    srcLang=\"en\"\r\n                                    src={subtitleUrl}\r\n                                    default\r\n                                />\r\n                            )}\r\n                            Your browser does not support the video tag.\r\n                        </video>\r\n                    ) : (\r\n                        <p>Loading video...</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMS,YAAY,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACzD,MAAMC,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC;EACrC,MAAMC,WAAW,GAAGL,YAAY,CAACI,GAAG,CAAC,OAAO,CAAC;EAC7C,MAAME,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEe;EAAY,CAAC,GAAGb,OAAO,CAAC,CAAC;EACjC,MAAMc,QAAQ,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,OAAO,CAAC;EACvD,MAAM;IAAEwB;EAAK,CAAC,GAAGnB,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC2B,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC+B,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMiC,YAAY,GAAGhC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMiC,gBAAgB,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAErC,MAAMkC,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIhB,QAAQ,CAACiB,OAAO,IAAIZ,IAAI,IAAIJ,aAAa,EAAE;MAC3C,MAAMiB,IAAI,GAAGlB,QAAQ,CAACiB,OAAO,CAACE,WAAW;MACzC,MAAMC,QAAQ,GAAGpB,QAAQ,CAACiB,OAAO,CAACG,QAAQ;MAE1CC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAC1CC,QAAQ,EAAEtB,aAAa;QACvBiB,IAAI;QACJE;MACJ,CAAC,CAAC;MAEF,OAAOnC,GAAG,CAACuC,IAAI,CAAC,eAAe,EAAE;QAC7BD,QAAQ,EAAEtB,aAAa;QACvBwB,IAAI,EAAEtB,WAAW;QACjBe,IAAI;QACJE,QAAQ;QACR,IAAIjB,WAAW,KAAK,QAAQ,IAAIR,IAAI,GAAG;UAAE+B,QAAQ,EAAE/B;QAAK,CAAC,GAAG,CAAC,CAAC;MAClE,CAAC,CAAC;IACN;IACA,OAAOgC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B,CAAC;;EAED;EACAhD,SAAS,CAAC,MAAM;IACZ,MAAMiD,QAAQ,GAAGA,CAAA,KAAM;MACnB,IACI7B,QAAQ,CAACiB,OAAO,IAChBZ,IAAI,IACJJ,aAAa,IACbD,QAAQ,CAACiB,OAAO,CAACG,QAAQ,GAAG,CAAC,IAC7BpB,QAAQ,CAACiB,OAAO,CAACE,WAAW,GAAG,CAAC,EAClC;QACE,MAAMD,IAAI,GAAGlB,QAAQ,CAACiB,OAAO,CAACE,WAAW;QACzC,MAAMC,QAAQ,GAAGpB,QAAQ,CAACiB,OAAO,CAACG,QAAQ;QAE1CnC,GAAG,CAACuC,IAAI,CAAC,eAAe,EAAE;UACtBD,QAAQ,EAAEtB,aAAa;UACvBwB,IAAI,EAAEtB,WAAW;UACjBe,IAAI;UACJE,QAAQ;UACR,IAAIjB,WAAW,KAAK,QAAQ,IAAIR,IAAI,GAAG;YAAE+B,QAAQ,EAAE/B;UAAK,CAAC,GAAG,CAAC,CAAC;QAClE,CAAC,CAAC,CAACmC,KAAK,CAACC,GAAG;UAAA,IAAAC,aAAA;UAAA,OAAIX,OAAO,CAACY,KAAK,CAAC,oBAAoB,EAAE,EAAAD,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,uBAAZA,aAAA,CAAcG,IAAI,KAAIJ,GAAG,CAACK,OAAO,CAAC;QAAA,EAAC;MAC3F;IACJ,CAAC;IAEDrB,gBAAgB,CAACE,OAAO,GAAGoB,WAAW,CAACR,QAAQ,EAAE,IAAI,CAAC;IAEtD,OAAO,MAAM;MACTA,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZS,aAAa,CAACvB,gBAAgB,CAACE,OAAO,CAAC;IAC3C,CAAC;EACL,CAAC,EAAE,CAAChB,aAAa,EAAEE,WAAW,EAAEE,IAAI,EAAEV,IAAI,CAAC,CAAC;EAE5Cf,SAAS,CAAC,MAAM;IACZ,IAAIiB,WAAW,EAAE;MACb,MAAM0C,aAAa,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACA,MAAMC,GAAG,GAAG,MAAMvD,GAAG,CAACW,GAAG,CAAC,uBAAuB6C,kBAAkB,CAAC5C,WAAW,CAAC,EAAE,CAAC;UACnFc,WAAW,CAAC6B,GAAG,CAACL,IAAI,CAAC;QACzB,CAAC,CAAC,OAAOJ,GAAG,EAAE;UACVV,OAAO,CAACY,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;QAC1D;MACJ,CAAC;MACDQ,aAAa,CAAC,CAAC;IACnB;EACJ,CAAC,EAAE,CAAC1C,WAAW,CAAC,CAAC;EAEjBjB,SAAS,CAAC,MAAM;IACZ,IAAIe,IAAI,EAAE;MACN,MAAM+C,QAAQ,GAAG/C,IAAI,CAACgD,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;MACtC1C,gBAAgB,CAACwC,QAAQ,CAAC;MAC1BtC,cAAc,CAAC,QAAQ,CAAC;IAC5B,CAAC,MAAM,IAAIP,WAAW,IAAIa,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEgC,QAAQ,EAAE;MAC1CxC,gBAAgB,CAACQ,QAAQ,CAACgC,QAAQ,CAAC;MACnCtC,cAAc,CAAC,OAAO,CAAC;IAC3B;EACJ,CAAC,EAAE,CAACT,IAAI,EAAEE,WAAW,EAAEa,QAAQ,CAAC,CAAC;;EAEjC;EACA9B,SAAS,CAAC,MAAM;IACZ,MAAMiE,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI5C,aAAa,EAAE;QACf,IAAI;UAAA,IAAA6C,SAAA;UACA,MAAMN,GAAG,GAAG,MAAMvD,GAAG,CAACW,GAAG,CAAC,0BAA0BK,aAAa,EAAE,CAAC;UACpE,MAAM8C,SAAS,IAAAD,SAAA,GAAGN,GAAG,CAACL,IAAI,cAAAW,SAAA,uBAARA,SAAA,CAAU5B,IAAI;UAChC,IAAIlB,QAAQ,CAACiB,OAAO,IAAI8B,SAAS,EAAE;YAC/B/C,QAAQ,CAACiB,OAAO,CAACE,WAAW,GAAG4B,SAAS;UAC5C;QACJ,CAAC,CAAC,OAAOhB,GAAG,EAAE;UAAA,IAAAiB,cAAA;UACV3B,OAAO,CAACY,KAAK,CAAC,yBAAyB,EAAE,EAAAe,cAAA,GAAAjB,GAAG,CAACG,QAAQ,cAAAc,cAAA,uBAAZA,cAAA,CAAcb,IAAI,KAAIJ,GAAG,CAACK,OAAO,CAAC;QAC/E;MACJ;IACJ,CAAC;IACDS,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAAC5C,aAAa,CAAC,CAAC;;EAEnB;EACArB,SAAS,CAAC,MAAM;IACZ,MAAMqE,KAAK,GAAGjD,QAAQ,CAACiB,OAAO;IAC9B,IAAI,CAACgC,KAAK,EAAE;IAEZ,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,IAAID,KAAK,CAAC7B,QAAQ,EAAE;QAChB,MAAM+B,QAAQ,GAAGF,KAAK,CAAC9B,WAAW,GAAG8B,KAAK,CAAC7B,QAAQ;QACnD,IAAI+B,QAAQ,GAAG,IAAI,IAAI,CAAC3C,cAAc,EAAE;UACpCC,iBAAiB,CAAC,IAAI,CAAC;QAC3B,CAAC,MAAM,IAAI0C,QAAQ,IAAI,IAAI,IAAI3C,cAAc,EAAE;UAC3CC,iBAAiB,CAAC,KAAK,CAAC;QAC5B;MACJ;IACJ,CAAC;IAEDwC,KAAK,CAACG,gBAAgB,CAAC,YAAY,EAAEF,gBAAgB,CAAC;IAEtD,OAAO,MAAM;MACTD,KAAK,CAACI,mBAAmB,CAAC,YAAY,EAAEH,gBAAgB,CAAC;IAC7D,CAAC;EACL,CAAC,EAAE,CAACvD,IAAI,EAAEa,cAAc,CAAC,CAAC;;EAE1B;EACA5B,SAAS,CAAC,MAAM;IACZ,MAAM0E,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI,CAAC3D,IAAI,EAAE;MAEX,MAAM4D,KAAK,GAAG5D,IAAI,CAACgD,KAAK,CAAC,GAAG,CAAC;MAC7B,MAAMa,eAAe,GAAGD,KAAK,CAACE,EAAE,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMC,YAAY,GAAGH,KAAK,CAACE,EAAE,CAAC,CAAC,CAAC,CAAC;MACjC,MAAME,UAAU,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;MAEjD,IAAI;QAAA,IAAAC,UAAA;QACA,MAAMtB,GAAG,GAAG,MAAMvD,GAAG,CAACW,GAAG,CAAC,eAAe6C,kBAAkB,CAACkB,UAAU,CAAC,EAAE,CAAC;QAC1E,IAAI,GAAAG,UAAA,GAACtB,GAAG,CAACL,IAAI,cAAA2B,UAAA,eAARA,UAAA,CAAUC,OAAO,GAAE;UACpB1C,OAAO,CAAC2C,IAAI,CAAC,+BAA+B,CAAC;UAC7C;QACJ;QAEA,MAAMC,UAAU,GAAGzB,GAAG,CAACL,IAAI,CAAC4B,OAAO,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKV,YAAY,CAAC;QACxE,IAAI,CAACO,UAAU,EAAE;UACb5C,OAAO,CAAC2C,IAAI,CAAC,WAAWN,YAAY,aAAa,CAAC;UAClD;QACJ;QAEA,MAAMW,cAAc,GAAGJ,UAAU,CAACK,QAAQ,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACtD,MAAMC,GAAG,GAAIC,KAAK;YAAA,IAAAC,YAAA;YAAA,OAAKC,QAAQ,CAAC,EAAAD,YAAA,GAAAD,KAAK,CAACG,KAAK,CAAC,KAAK,CAAC,cAAAF,YAAA,uBAAlBA,YAAA,CAAqB,CAAC,CAAC,KAAI,GAAG,EAAE,EAAE,CAAC;UAAA;UACnE,OAAOF,GAAG,CAACF,CAAC,CAACG,KAAK,CAAC,GAAGD,GAAG,CAACD,CAAC,CAACE,KAAK,CAAC;QACtC,CAAC,CAAC;QAEF,MAAMI,YAAY,GAAGV,cAAc,CAACW,SAAS,CAACC,EAAE,IAC5CA,EAAE,CAACtF,IAAI,CAACuF,QAAQ,CAAC1B,eAAe,CACpC,CAAC;QAED,MAAM2B,WAAW,GAAGd,cAAc,CAACU,YAAY,GAAG,CAAC,CAAC;QAEpD,IAAII,WAAW,EAAE;UACbtE,kBAAkB,CAACsE,WAAW,CAACxF,IAAI,CAAC;QACxC;MACJ,CAAC,CAAC,OAAOoC,GAAG,EAAE;QACVV,OAAO,CAACY,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;MACvD;IACJ,CAAC;IAEDuB,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC3D,IAAI,CAAC,CAAC;EAEV,MAAMyF,QAAQ,GAAG,CAAC,MAAM;IACpB,IAAIzF,IAAI,IAAII,WAAW,EAAE;MACrB,OAAO,GAAGd,GAAG,CAACoG,QAAQ,CAACC,OAAO,yBAAyB7C,kBAAkB,CAAC9C,IAAI,CAAC,UAAUI,WAAW,EAAE;IAC1G;IAEA,IAAIF,WAAW,IAAIa,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEgC,QAAQ,IAAI3C,WAAW,EAAE;MAClD,OAAO,GAAGd,GAAG,CAACoG,QAAQ,CAACC,OAAO,qBAAqB7C,kBAAkB,CAAC5C,WAAW,CAAC,IAAI4C,kBAAkB,CAAC/B,QAAQ,CAACgC,QAAQ,CAAC,UAAU3C,WAAW,EAAE;IACtJ;IAEA,OAAO,IAAI;EACf,CAAC,EAAE,CAAC;EAEJ,MAAMwF,WAAW,GAAG,CAAC,MAAM;IACvB,IAAI5F,IAAI,EAAE;MACN,MAAM6F,OAAO,GAAG7F,IAAI,CAAC8F,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;MAChD,OAAO,GAAGxG,GAAG,CAACoG,QAAQ,CAACC,OAAO,iBAAiB7C,kBAAkB,CAAC+C,OAAO,CAAC,EAAE;IAChF;IAEA,IAAI3F,WAAW,IAAIa,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEgC,QAAQ,EAAE;MACnC,MAAM8C,OAAO,GAAG,GAAG3F,WAAW,IAAIa,QAAQ,CAACgC,QAAQ,EAAE,CAAC+C,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;MACjF,OAAO,GAAGxG,GAAG,CAACoG,QAAQ,CAACC,OAAO,iBAAiB7C,kBAAkB,CAAC+C,OAAO,CAAC,EAAE;IAChF;IAEA,OAAO,IAAI;EACf,CAAC,EAAE,CAAC;;EAEJ;EACA5G,SAAS,CAAC,MAAM;IACZ,IAAI8G,SAAS,GAAG,IAAI;IAEpB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACJ,WAAW,EAAE;MAElB,IAAI;QACA,MAAM/C,GAAG,GAAG,MAAMoD,KAAK,CAACL,WAAW,EAAE;UAAEM,MAAM,EAAE;QAAO,CAAC,CAAC;QACxD,IAAIH,SAAS,IAAIlD,GAAG,CAACsD,EAAE,EAAE;UACrBvF,cAAc,CAAC,IAAI,CAAC;QACxB,CAAC,MAAM;UACHA,cAAc,CAAC,KAAK,CAAC;QACzB;MACJ,CAAC,CAAC,MAAM;QACJ,IAAImF,SAAS,EAAEnF,cAAc,CAAC,KAAK,CAAC;MACxC;IACJ,CAAC;IAEDoF,aAAa,CAAC,CAAC;IAEf,OAAO,MAAM;MACTD,SAAS,GAAG,KAAK;IACrB,CAAC;EACL,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;EAEjB3G,SAAS,CAAC,MAAM;IACZ6B,iBAAiB,CAAC,KAAK,CAAC;EAC5B,CAAC,EAAE,CAACd,IAAI,CAAC,CAAC;EAEV,oBACIP,OAAA;IAAgB2G,SAAS,EAAC,eAAe;IAAAC,QAAA,eACrC5G,OAAA;MAAK2G,SAAS,EAAC,eAAe;MAACE,GAAG,EAAEnF,YAAa;MAAAkF,QAAA,gBAC7C5G,OAAA;QAAQ2G,SAAS,EAAC,cAAc;QAACG,OAAO,EAAEA,CAAA,KAAM;UAC5C,IAAI/F,WAAW,KAAK,QAAQ,EAAE;YAC1B,MAAMwD,UAAU,GAAGhE,IAAI,CAACgD,KAAK,CAAC,GAAG,CAAC,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;YACzD/D,QAAQ,CAAC,WAAW2C,kBAAkB,CAACkB,UAAU,CAAC,EAAE,CAAC;UACzD,CAAC,MAAM;YACH7D,QAAQ,CAAC,CAAC,CAAC,CAAC;UAChB;QACJ,CAAE;QAAAkG,QAAA,EAAC;MAAC;QAAAzE,QAAA,EAAA4E,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACZ7F,cAAc,IAAII,eAAe,IAAIA,eAAe,KAAKjB,IAAI,iBAC1DP,OAAA;QACI2G,SAAS,EAAC,qBAAqB;QAC/BG,OAAO,EAAE,MAAAA,CAAA,KAAY;UACjBzF,iBAAiB,CAAC,KAAK,CAAC;UACxB6B,aAAa,CAACvB,gBAAgB,CAACE,OAAO,CAAC;UAEvC,IAAI;YACA,MAAMD,YAAY,CAAC,CAAC,CAAC,CAAC;UAC1B,CAAC,CAAC,OAAOe,GAAG,EAAE;YACVV,OAAO,CAACY,KAAK,CAAC,oDAAoD,EAAEF,GAAG,CAAC;UAC5E;;UAEA;UACAuE,UAAU,CAAC,MAAM;YACbxG,QAAQ,CAAC,eAAe2C,kBAAkB,CAAC7B,eAAe,CAAC,EAAE,EAAE;cAAE6E,OAAO,EAAE;YAAK,CAAC,CAAC;UACrF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACb,CAAE;QAAAO,QAAA,EACL;MAED;QAAAzE,QAAA,EAAA4E,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX,eAEDjH,OAAA;QAAK2G,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC3BZ,QAAQ,gBACLhG,OAAA;UACI6G,GAAG,EAAEjG,QAAS;UACd+F,SAAS,EAAC,cAAc;UACxBQ,QAAQ;UACRC,WAAW,EAAC,WAAW;UACvBC,QAAQ;UACRC,YAAY,EAAC,2BAA2B;UACxCC,uBAAuB;UAAAX,QAAA,gBAEvB5G,OAAA;YAAQwH,GAAG,EAAExB,QAAS;YAAC3D,IAAI,EAAC;UAAW;YAAAF,QAAA,EAAA4E,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EACzC/F,WAAW,iBACRlB,OAAA;YACIyH,KAAK,EAAC,SAAS;YACfC,IAAI,EAAC,WAAW;YAChBC,OAAO,EAAC,IAAI;YACZH,GAAG,EAAErB,WAAY;YACjByB,OAAO;UAAA;YAAAzF,QAAA,EAAA4E,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CACJ,EAAC,8CAEN;QAAA;UAAA9E,QAAA,EAAA4E,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,gBAERjH,OAAA;UAAA4G,QAAA,EAAG;QAAgB;UAAAzE,QAAA,EAAA4E,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MACzB;QAAA9E,QAAA,EAAA4E,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAA9E,QAAA,EAAA4E,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,GA5DA1G,IAAI;IAAA4B,QAAA,EAAA4E,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA6DT,CAAC;AAEd;AAAC/G,EAAA,CA9SuBD,KAAK;EAAA,QACRN,WAAW,EAIXC,WAAW,EACJE,OAAO,EAIdA,OAAO;AAAA;AAAA+H,EAAA,GAVJ5H,KAAK;AAAA,IAAA4H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}