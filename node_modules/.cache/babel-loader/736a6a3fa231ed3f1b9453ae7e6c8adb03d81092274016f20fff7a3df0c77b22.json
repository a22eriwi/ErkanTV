{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { useAuth } from '../authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const {\n    accessToken\n  } = useAuth();\n  const videoRef = useRef(null);\n  const [videoFileName, setVideoFileName] = useState('');\n  const [contentType, setContentType] = useState('movie');\n  const {\n    user\n  } = useAuth();\n  const [hasSubtitle, setHasSubtitle] = useState(false);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [metadata, setMetadata] = useState(null);\n  const [nextEpisodePath, setNextEpisodePath] = useState(null);\n  const containerRef = useRef(null);\n  const handleFullscreen = () => {\n    var _containerRef$current;\n    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.requestFullscreen) {\n      containerRef.current.requestFullscreen();\n    }\n  };\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  useEffect(() => {\n    if (path) {\n      const filename = path.split('/').pop();\n      setVideoFileName(filename);\n      setContentType('series');\n    } else if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      setVideoFileName(metadata.filename);\n      setContentType('movie');\n    }\n  }, [path, movieFolder, metadata]);\n\n  //Save progress for series and movies\n  useEffect(() => {\n    const saveProgress = () => {\n      if (videoRef.current && user && videoFileName) {\n        const time = videoRef.current.currentTime;\n        const duration = videoRef.current.duration;\n        api.post('/api/progress', {\n          fileName: videoFileName,\n          type: contentType,\n          time,\n          duration,\n          // ✅ include duration\n          ...(contentType === 'series' && path ? {\n            fullPath: path\n          } : {})\n        }).catch(err => {\n          var _err$response;\n          return console.error('❌ Save progress error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n        });\n      }\n    };\n    const interval = setInterval(saveProgress, 2000); // auto-save every 2 seconds\n\n    return () => {\n      saveProgress(); // final save on unmount\n      clearInterval(interval);\n    };\n  }, [videoFileName, contentType, user, path]);\n\n  //Fetch progress\n  useEffect(() => {\n    const fetchProgress = async () => {\n      if (videoFileName) {\n        try {\n          var _res$data;\n          const res = await api.get(`/api/progress?fileName=${videoFileName}`);\n          const savedTime = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.time;\n          if (videoRef.current && savedTime) {\n            videoRef.current.currentTime = savedTime;\n          }\n        } catch (err) {\n          var _err$response2;\n          console.error('❌ Fetch progress error:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n        }\n      }\n    };\n    fetchProgress();\n  }, [videoFileName]);\n\n  //Keeps track of current video progress (used for rendering next episode button)\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    const handleTimeUpdate = () => {\n      if (video.duration && video.currentTime / video.duration > 0.96) {\n        setShowNextButton(true);\n      }\n    };\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n    };\n  }, []);\n\n  //Find the next episode in order to play it when the current one is done\n  useEffect(() => {\n    const fetchNextEpisode = async () => {\n      if (!path) return;\n      const parts = path.split('/');\n      const [seriesName, seasonFolder, currentFilename] = [parts[0], parts[1], parts[2]];\n      try {\n        const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\n        const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\n        if (!seasonData) return;\n        const sortedEpisodes = seasonData.episodes.sort((a, b) => {\n          const num = title => {\n            var _title$match;\n            return parseInt(((_title$match = title.match(/\\d+/)) === null || _title$match === void 0 ? void 0 : _title$match[0]) || '0', 10);\n          };\n          return num(a.title) - num(b.title);\n        });\n        const currentIndex = sortedEpisodes.findIndex(ep => ep.title === currentFilename);\n        const nextEpisode = sortedEpisodes[currentIndex + 1];\n        if (nextEpisode) {\n          setNextEpisodePath(nextEpisode.path);\n        }\n      } catch (err) {\n        console.error('❌ Failed to fetch next episode:', err);\n      }\n    };\n    fetchNextEpisode();\n  }, [path]);\n  const videoUrl = (() => {\n    if (path && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\n    }\n    return null;\n  })();\n  const subtitleUrl = (() => {\n    if (path) {\n      const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\n    }\n    return null;\n  })();\n\n  //Check for subtitles\n  useEffect(() => {\n    const checkSubtitle = async () => {\n      if (!subtitleUrl) return;\n      try {\n        await fetch(subtitleUrl, {\n          method: 'HEAD'\n        });\n        setHasSubtitle(true);\n      } catch {\n        setHasSubtitle(false);\n      }\n    };\n    checkSubtitle();\n  }, [subtitleUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      ref: containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => navigate(-1),\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), showNextButton && nextEpisodePath && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-episode-button\",\n        onClick: () => navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`),\n        children: \"\\u25B6 Watch Next Episode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          className: \"video-player\",\n          autoPlay: true,\n          crossOrigin: \"anonymous\",\n          controls: true,\n          controlsList: \"nodownload nofullscreen noplaybackrate\",\n          disablePictureInPicture: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoUrl,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), hasSubtitle && /*#__PURE__*/_jsxDEV(\"track\", {\n            label: \"English\",\n            kind: \"subtitles\",\n            srcLang: \"en\",\n            src: subtitleUrl,\n            default: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 33\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading video...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n_s(Watch, \"hbZr2S/yB7d5j9t14CfuUvjdiQQ=\", false, function () {\n  return [useSearchParams, useNavigate, useAuth, useAuth];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSearchParams","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Watch","_s","searchParams","path","get","movieFolder","navigate","accessToken","videoRef","videoFileName","setVideoFileName","contentType","setContentType","user","hasSubtitle","setHasSubtitle","showNextButton","setShowNextButton","metadata","setMetadata","nextEpisodePath","setNextEpisodePath","containerRef","handleFullscreen","_containerRef$current","current","requestFullscreen","fetchMetadata","res","encodeURIComponent","data","err","console","error","filename","split","pop","saveProgress","time","currentTime","duration","post","fileName","type","fullPath","catch","_err$response","response","message","interval","setInterval","clearInterval","fetchProgress","_res$data","savedTime","_err$response2","video","handleTimeUpdate","addEventListener","removeEventListener","fetchNextEpisode","parts","seriesName","seasonFolder","currentFilename","seasonData","seasons","find","s","season","sortedEpisodes","episodes","sort","a","b","num","title","_title$match","parseInt","match","currentIndex","findIndex","ep","nextEpisode","videoUrl","defaults","baseURL","subtitleUrl","vttPath","replace","checkSubtitle","fetch","method","className","children","ref","onClick","_jsxFileName","lineNumber","columnNumber","autoPlay","crossOrigin","controls","controlsList","disablePictureInPicture","src","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\nimport { useAuth } from '../authContext';\r\n\r\nexport default function Watch() {\r\n    const [searchParams] = useSearchParams();\r\n    const path = searchParams.get('path');\r\n    const movieFolder = searchParams.get('movie');\r\n    const navigate = useNavigate();\r\n    const { accessToken } = useAuth();\r\n    const videoRef = useRef(null);\r\n    const [videoFileName, setVideoFileName] = useState('');\r\n    const [contentType, setContentType] = useState('movie');\r\n    const { user } = useAuth();\r\n    const [hasSubtitle, setHasSubtitle] = useState(false);\r\n    const [showNextButton, setShowNextButton] = useState(false);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const [nextEpisodePath, setNextEpisodePath] = useState(null);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleFullscreen = () => {\r\n        if (containerRef.current?.requestFullscreen) {\r\n            containerRef.current.requestFullscreen();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (movieFolder) {\r\n            const fetchMetadata = async () => {\r\n                try {\r\n                    const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n                    setMetadata(res.data);\r\n                } catch (err) {\r\n                    console.error('❌ Failed to load movie metadata:', err);\r\n                }\r\n            };\r\n            fetchMetadata();\r\n        }\r\n    }, [movieFolder]);\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            const filename = path.split('/').pop();\r\n            setVideoFileName(filename);\r\n            setContentType('series');\r\n        } else if (movieFolder && metadata?.filename) {\r\n            setVideoFileName(metadata.filename);\r\n            setContentType('movie');\r\n        }\r\n    }, [path, movieFolder, metadata]);\r\n\r\n    //Save progress for series and movies\r\n    useEffect(() => {\r\n        const saveProgress = () => {\r\n            if (videoRef.current && user && videoFileName) {\r\n                const time = videoRef.current.currentTime;\r\n                const duration = videoRef.current.duration;\r\n\r\n                api.post('/api/progress', {\r\n                    fileName: videoFileName,\r\n                    type: contentType,\r\n                    time,\r\n                    duration, // ✅ include duration\r\n                    ...(contentType === 'series' && path ? { fullPath: path } : {})\r\n                }).catch(err => console.error('❌ Save progress error:', err.response?.data || err.message));\r\n            }\r\n        };\r\n\r\n        const interval = setInterval(saveProgress, 2000); // auto-save every 2 seconds\r\n\r\n        return () => {\r\n            saveProgress(); // final save on unmount\r\n            clearInterval(interval);\r\n        };\r\n    }, [videoFileName, contentType, user, path]);\r\n\r\n    //Fetch progress\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            if (videoFileName) {\r\n                try {\r\n                    const res = await api.get(`/api/progress?fileName=${videoFileName}`);\r\n                    const savedTime = res.data?.time;\r\n                    if (videoRef.current && savedTime) {\r\n                        videoRef.current.currentTime = savedTime;\r\n                    }\r\n                } catch (err) {\r\n                    console.error('❌ Fetch progress error:', err.response?.data || err.message);\r\n                }\r\n            }\r\n        };\r\n        fetchProgress();\r\n    }, [videoFileName]);\r\n\r\n    //Keeps track of current video progress (used for rendering next episode button)\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        if (!video) return;\r\n\r\n        const handleTimeUpdate = () => {\r\n            if (video.duration && video.currentTime / video.duration > 0.96) {\r\n                setShowNextButton(true);\r\n            }\r\n        };\r\n\r\n        video.addEventListener('timeupdate', handleTimeUpdate);\r\n\r\n        return () => {\r\n            video.removeEventListener('timeupdate', handleTimeUpdate);\r\n        };\r\n    }, []);\r\n\r\n    //Find the next episode in order to play it when the current one is done\r\n    useEffect(() => {\r\n        const fetchNextEpisode = async () => {\r\n            if (!path) return;\r\n\r\n            const parts = path.split('/');\r\n            const [seriesName, seasonFolder, currentFilename] = [parts[0], parts[1], parts[2]];\r\n\r\n            try {\r\n                const res = await api.get(`/api/series/${encodeURIComponent(seriesName)}`);\r\n                const seasonData = res.data.seasons.find(s => s.season === seasonFolder);\r\n                if (!seasonData) return;\r\n\r\n                const sortedEpisodes = seasonData.episodes.sort((a, b) => {\r\n                    const num = (title) => parseInt(title.match(/\\d+/)?.[0] || '0', 10);\r\n                    return num(a.title) - num(b.title);\r\n                });\r\n\r\n                const currentIndex = sortedEpisodes.findIndex(ep => ep.title === currentFilename);\r\n                const nextEpisode = sortedEpisodes[currentIndex + 1];\r\n\r\n                if (nextEpisode) {\r\n                    setNextEpisodePath(nextEpisode.path);\r\n                }\r\n            } catch (err) {\r\n                console.error('❌ Failed to fetch next episode:', err);\r\n            }\r\n        };\r\n\r\n        fetchNextEpisode();\r\n    }, [path]);\r\n\r\n    const videoUrl = (() => {\r\n        if (path && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    const subtitleUrl = (() => {\r\n        if (path) {\r\n            const vttPath = path.replace(/\\.[^.]+$/, '.vtt'); \r\n            return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename) {\r\n            const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    //Check for subtitles\r\n    useEffect(() => {\r\n        const checkSubtitle = async () => {\r\n            if (!subtitleUrl) return;\r\n\r\n            try {\r\n                await fetch(subtitleUrl, { method: 'HEAD' });\r\n                setHasSubtitle(true);\r\n            } catch {\r\n                setHasSubtitle(false);\r\n            }\r\n        };\r\n\r\n        checkSubtitle();\r\n    }, [subtitleUrl]);\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\" ref={containerRef}>\r\n                <button className=\"close-button\" onClick={() => navigate(-1)}>✖</button>\r\n                {showNextButton && nextEpisodePath && (\r\n                    <button\r\n                        className=\"next-episode-button\"\r\n                        onClick={() => navigate(`/watch?path=${encodeURIComponent(nextEpisodePath)}`)}\r\n                    >\r\n                        ▶ Watch Next Episode\r\n                    </button>\r\n                )}\r\n\r\n                <div className=\"video-container\">\r\n                    {videoUrl ? (\r\n                        <video\r\n                            ref={videoRef}\r\n                            className=\"video-player\"\r\n                            autoPlay\r\n                            crossOrigin=\"anonymous\"\r\n                            controls\r\n                            controlsList=\"nodownload nofullscreen noplaybackrate\"\r\n                            disablePictureInPicture\r\n                        >\r\n                            <source src={videoUrl} type=\"video/mp4\" />\r\n                            {hasSubtitle && (\r\n                                <track\r\n                                    label=\"English\"\r\n                                    kind=\"subtitles\"\r\n                                    srcLang=\"en\"\r\n                                    src={subtitleUrl}\r\n                                    default\r\n                                />\r\n                            )}\r\n                            Your browser does not support the video tag.\r\n                        </video>\r\n                    ) : (\r\n                        <p>Loading video...</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}