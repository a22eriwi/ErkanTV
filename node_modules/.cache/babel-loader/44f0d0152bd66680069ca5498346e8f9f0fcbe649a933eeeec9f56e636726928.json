{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\SeriesRow.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction SeriesRow({\n  title,\n  topSeries = false\n}) {\n  _s();\n  const [seriesList, setSeriesList] = useState([]);\n  const navigate = useNavigate(); // üëà Correct\n\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        let folders = [];\n        if (topSeries) {\n          const res = await fetch(`${API_URL}/api/top-series`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          folders = await res.json();\n        } else {\n          const res = await fetch(`${API_URL}/api/series`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          folders = await res.json();\n        }\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const mappedTitle = seriesTitles[folder] || folder;\n          const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`);\n          const metaData = await metaRes.json();\n          return {\n            folder,\n            title: metaData.Title || mappedTitle,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            imdbRating: metaData.imdbRating || 'N/A'\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n      } catch (err) {\n        console.error('Error fetching series:', err);\n      }\n    };\n    fetchSeries();\n  }, [topSeries]);\n  const handleSeriesClick = folderName => {\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centreraCards\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: seriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => handleSeriesClick(series.folder),\n          children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: series.poster,\n            alt: series.title,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movieTitle\",\n            children: [series.title, \" \\u2B50\", series.imdbRating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, series.folder, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(SeriesRow, \"tmWH8qMBt08zh9vY7E3LO0JqIy8=\", false, function () {\n  return [useNavigate];\n});\n_c = SeriesRow;\nexport default SeriesRow;\nvar _c;\n$RefreshReg$(_c, \"SeriesRow\");","map":{"version":3,"names":["useNavigate","React","useEffect","useState","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","SeriesRow","title","topSeries","_s","seriesList","setSeriesList","navigate","fetchSeries","token","localStorage","getItem","folders","res","fetch","headers","Authorization","json","seriesWithMetadata","Promise","all","map","folder","mappedTitle","seriesTitles","metaRes","encodeURIComponent","metaData","Title","poster","Poster","imdbRating","err","console","error","handleSeriesClick","folderName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","series","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/SeriesRow.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction SeriesRow({ title, topSeries = false }) {\r\n  const [seriesList, setSeriesList] = useState([]);\r\n  const navigate = useNavigate(); // üëà Correct\r\n\r\n  useEffect(() => {\r\n    const fetchSeries = async () => {\r\n      const token = localStorage.getItem('token');\r\n      try {\r\n        let folders = [];\r\n        if (topSeries) {\r\n          const res = await fetch(`${API_URL}/api/top-series`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          folders = await res.json();\r\n        } else {\r\n          const res = await fetch(`${API_URL}/api/series`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          folders = await res.json();\r\n        }\r\n\r\n        const seriesWithMetadata = await Promise.all(\r\n          folders.map(async (folder) => {\r\n            const mappedTitle = seriesTitles[folder] || folder;\r\n        \r\n            const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`);\r\n            const metaData = await metaRes.json();\r\n        \r\n            return {\r\n              folder,\r\n              title: metaData.Title || mappedTitle,\r\n              poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n              imdbRating: metaData.imdbRating || 'N/A',\r\n            };\r\n          })\r\n        );\r\n\r\n        setSeriesList(seriesWithMetadata);\r\n      } catch (err) {\r\n        console.error('Error fetching series:', err);\r\n      }\r\n    };\r\n\r\n    fetchSeries();\r\n  }, [topSeries]);\r\n\r\n  const handleSeriesClick = (folderName) => {\r\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie-row\">\r\n      <h3>{title}</h3>\r\n      <div className='centreraCards'>\r\n        <div className=\"cards\">\r\n          {seriesList.map(series => (\r\n            <div\r\n              key={series.folder}\r\n              className=\"movie-card\"\r\n              onClick={() => handleSeriesClick(series.folder)}\r\n            >\r\n              {series.poster && (\r\n                <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n              )}\r\n              <span className=\"movieTitle\">{series.title} ‚≠ê{series.imdbRating}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeriesRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}