{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Watch.js\",\n  _s = $RefreshSig$();\n// src/components/Watch.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { useAuth } from '../authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Watch() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const path = searchParams.get('path');\n  const movieFolder = searchParams.get('movie');\n  const navigate = useNavigate();\n  const {\n    accessToken\n  } = useAuth();\n  const videoRef = useRef(null);\n  const [videoFileName, setVideoFileName] = useState('');\n  const [contentType, setContentType] = useState('movie');\n  const {\n    user\n  } = useAuth();\n  const [hasSubtitle, setHasSubtitle] = useState(false);\n  const [metadata, setMetadata] = useState(null);\n  const containerRef = useRef(null);\n  const handleFullscreen = () => {\n    var _containerRef$current;\n    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.requestFullscreen) {\n      containerRef.current.requestFullscreen();\n    }\n  };\n  useEffect(() => {\n    if (movieFolder) {\n      const fetchMetadata = async () => {\n        try {\n          const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\n          setMetadata(res.data);\n        } catch (err) {\n          console.error('❌ Failed to load movie metadata:', err);\n        }\n      };\n      fetchMetadata();\n    }\n  }, [movieFolder]);\n  useEffect(() => {\n    if (path) {\n      const filename = path.split('/').pop();\n      setVideoFileName(filename);\n      setContentType('series');\n    } else if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      setVideoFileName(metadata.filename);\n      setContentType('movie');\n    }\n  }, [path, movieFolder, metadata]);\n  useEffect(() => {\n    const saveProgress = () => {\n      if (videoRef.current && user && videoFileName) {\n        const time = videoRef.current.currentTime;\n        const duration = videoRef.current.duration;\n        api.post('/api/progress', {\n          fileName: videoFileName,\n          type: contentType,\n          time,\n          duration,\n          ...(contentType === 'series' && path ? {\n            fullPath: path\n          } : {})\n        }).catch(err => {\n          var _err$response;\n          return console.error('❌ Save progress error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n        });\n      }\n    };\n    const interval = setInterval(saveProgress, 2000);\n    return () => {\n      saveProgress();\n      clearInterval(interval);\n    };\n  }, [videoFileName, contentType, user, path]);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      if (videoFileName) {\n        try {\n          var _res$data;\n          const res = await api.get(`/api/progress?fileName=${videoFileName}`);\n          const savedTime = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.time;\n          if (videoRef.current && savedTime) {\n            videoRef.current.currentTime = savedTime;\n          }\n        } catch (err) {\n          var _err$response2;\n          console.error('❌ Fetch progress error:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n        }\n      }\n    };\n    fetchProgress();\n  }, [videoFileName]);\n  const videoUrl = (() => {\n    if (path && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename && accessToken) {\n      return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\n    }\n    return null;\n  })();\n  const subtitleUrl = (() => {\n    if (path) {\n      const vttPath = path.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\n    }\n    if (movieFolder && metadata !== null && metadata !== void 0 && metadata.filename) {\n      const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\n      return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\n    }\n    return null;\n  })();\n  useEffect(() => {\n    const checkSubtitle = async () => {\n      if (!subtitleUrl) return;\n      try {\n        await fetch(subtitleUrl, {\n          method: 'HEAD'\n        });\n        setHasSubtitle(true);\n      } catch {\n        setHasSubtitle(false);\n      }\n    };\n    checkSubtitle();\n  }, [subtitleUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      ref: containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: () => navigate(-1),\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoUrl ? /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          className: \"video-player\",\n          autoPlay: true,\n          crossOrigin: \"anonymous\",\n          controls: true,\n          controlsList: \"nodownload noplaybackrate\",\n          disablePictureInPicture: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoUrl,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), hasSubtitle && /*#__PURE__*/_jsxDEV(\"track\", {\n            label: \"English\",\n            kind: \"subtitles\",\n            srcLang: \"en\",\n            src: subtitleUrl,\n            default: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading video...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(Watch, \"FOj2orGmy0TBdB/5HzAa/VW4+1s=\", false, function () {\n  return [useSearchParams, useNavigate, useAuth, useAuth];\n});\n_c = Watch;\nvar _c;\n$RefreshReg$(_c, \"Watch\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useSearchParams","useNavigate","api","useAuth","jsxDEV","_jsxDEV","Watch","_s","searchParams","path","get","movieFolder","navigate","accessToken","videoRef","videoFileName","setVideoFileName","contentType","setContentType","user","hasSubtitle","setHasSubtitle","metadata","setMetadata","containerRef","handleFullscreen","_containerRef$current","current","requestFullscreen","fetchMetadata","res","encodeURIComponent","data","err","console","error","filename","split","pop","saveProgress","time","currentTime","duration","post","fileName","type","fullPath","catch","_err$response","response","message","interval","setInterval","clearInterval","fetchProgress","_res$data","savedTime","_err$response2","videoUrl","defaults","baseURL","subtitleUrl","vttPath","replace","checkSubtitle","fetch","method","className","children","ref","onClick","_jsxFileName","lineNumber","columnNumber","autoPlay","crossOrigin","controls","controlsList","disablePictureInPicture","src","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Watch.js"],"sourcesContent":["// src/components/Watch.js\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\nimport { useAuth } from '../authContext';\r\n\r\nexport default function Watch() {\r\n    const [searchParams] = useSearchParams();\r\n    const path = searchParams.get('path');\r\n    const movieFolder = searchParams.get('movie');\r\n    const navigate = useNavigate();\r\n    const { accessToken } = useAuth();\r\n    const videoRef = useRef(null);\r\n    const [videoFileName, setVideoFileName] = useState('');\r\n    const [contentType, setContentType] = useState('movie');\r\n    const { user } = useAuth();\r\n    const [hasSubtitle, setHasSubtitle] = useState(false);\r\n    const [metadata, setMetadata] = useState(null);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleFullscreen = () => {\r\n        if (containerRef.current?.requestFullscreen) {\r\n            containerRef.current.requestFullscreen();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (movieFolder) {\r\n            const fetchMetadata = async () => {\r\n                try {\r\n                    const res = await api.get(`/api/movie-metadata/${encodeURIComponent(movieFolder)}`);\r\n                    setMetadata(res.data);\r\n                } catch (err) {\r\n                    console.error('❌ Failed to load movie metadata:', err);\r\n                }\r\n            };\r\n            fetchMetadata();\r\n        }\r\n    }, [movieFolder]);\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            const filename = path.split('/').pop();\r\n            setVideoFileName(filename);\r\n            setContentType('series');\r\n        } else if (movieFolder && metadata?.filename) {\r\n            setVideoFileName(metadata.filename);\r\n            setContentType('movie');\r\n        }\r\n    }, [path, movieFolder, metadata]);\r\n\r\n    useEffect(() => {\r\n        const saveProgress = () => {\r\n            if (videoRef.current && user && videoFileName) {\r\n                const time = videoRef.current.currentTime;\r\n                const duration = videoRef.current.duration;\r\n\r\n                api.post('/api/progress', {\r\n                    fileName: videoFileName,\r\n                    type: contentType,\r\n                    time,\r\n                    duration,\r\n                    ...(contentType === 'series' && path ? { fullPath: path } : {})\r\n                }).catch(err => console.error('❌ Save progress error:', err.response?.data || err.message));\r\n            }\r\n        };\r\n\r\n        const interval = setInterval(saveProgress, 2000);\r\n\r\n        return () => {\r\n            saveProgress();\r\n            clearInterval(interval);\r\n        };\r\n    }, [videoFileName, contentType, user, path]);\r\n\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            if (videoFileName) {\r\n                try {\r\n                    const res = await api.get(`/api/progress?fileName=${videoFileName}`);\r\n                    const savedTime = res.data?.time;\r\n                    if (videoRef.current && savedTime) {\r\n                        videoRef.current.currentTime = savedTime;\r\n                    }\r\n                } catch (err) {\r\n                    console.error('❌ Fetch progress error:', err.response?.data || err.message);\r\n                }\r\n            }\r\n        };\r\n        fetchProgress();\r\n    }, [videoFileName]);\r\n\r\n    const videoUrl = (() => {\r\n        if (path && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/file?path=${encodeURIComponent(path)}&token=${accessToken}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename && accessToken) {\r\n            return `${api.defaults.baseURL}/api/stream/movie/${encodeURIComponent(movieFolder)}/${encodeURIComponent(metadata.filename)}?token=${accessToken}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    const subtitleUrl = (() => {\r\n        if (path) {\r\n            const vttPath = path.replace(/\\.[^.]+$/, '.vtt'); \r\n            return `${api.defaults.baseURL}/media/Series/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        if (movieFolder && metadata?.filename) {\r\n            const vttPath = `${movieFolder}/${metadata.filename}`.replace(/\\.[^.]+$/, '.vtt');\r\n            return `${api.defaults.baseURL}/media/Movies/${encodeURIComponent(vttPath)}`;\r\n        }\r\n\r\n        return null;\r\n    })();\r\n\r\n    useEffect(() => {\r\n        const checkSubtitle = async () => {\r\n            if (!subtitleUrl) return;\r\n\r\n            try {\r\n                await fetch(subtitleUrl, { method: 'HEAD' });\r\n                setHasSubtitle(true);\r\n            } catch {\r\n                setHasSubtitle(false);\r\n            }\r\n        };\r\n\r\n        checkSubtitle();\r\n    }, [subtitleUrl]);\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\" ref={containerRef}>\r\n                <button className=\"close-button\" onClick={() => navigate(-1)}>✖</button>\r\n\r\n                <div className=\"video-container\">\r\n                    {videoUrl ? (\r\n                        <video\r\n                            ref={videoRef}\r\n                            className=\"video-player\"\r\n                            autoPlay\r\n                            crossOrigin=\"anonymous\"\r\n                            controls\r\n                            controlsList=\"nodownload noplaybackrate\"\r\n                            disablePictureInPicture\r\n                        >\r\n                            <source src={videoUrl} type=\"video/mp4\" />\r\n                            {hasSubtitle && (\r\n                                <track\r\n                                    label=\"English\"\r\n                                    kind=\"subtitles\"\r\n                                    srcLang=\"en\"\r\n                                    src={subtitleUrl}\r\n                                    default\r\n                                />\r\n                            )}\r\n                            Your browser does not support the video tag.\r\n                        </video>\r\n                    ) : (\r\n                        <p>Loading video...</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}