{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Frontend\\\\Series.js\",\n  _s = $RefreshSig$();\nimport { useAuth } from '../authContext';\nimport React, { useEffect, useState, useRef } from 'react';\nimport Header from '../Components/Header';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction Series() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [seriesList, setSeriesList] = useState([]);\n  const [episodes, setEpisodes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\n  const [availableSeasons, setAvailableSeasons] = useState([]);\n  const [currentSeason, setCurrentSeason] = useState('');\n  const seriesMetadataCache = useRef({});\n  const [selectedSeries, setSelectedSeries] = useState(null);\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const seriesName = params.get('name');\n    const play = params.get('play');\n    setSelectedSeries(seriesName);\n    if (!play && selectedMovie) {\n      setSelectedMovie(null);\n      return;\n    }\n    if (play && episodes.length > 0 && !selectedMovie) {\n      const episode = episodes.find(e => e.filename === play);\n      if (episode) {\n        setSelectedMovie(episode);\n      }\n    }\n  }, [location.search, episodes, selectedMovie]);\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const metaData = await metaRes.json();\n          return {\n            folder,\n            poster: `${API_URL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\n            title: metaData.Title || folder,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n        const allGenres = seriesWithMetadata.flatMap(series => series.genre.split(',').map(g => g.trim()));\n        setGenres([...new Set(allGenres)]);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n\n  // Fetch episodes for selected series\n  useEffect(() => {\n    if (!selectedSeries) return;\n    const fetchEpisodes = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error('Failed to fetch episodes');\n        }\n        const data = await res.json();\n        const allEpisodes = [];\n        const seasonNames = data.seasons.map(seasonObj => seasonObj.season);\n        setAvailableSeasons(seasonNames);\n        setCurrentSeason(seasonNames[0] || ''); // Default to first season\n\n        data.seasons.forEach(seasonObj => {\n          seasonObj.episodes.forEach(episode => {\n            allEpisodes.push({\n              filename: episode.filename,\n              seriesName: selectedSeries,\n              season: seasonObj.season,\n              title: episode.filename.replace(/\\.[^/.]+$/, ''),\n              path: episode.path\n            });\n          });\n        });\n        setEpisodes(allEpisodes);\n      } catch (err) {\n        console.error('Error fetching episodes:', err);\n      }\n    };\n    fetchEpisodes();\n  }, [selectedSeries]);\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      if (!selectedSeries) return;\n\n      // Use cached version if available\n      if (seriesMetadataCache.current[selectedSeries]) {\n        setSelectedSeriesMetadata(seriesMetadataCache.current[selectedSeries]);\n        return;\n      }\n      try {\n        const token = localStorage.getItem('token');\n        const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(selectedSeries)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n\n        // Cache the result\n        seriesMetadataCache.current[selectedSeries] = data;\n        setSelectedSeriesMetadata(data);\n      } catch (err) {\n        console.error('Error fetching selected series metadata:', err);\n      }\n    };\n    fetchMetadata();\n  }, [selectedSeries]);\n  const filteredSeriesList = seriesList.filter(series => {\n    const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  const filteredEpisodes = episodes.filter(episode => {\n    const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSeason = episode.season === currentSeason;\n    return matchesSearch && matchesSeason;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"msTitel\",\n            children: \"Series\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchBox\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sokDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Search series...\",\n                value: searchTerm,\n                onChange: e => setSearchTerm(e.target.value),\n                className: \"msSearch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"centreraCards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"genre-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(''),\n                  className: !selectedGenre ? 'active' : '',\n                  children: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 41\n                }, this), genres.map((genre, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(genre),\n                  className: selectedGenre === genre ? 'active' : '',\n                  children: genre\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 45\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredSeriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => {\n                  navigate(`/series/${encodeURIComponent(series.folder)}`);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"hover-area\",\n                  children: series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `${API_URL}/seriesPosters/${encodeURIComponent(series.folder)}.jpg`,\n                    alt: series.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 45\n                }, this)\n              }, series.folder, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Series, \"yK35Lg/1Q1tyeedeDY5cqHJM4nU=\", false, function () {\n  return [useNavigate, useLocation, useAuth];\n});\n_c = Series;\nexport default Series;\nvar _c;\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["useAuth","React","useEffect","useState","useRef","Header","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","Series","_s","navigate","location","isLoggedIn","selectedMovie","setSelectedMovie","seriesList","setSeriesList","episodes","setEpisodes","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","genres","setGenres","selectedSeriesMetadata","setSelectedSeriesMetadata","availableSeasons","setAvailableSeasons","currentSeason","setCurrentSeason","seriesMetadataCache","selectedSeries","setSelectedSeries","params","URLSearchParams","search","seriesName","get","play","length","episode","find","e","filename","fetchSeries","token","localStorage","getItem","res","fetch","headers","Authorization","folders","json","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","poster","title","Title","imdbRating","genre","Genre","allGenres","flatMap","series","split","g","trim","Set","err","console","error","fetchEpisodes","ok","Error","data","allEpisodes","seasonNames","seasons","seasonObj","season","forEach","push","replace","path","fetchMetadata","current","filteredSeriesList","filter","matchesSearch","toLowerCase","includes","matchesGenre","filteredEpisodes","matchesSeason","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","target","onClick","idx","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Frontend/Series.js"],"sourcesContent":["import { useAuth } from '../authContext';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport Header from '../Components/Header';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction Series() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const { isLoggedIn } = useAuth();\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedGenre, setSelectedGenre] = useState('');\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\r\n    const [availableSeasons, setAvailableSeasons] = useState([]);\r\n    const [currentSeason, setCurrentSeason] = useState('');\r\n    const seriesMetadataCache = useRef({});\r\n    const [selectedSeries, setSelectedSeries] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        const seriesName = params.get('name');\r\n        const play = params.get('play');\r\n\r\n        setSelectedSeries(seriesName);\r\n\r\n        if (!play && selectedMovie) {\r\n            setSelectedMovie(null);\r\n            return;\r\n        }\r\n\r\n        if (play && episodes.length > 0 && !selectedMovie) {\r\n            const episode = episodes.find(e => e.filename === play);\r\n            if (episode) {\r\n                setSelectedMovie(episode);\r\n            }\r\n        }\r\n    }, [location.search, episodes, selectedMovie]);\r\n\r\n    useEffect(() => {\r\n        const fetchSeries = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const folders = await res.json();\r\n\r\n                const seriesWithMetadata = await Promise.all(\r\n                    folders.map(async (folder) => {\r\n                        const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`, {\r\n                            headers: { Authorization: `Bearer ${token}` },\r\n                        });\r\n                        const metaData = await metaRes.json();\r\n\r\n                        return {\r\n                            folder,\r\n                            poster: `${API_URL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\r\n                            title: metaData.Title || folder,\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setSeriesList(seriesWithMetadata);\r\n\r\n                const allGenres = seriesWithMetadata.flatMap(series =>\r\n                    series.genre.split(',').map(g => g.trim())\r\n                );\r\n                setGenres([...new Set(allGenres)]);\r\n            } catch (err) {\r\n                console.error('Error fetching series folders or metadata:', err);\r\n            }\r\n        };\r\n        fetchSeries();\r\n    }, []);\r\n\r\n    // Fetch episodes for selected series\r\n    useEffect(() => {\r\n        if (!selectedSeries) return;\r\n\r\n        const fetchEpisodes = async () => {\r\n            const token = localStorage.getItem('token');\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    throw new Error('Failed to fetch episodes');\r\n                }\r\n\r\n                const data = await res.json();\r\n                const allEpisodes = [];\r\n\r\n                const seasonNames = data.seasons.map((seasonObj) => seasonObj.season);\r\n                setAvailableSeasons(seasonNames);\r\n                setCurrentSeason(seasonNames[0] || ''); // Default to first season\r\n\r\n                data.seasons.forEach((seasonObj) => {\r\n                    seasonObj.episodes.forEach((episode) => {\r\n                        allEpisodes.push({\r\n                            filename: episode.filename,\r\n                            seriesName: selectedSeries,\r\n                            season: seasonObj.season,\r\n                            title: episode.filename.replace(/\\.[^/.]+$/, ''),\r\n                            path: episode.path,\r\n                        });\r\n                    });\r\n                });\r\n\r\n                setEpisodes(allEpisodes);\r\n            } catch (err) {\r\n                console.error('Error fetching episodes:', err);\r\n            }\r\n        };\r\n\r\n        fetchEpisodes();\r\n    }, [selectedSeries]);\r\n\r\n    useEffect(() => {\r\n        const fetchMetadata = async () => {\r\n            if (!selectedSeries) return;\r\n\r\n            // Use cached version if available\r\n            if (seriesMetadataCache.current[selectedSeries]) {\r\n                setSelectedSeriesMetadata(seriesMetadataCache.current[selectedSeries]);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                const res = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(selectedSeries)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n\r\n                const data = await res.json();\r\n\r\n                // Cache the result\r\n                seriesMetadataCache.current[selectedSeries] = data;\r\n                setSelectedSeriesMetadata(data);\r\n            } catch (err) {\r\n                console.error('Error fetching selected series metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchMetadata();\r\n    }, [selectedSeries]);\r\n\r\n    const filteredSeriesList = seriesList.filter(series => {\r\n        const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || (series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase()));\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    const filteredEpisodes = episodes.filter(episode => {\r\n        const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesSeason = episode.season === currentSeason;\r\n        return matchesSearch && matchesSeason;\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className=\"movie-row\">\r\n                        <>\r\n                            <h3 className=\"msTitel\">Series</h3>\r\n                            <div className='searchBox'>\r\n                                <div className=\"sokDiv\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Search series...\"\r\n                                        value={searchTerm}\r\n                                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                                        className=\"msSearch\"\r\n                                    />\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"genre-buttons\">\r\n                                        <button\r\n                                            onClick={() => setSelectedGenre('')}\r\n                                            className={!selectedGenre ? 'active' : ''}\r\n                                        >\r\n                                            All\r\n                                        </button>\r\n                                        {genres.map((genre, idx) => (\r\n                                            <button\r\n                                                key={idx}\r\n                                                onClick={() => setSelectedGenre(genre)}\r\n                                                className={selectedGenre === genre ? 'active' : ''}\r\n                                            >\r\n                                                {genre}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className='centreraCards'>\r\n                                <div className=\"cards\">\r\n                                    {filteredSeriesList.map((series) => (\r\n                                        <div\r\n                                            key={series.folder}\r\n                                            className=\"movie-card\"\r\n                                            onClick={() => {\r\n                                              navigate(`/series/${encodeURIComponent(series.folder)}`);\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"hover-area\">\r\n                                                {series.poster && (\r\n                                                    <img\r\n                                                        src={`${API_URL}/seriesPosters/${encodeURIComponent(series.folder)}.jpg`}\r\n                                                        alt={series.title}\r\n                                                    />\r\n\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Series;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}