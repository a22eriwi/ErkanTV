{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\SeriesRow.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction SeriesRow({\n  title,\n  topSeries = false\n}) {\n  _s();\n  const [seriesList, setSeriesList] = useState([]);\n  const navigate = useNavigate();\n  const metadataCache = useRef({});\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          // Use cache if available\n          if (metadataCache.current[folder]) {\n            return {\n              folder,\n              ...metadataCache.current[folder]\n            };\n          }\n\n          // Otherwise fetch from API\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\n          const metaData = await metaRes.json();\n          const metadata = {\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            title: folder,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n          metadataCache.current[folder] = metadata; // ✅ Save to cache\n\n          return {\n            folder,\n            ...metadata\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n  const handleSeriesClick = folderName => {\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centreraCards\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: seriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => handleSeriesClick(series.folder),\n          children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: series.poster,\n            alt: series.title,\n            className: \"movie-poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movieTitle\",\n            children: [series.title, \" \\u2B50\", series.imdbRating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, series.folder, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(SeriesRow, \"1srw7h4WwCzP9ejcKdLUJplbvPY=\", false, function () {\n  return [useNavigate];\n});\n_c = SeriesRow;\nexport default SeriesRow;\nvar _c;\n$RefreshReg$(_c, \"SeriesRow\");","map":{"version":3,"names":["useNavigate","React","useEffect","useState","useRef","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","SeriesRow","title","topSeries","_s","seriesList","setSeriesList","navigate","metadataCache","fetchSeries","token","localStorage","getItem","res","fetch","headers","Authorization","folders","json","seriesWithMetadata","Promise","all","map","folder","current","metaRes","encodeURIComponent","metaData","metadata","poster","Poster","imdbRating","genre","Genre","err","console","error","handleSeriesClick","folderName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","series","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/SeriesRow.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction SeriesRow({ title, topSeries = false }) {\r\n  const [seriesList, setSeriesList] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const metadataCache = useRef({});\r\n\r\n  useEffect(() => {\r\n      const fetchSeries = async () => {\r\n          const token = localStorage.getItem('token');\r\n          try {\r\n              const res = await fetch(`${API_URL}/api/series`, {\r\n                  headers: { Authorization: `Bearer ${token}` },\r\n              });\r\n              const folders = await res.json();\r\n  \r\n              const seriesWithMetadata = await Promise.all(\r\n                  folders.map(async (folder) => {\r\n                      // Use cache if available\r\n                      if (metadataCache.current[folder]) {\r\n                          return {\r\n                              folder,\r\n                              ...metadataCache.current[folder],\r\n                          };\r\n                      }\r\n  \r\n                      // Otherwise fetch from API\r\n                      const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\r\n                      const metaData = await metaRes.json();\r\n  \r\n                      const metadata = {\r\n                          poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                          title: folder,\r\n                          imdbRating: metaData.imdbRating || 'N/A',\r\n                          genre: metaData.Genre || '',\r\n                      };\r\n  \r\n                      metadataCache.current[folder] = metadata; // ✅ Save to cache\r\n  \r\n                      return {\r\n                          folder,\r\n                          ...metadata,\r\n                      };\r\n                  })\r\n              );\r\n  \r\n              setSeriesList(seriesWithMetadata);\r\n            \r\n          } catch (err) {\r\n              console.error('Error fetching series folders or metadata:', err);\r\n          }\r\n      };\r\n  \r\n      fetchSeries();\r\n  }, []);\r\n  \r\n\r\n  const handleSeriesClick = (folderName) => {\r\n    navigate(`/series?name=${encodeURIComponent(folderName)}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie-row\">\r\n      <h3>{title}</h3>\r\n      <div className='centreraCards'>\r\n        <div className=\"cards\">\r\n          {seriesList.map(series => (\r\n            <div\r\n              key={series.folder}\r\n              className=\"movie-card\"\r\n              onClick={() => handleSeriesClick(series.folder)}\r\n            >\r\n              {series.poster && (\r\n                <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n              )}\r\n              <span className=\"movieTitle\">{series.title} ⭐{series.imdbRating}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeriesRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}