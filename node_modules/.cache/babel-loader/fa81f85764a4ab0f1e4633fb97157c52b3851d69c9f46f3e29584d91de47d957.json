{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/authContext.js\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const refreshTimeout = useRef();\n  const [loading, setLoading] = useState(true);\n\n  // 🔁 Refresh token when app loads\n  useEffect(() => {\n    refreshAccessToken();\n  }, []);\n\n  // ✅ Attach access token to all API requests\n  useEffect(() => {\n    const interceptor = api.interceptors.request.use(config => {\n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`;\n      }\n      return config;\n    });\n    return () => api.interceptors.request.eject(interceptor);\n  }, [accessToken]);\n  const refreshAccessToken = async () => {\n    try {\n      const res = await api.post('/api/token', {}, {\n        withCredentials: true\n      });\n      const newToken = res.data.accessToken;\n      const decoded = jwtDecode(newToken);\n      setUser(decoded);\n      setAccessToken(newToken);\n      setIsLoggedIn(true);\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n      clearTimeout(refreshTimeout.current);\n      refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\n    } catch (err) {\n      logout(false); // don't clear loading here\n    } finally {\n      setLoading(false); // ✅ done checking\n    }\n  };\n  const login = token => {\n    const decoded = jwtDecode(token);\n    setUser(decoded);\n    setAccessToken(token);\n    setIsLoggedIn(true);\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n    clearTimeout(refreshTimeout.current);\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\n  };\n  const logout = async (resetLoading = true) => {\n    try {\n      await api.post('/api/logout');\n    } catch (err) {\n      console.error('Logout error:', err);\n    }\n    setUser(null);\n    setAccessToken(null);\n    setIsLoggedIn(false);\n    clearTimeout(refreshTimeout.current);\n    if (resetLoading) setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      accessToken,\n      isLoggedIn,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"zeHjjKcLiLzPWYOG9lMuesdEMq4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useRef","jwtDecode","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","accessToken","setAccessToken","isLoggedIn","setIsLoggedIn","refreshTimeout","loading","setLoading","refreshAccessToken","interceptor","interceptors","request","use","config","headers","Authorization","eject","res","post","withCredentials","newToken","data","decoded","timeout","exp","Date","now","clearTimeout","current","setTimeout","err","logout","login","token","resetLoading","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Erkflix/src/authContext.js"],"sourcesContent":["// src/authContext.js\r\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport api from './Api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const refreshTimeout = useRef();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // 🔁 Refresh token when app loads\r\n  useEffect(() => {\r\n    refreshAccessToken();\r\n  }, []);\r\n\r\n  // ✅ Attach access token to all API requests\r\n  useEffect(() => {\r\n    const interceptor = api.interceptors.request.use(config => {\r\n      if (accessToken) {\r\n        config.headers.Authorization = `Bearer ${accessToken}`;\r\n      }\r\n      return config;\r\n    });\r\n\r\n    return () => api.interceptors.request.eject(interceptor);\r\n  }, [accessToken]);\r\n\r\n  const refreshAccessToken = async () => {\r\n    try {\r\n      const res = await api.post('/api/token', {}, { withCredentials: true });\r\n      const newToken = res.data.accessToken;\r\n      const decoded = jwtDecode(newToken);\r\n\r\n      setUser(decoded);\r\n      setAccessToken(newToken);\r\n      setIsLoggedIn(true);\r\n\r\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n      clearTimeout(refreshTimeout.current);\r\n      refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\r\n    } catch (err) {\r\n      logout(false); // don't clear loading here\r\n    } finally {\r\n      setLoading(false); // ✅ done checking\r\n    }\r\n  };\r\n\r\n  const login = (token) => {\r\n    const decoded = jwtDecode(token);\r\n    setUser(decoded);\r\n    setAccessToken(token);\r\n    setIsLoggedIn(true);\r\n\r\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n    clearTimeout(refreshTimeout.current);\r\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\r\n  };\r\n\r\n  const logout = async (resetLoading = true) => {\r\n    try {\r\n      await api.post('/api/logout');\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n    }\r\n    setUser(null);\r\n    setAccessToken(null);\r\n    setIsLoggedIn(false);\r\n    clearTimeout(refreshTimeout.current);\r\n    if (resetLoading) setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, accessToken, isLoggedIn, loading, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC9E,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASU,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMgB,cAAc,GAAGf,MAAM,CAAC,CAAC;EAC/B,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACdoB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApB,SAAS,CAAC,MAAM;IACd,MAAMqB,WAAW,GAAGjB,GAAG,CAACkB,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;MACzD,IAAIZ,WAAW,EAAE;QACfY,MAAM,CAACC,OAAO,CAACC,aAAa,GAAG,UAAUd,WAAW,EAAE;MACxD;MACA,OAAOY,MAAM;IACf,CAAC,CAAC;IAEF,OAAO,MAAMrB,GAAG,CAACkB,YAAY,CAACC,OAAO,CAACK,KAAK,CAACP,WAAW,CAAC;EAC1D,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EAEjB,MAAMO,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMS,GAAG,GAAG,MAAMzB,GAAG,CAAC0B,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE;QAAEC,eAAe,EAAE;MAAK,CAAC,CAAC;MACvE,MAAMC,QAAQ,GAAGH,GAAG,CAACI,IAAI,CAACpB,WAAW;MACrC,MAAMqB,OAAO,GAAG/B,SAAS,CAAC6B,QAAQ,CAAC;MAEnCpB,OAAO,CAACsB,OAAO,CAAC;MAChBpB,cAAc,CAACkB,QAAQ,CAAC;MACxBhB,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAMmB,OAAO,GAAG,CAACD,OAAO,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI;MACxDC,YAAY,CAACtB,cAAc,CAACuB,OAAO,CAAC;MACpCvB,cAAc,CAACuB,OAAO,GAAGC,UAAU,CAACrB,kBAAkB,EAAEe,OAAO,GAAG,IAAI,CAAC;IACzE,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,SAAS;MACRxB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,MAAMyB,KAAK,GAAIC,KAAK,IAAK;IACvB,MAAMX,OAAO,GAAG/B,SAAS,CAAC0C,KAAK,CAAC;IAChCjC,OAAO,CAACsB,OAAO,CAAC;IAChBpB,cAAc,CAAC+B,KAAK,CAAC;IACrB7B,aAAa,CAAC,IAAI,CAAC;IAEnB,MAAMmB,OAAO,GAAG,CAACD,OAAO,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI;IACxDC,YAAY,CAACtB,cAAc,CAACuB,OAAO,CAAC;IACpCvB,cAAc,CAACuB,OAAO,GAAGC,UAAU,CAACrB,kBAAkB,EAAEe,OAAO,GAAG,IAAI,CAAC;EACzE,CAAC;EAED,MAAMQ,MAAM,GAAG,MAAAA,CAAOG,YAAY,GAAG,IAAI,KAAK;IAC5C,IAAI;MACF,MAAM1C,GAAG,CAAC0B,IAAI,CAAC,aAAa,CAAC;IAC/B,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZK,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEN,GAAG,CAAC;IACrC;IACA9B,OAAO,CAAC,IAAI,CAAC;IACbE,cAAc,CAAC,IAAI,CAAC;IACpBE,aAAa,CAAC,KAAK,CAAC;IACpBuB,YAAY,CAACtB,cAAc,CAACuB,OAAO,CAAC;IACpC,IAAIM,YAAY,EAAE3B,UAAU,CAAC,KAAK,CAAC;EACrC,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAAC0C,QAAQ;IAACC,KAAK,EAAE;MAAEvC,IAAI;MAAEE,WAAW;MAAEE,UAAU;MAAEG,OAAO;MAAE0B,KAAK;MAAED;IAAO,CAAE;IAAAlC,QAAA,EACpFA;EAAQ;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC5C,EAAA,CAzEeF,YAAY;AAAA+C,EAAA,GAAZ/C,YAAY;AA2E5B,OAAO,MAAMgD,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1D,UAAU,CAACQ,WAAW,CAAC;AAAA;AAACkD,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}