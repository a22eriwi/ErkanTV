{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/authContext.js\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport api from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const location = useLocation(); // get current route\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const refreshTimeout = useRef();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const publicPaths = ['/', '/login', '/register'];\n    if (!publicPaths.includes(location.pathname)) {\n      refreshAccessToken();\n    } else {\n      setLoading(false);\n    }\n  }, [location.pathname]);\n  const refreshAccessToken = useCallback(async () => {\n    try {\n      const res = await api.post('/api/token', {}, {\n        withCredentials: true\n      });\n      const newToken = res.data.accessToken;\n      const decoded = jwtDecode(newToken);\n      setUser(decoded);\n      setAccessToken(newToken);\n      setIsLoggedIn(true);\n      const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n      clearTimeout(refreshTimeout.current);\n      refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\n    } catch (err) {\n      console.warn('Refresh token failed, user not logged in.');\n      setUser(null);\n      setAccessToken(null);\n      setIsLoggedIn(false);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const login = token => {\n    const decoded = jwtDecode(token);\n    setUser(decoded);\n    setAccessToken(token);\n    setIsLoggedIn(true);\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\n    clearTimeout(refreshTimeout.current);\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\n  };\n  const logout = async (resetLoading = true) => {\n    try {\n      await api.post('/api/logout');\n    } catch (err) {\n      console.error('Logout error:', err);\n    }\n    setUser(null);\n    setAccessToken(null);\n    setIsLoggedIn(false);\n    clearTimeout(refreshTimeout.current);\n    if (resetLoading) setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      accessToken,\n      isLoggedIn,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"QuiwdxfK8gcHF1rU4RGMYMO/fGg=\", false, function () {\n  return [useLocation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useRef","useLocation","jwtDecode","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","location","user","setUser","accessToken","setAccessToken","isLoggedIn","setIsLoggedIn","refreshTimeout","loading","setLoading","publicPaths","includes","pathname","refreshAccessToken","useCallback","res","post","withCredentials","newToken","data","decoded","timeout","exp","Date","now","clearTimeout","current","setTimeout","err","console","warn","login","token","logout","resetLoading","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Erkflix/src/authContext.js"],"sourcesContent":["// src/authContext.js\r\nimport { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport api from './Api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const location = useLocation(); // get current route\r\n  const [user, setUser] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const refreshTimeout = useRef();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const publicPaths = ['/', '/login', '/register'];\r\n    if (!publicPaths.includes(location.pathname)) {\r\n      refreshAccessToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [location.pathname]);\r\n\r\nconst refreshAccessToken = useCallback(async () => {\r\n  try {\r\n    const res = await api.post('/api/token', {}, { withCredentials: true });\r\n    const newToken = res.data.accessToken;\r\n    const decoded = jwtDecode(newToken);\r\n\r\n    setUser(decoded);\r\n    setAccessToken(newToken);\r\n    setIsLoggedIn(true);\r\n\r\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n    clearTimeout(refreshTimeout.current);\r\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\r\n  } catch (err) {\r\n    console.warn('Refresh token failed, user not logged in.');\r\n    setUser(null);\r\n    setAccessToken(null);\r\n    setIsLoggedIn(false);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}, []);\r\n\r\n  const login = (token) => {\r\n    const decoded = jwtDecode(token);\r\n    setUser(decoded);\r\n    setAccessToken(token);\r\n    setIsLoggedIn(true);\r\n\r\n    const timeout = (decoded.exp - Date.now() / 1000) * 1000;\r\n    clearTimeout(refreshTimeout.current);\r\n    refreshTimeout.current = setTimeout(refreshAccessToken, timeout - 2000);\r\n  };\r\n\r\n  const logout = async (resetLoading = true) => {\r\n    try {\r\n      await api.post('/api/logout');\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n    }\r\n    setUser(null);\r\n    setAccessToken(null);\r\n    setIsLoggedIn(false);\r\n    clearTimeout(refreshTimeout.current);\r\n    if (resetLoading) setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, accessToken, isLoggedIn, loading, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}