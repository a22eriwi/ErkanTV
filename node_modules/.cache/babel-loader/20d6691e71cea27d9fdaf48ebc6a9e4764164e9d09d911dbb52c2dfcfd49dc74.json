{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Components\\\\SeriesRow.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction SeriesRow({\n  title,\n  topSeries = false\n}) {\n  _s();\n  const [seriesList, setSeriesList] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      try {\n        const route = topSeries ? '/api/top-series' : '/api/series';\n        const res = await fetch(`${API_URL}${route}`, {\n          headers\n        });\n        const folderNames = await res.json();\n        const seriesWithMetadata = await Promise.all(folderNames.map(async folder => {\n          try {\n            const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`, {\n              headers\n            });\n            const metaData = await metaRes.json();\n            return {\n              folder,\n              title: metaData.Title || folder,\n              poster: `${API_URL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\n              imdbRating: metaData.imdbRating || 'N/A',\n              genre: metaData.Genre || ''\n            };\n          } catch (err) {\n            console.warn(`❌ Metadata fetch failed for \"${folder}\"`, err);\n            return {\n              folder,\n              title: folder,\n              poster: null,\n              imdbRating: 'N/A',\n              genre: ''\n            };\n          }\n        }));\n        setSeriesList(seriesWithMetadata);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, [topSeries]);\n  const handleSeriesClick = folderName => {\n    navigate(`/series/${encodeURIComponent(folderName)}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centreraCards\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homeComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        id: \"homeCards\",\n        children: seriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-card\",\n          onClick: () => handleSeriesClick(series.folder),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hover-area\",\n            children: series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: series.poster,\n              alt: series.title,\n              onError: e => {\n                console.warn(\"Series image failed to load:\", e.target.src);\n                e.target.style.display = 'none';\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, series.folder, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(SeriesRow, \"tmWH8qMBt08zh9vY7E3LO0JqIy8=\", false, function () {\n  return [useNavigate];\n});\n_c = SeriesRow;\nexport default SeriesRow;\nvar _c;\n$RefreshReg$(_c, \"SeriesRow\");","map":{"version":3,"names":["useNavigate","React","useEffect","useState","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","SeriesRow","title","topSeries","_s","seriesList","setSeriesList","navigate","fetchSeries","token","localStorage","getItem","headers","Authorization","route","res","fetch","folderNames","json","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","Title","poster","imdbRating","genre","Genre","err","console","warn","error","handleSeriesClick","folderName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","series","onClick","src","alt","onError","e","target","style","display","_c","$RefreshReg$"],"sources":["D:/Erkflix/src/Components/SeriesRow.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction SeriesRow({ title, topSeries = false }) {\r\n  const [seriesList, setSeriesList] = useState([]);\r\n  const navigate = useNavigate();\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchSeries = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const headers = { Authorization: `Bearer ${token}` };\r\n\r\n      try {\r\n        const route = topSeries ? '/api/top-series' : '/api/series';\r\n        const res = await fetch(`${API_URL}${route}`, { headers });\r\n        const folderNames = await res.json();\r\n\r\n        const seriesWithMetadata = await Promise.all(\r\n          folderNames.map(async (folder) => {\r\n            try {\r\n              const metaRes = await fetch(`${API_URL}/api/series-metadata/${encodeURIComponent(folder)}`, { headers });\r\n              const metaData = await metaRes.json();\r\n\r\n              return {\r\n                folder,\r\n                title: metaData.Title || folder,\r\n                poster: `${API_URL}/seriesPosters/${encodeURIComponent(folder)}.jpg`,\r\n                imdbRating: metaData.imdbRating || 'N/A',\r\n                genre: metaData.Genre || '',\r\n              };\r\n            } catch (err) {\r\n              console.warn(`❌ Metadata fetch failed for \"${folder}\"`, err);\r\n              return {\r\n                folder,\r\n                title: folder,\r\n                poster: null,\r\n                imdbRating: 'N/A',\r\n                genre: '',\r\n              };\r\n            }\r\n          })\r\n        );\r\n\r\n        setSeriesList(seriesWithMetadata);\r\n      } catch (err) {\r\n        console.error('Error fetching series folders or metadata:', err);\r\n      }\r\n    };\r\n\r\n    fetchSeries();\r\n  }, [topSeries]);\r\n\r\nconst handleSeriesClick = (folderName) => {\r\n  navigate(`/series/${encodeURIComponent(folderName)}`);\r\n};\r\n\r\n  return (\r\n    <div className=\"centreraCards\">\r\n      <div className='homeComponent'>\r\n        <h3>{title}</h3>\r\n        <div className=\"cards\" id='homeCards'>\r\n          {seriesList.map((series) => (\r\n            <div\r\n              key={series.folder}\r\n              className=\"movie-card\"\r\n              onClick={() => handleSeriesClick(series.folder)}\r\n            >\r\n              <div className=\"hover-area\">\r\n                {series.poster && (\r\n                  <img\r\n                    src={series.poster}\r\n                    alt={series.title}\r\n                    onError={(e) => {\r\n                      console.warn(\"Series image failed to load:\", e.target.src);\r\n                      e.target.style.display = 'none';\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeriesRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}