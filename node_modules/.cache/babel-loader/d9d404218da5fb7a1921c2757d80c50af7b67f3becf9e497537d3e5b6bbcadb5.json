{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Components\\\\recentlyAddedRow.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/RecentlyAddedRow.js\nimport { useAuth } from '../authContext';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../Api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RenderRecentlyAddedRow() {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  if (!isLoggedIn) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoggedIn && /*#__PURE__*/_jsxDEV(RecentlyAddedRow, {\n      title: \"RecentlyAddedRow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 22\n    }, this)\n  }, void 0, false);\n}\n_s(RenderRecentlyAddedRow, \"Jbx0LrCfdz/EDenJV2YbpvzQ6CY=\", false, function () {\n  return [useAuth];\n});\n_c = RenderRecentlyAddedRow;\nfunction RecentlyAddedRow({\n  title,\n  setSelectedMovie\n}) {\n  _s2();\n  const [items, setItems] = useState([]);\n  const navigate = useNavigate();\n  const metadataCache = useRef({});\n  useEffect(() => {\n    const fetchRecent = async () => {\n      try {\n        const res = await api.get('/api/recent-content');\n        const data = res.data;\n        const enriched = await Promise.all(data.map(async item => {\n          const cacheKey = item.title;\n          if (metadataCache.current[cacheKey]) {\n            return {\n              ...item,\n              ...metadataCache.current[cacheKey]\n            };\n          }\n          let meta;\n          try {\n            if (item.type === 'movie') {\n              const res = await api.get(`/api/metadata/${encodeURIComponent(item.title)}`);\n              meta = res.data;\n            } else {\n              const folder = item.folder || item.seriesName;\n              const res = await api.get(`/api/series-metadata/${encodeURIComponent(folder)}`);\n              meta = res.data;\n            }\n          } catch (err) {\n            console.warn(`Failed to load metadata for: ${item.title}`);\n            return item;\n          }\n          const metadata = {\n            title: meta.Title || item.title || item.seriesName,\n            imdbRating: meta.imdbRating || 'N/A',\n            genre: meta.Genre || '',\n            folder: meta.folder || item.seriesName || item.folder,\n            Poster: meta.Poster || null\n          };\n          metadataCache.current[cacheKey] = metadata;\n          return {\n            ...item,\n            ...metadata\n          };\n        }));\n        setItems(enriched);\n      } catch (err) {\n        console.error('Failed to load recent items:', err);\n      }\n    };\n    fetchRecent();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centreraCards\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homeComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        id: \"homeCards\",\n        children: items.map(item => {\n          const folderName = item.folder || item.seriesName || item.title;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-card\",\n            onClick: () => {\n              if (item.type === 'movie') {\n                navigate(`/movies/${encodeURIComponent(item.folder)}`);\n              } else {\n                navigate(`/series/${encodeURIComponent(item.seriesName)}`);\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hover-area\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `${api.defaults.baseURL}/${item.type === 'movie' ? 'moviePosters' : 'seriesPosters'}/${encodeURIComponent(folderName)}.jpg`,\n                alt: item.title,\n                onError: e => {\n                  console.warn('Image failed to load:', e.target.src);\n                  e.target.style.display = 'none';\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)\n          }, `${item.type}-${item.title}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s2(RecentlyAddedRow, \"ol5QmqtmexoEY/hnDucvsqGgLqc=\", false, function () {\n  return [useNavigate];\n});\n_c2 = RecentlyAddedRow;\nvar _c, _c2;\n$RefreshReg$(_c, \"RenderRecentlyAddedRow\");\n$RefreshReg$(_c2, \"RecentlyAddedRow\");","map":{"version":3,"names":["useAuth","React","useEffect","useState","useRef","useNavigate","api","jsxDEV","_jsxDEV","Fragment","_Fragment","RenderRecentlyAddedRow","_s","isLoggedIn","children","RecentlyAddedRow","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","setSelectedMovie","_s2","items","setItems","navigate","metadataCache","fetchRecent","res","get","data","enriched","Promise","all","map","item","cacheKey","current","meta","type","encodeURIComponent","folder","seriesName","err","console","warn","metadata","Title","imdbRating","genre","Genre","Poster","error","className","id","folderName","onClick","src","defaults","baseURL","alt","onError","e","target","style","display","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Components/recentlyAddedRow.js"],"sourcesContent":["// src/components/RecentlyAddedRow.js\r\nimport { useAuth } from '../authContext';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../Api';\r\n\r\nexport default function RenderRecentlyAddedRow(){\r\n  const { isLoggedIn } = useAuth();\r\n  if (!isLoggedIn) return null;\r\n  return (\r\n    <>\r\n      {isLoggedIn && <RecentlyAddedRow title=\"RecentlyAddedRow\" />}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction RecentlyAddedRow({ title, setSelectedMovie }) {\r\n  const [items, setItems] = useState([]);\r\n  const navigate = useNavigate();\r\n  const metadataCache = useRef({});\r\n\r\n  useEffect(() => {\r\n    const fetchRecent = async () => {\r\n      try {\r\n        const res = await api.get('/api/recent-content');\r\n        const data = res.data;\r\n\r\n        const enriched = await Promise.all(\r\n          data.map(async (item) => {\r\n            const cacheKey = item.title;\r\n            if (metadataCache.current[cacheKey]) {\r\n              return { ...item, ...metadataCache.current[cacheKey] };\r\n            }\r\n\r\n            let meta;\r\n            try {\r\n              if (item.type === 'movie') {\r\n                const res = await api.get(`/api/metadata/${encodeURIComponent(item.title)}`);\r\n                meta = res.data;\r\n              } else {\r\n                const folder = item.folder || item.seriesName;\r\n                const res = await api.get(`/api/series-metadata/${encodeURIComponent(folder)}`);\r\n                meta = res.data;\r\n              }\r\n            } catch (err) {\r\n              console.warn(`Failed to load metadata for: ${item.title}`);\r\n              return item;\r\n            }\r\n\r\n            const metadata = {\r\n              title: meta.Title || item.title || item.seriesName,\r\n              imdbRating: meta.imdbRating || 'N/A',\r\n              genre: meta.Genre || '',\r\n              folder: meta.folder || item.seriesName || item.folder,\r\n              Poster: meta.Poster || null,\r\n            };\r\n\r\n            metadataCache.current[cacheKey] = metadata;\r\n\r\n            return { ...item, ...metadata };\r\n          })\r\n        );\r\n\r\n        setItems(enriched);\r\n      } catch (err) {\r\n        console.error('Failed to load recent items:', err);\r\n      }\r\n    };\r\n\r\n    fetchRecent();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='centreraCards'>\r\n      <div className='homeComponent'>\r\n        <h3>{title}</h3>\r\n        <div className=\"cards\" id='homeCards'>\r\n          {items.map(item => {\r\n            const folderName = item.folder || item.seriesName || item.title;\r\n\r\n            return (\r\n              <div\r\n                key={`${item.type}-${item.title}`}\r\n                className=\"movie-card\"\r\n                onClick={() => {\r\n                  if (item.type === 'movie') {\r\n                    navigate(`/movies/${encodeURIComponent(item.folder)}`);\r\n                  } else {\r\n                    navigate(`/series/${encodeURIComponent(item.seriesName)}`);\r\n                  }\r\n                }}\r\n              >\r\n                <div className=\"hover-area\">\r\n                  <img\r\n                    src={`${api.defaults.baseURL}/${item.type === 'movie' ? 'moviePosters' : 'seriesPosters'}/${encodeURIComponent(folderName)}.jpg`}\r\n                    alt={item.title}\r\n                    onError={(e) => {\r\n                      console.warn('Image failed to load:', e.target.src);\r\n                      e.target.style.display = 'none';\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}