{"ast":null,"code":"var _jsxFileName = \"D:\\\\Erkflix\\\\src\\\\Series.js\",\n  _s = $RefreshSig$();\nimport { useAuth } from './authContext';\nimport React, { useEffect, useState } from 'react';\nimport Header from './Header';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction Series() {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const initialSeries = params.get('name');\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [selectedSeries, setSelectedSeries] = useState(initialSeries);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [seriesList, setSeriesList] = useState([]);\n  const [episodes, setEpisodes] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\n  const [availableSeasons, setAvailableSeasons] = useState([]);\n  const [currentSeason, setCurrentSeason] = useState('');\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const folders = await res.json();\n        const seriesWithMetadata = await Promise.all(folders.map(async folder => {\n          const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\n          const metaData = await metaRes.json();\n          return {\n            folder,\n            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\n            title: folder,\n            imdbRating: metaData.imdbRating || 'N/A',\n            genre: metaData.Genre || ''\n          };\n        }));\n        setSeriesList(seriesWithMetadata);\n        const allGenres = seriesWithMetadata.flatMap(series => series.genre.split(',').map(g => g.trim()));\n        setGenres([...new Set(allGenres)]);\n      } catch (err) {\n        console.error('Error fetching series folders or metadata:', err);\n      }\n    };\n    fetchSeries();\n  }, []);\n\n  // Fetch episodes for selected series\n  useEffect(() => {\n    if (!selectedSeries) return;\n    const fetchEpisodes = async () => {\n      const token = localStorage.getItem('token');\n      try {\n        const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) {\n          throw new Error('Failed to fetch episodes');\n        }\n        const data = await res.json();\n        const allEpisodes = [];\n        const seasonNames = data.seasons.map(seasonObj => seasonObj.season);\n        setAvailableSeasons(seasonNames);\n        setCurrentSeason(seasonNames[0] || ''); // Default to first season\n\n        data.seasons.forEach(seasonObj => {\n          seasonObj.episodes.forEach(episode => {\n            allEpisodes.push({\n              filename: episode.filename,\n              seriesName: selectedSeries,\n              season: seasonObj.season,\n              title: episode.filename.replace(/\\.[^/.]+$/, ''),\n              path: episode.path\n            });\n          });\n        });\n        setEpisodes(allEpisodes);\n      } catch (err) {\n        console.error('Error fetching episodes:', err);\n      }\n    };\n    fetchEpisodes();\n  }, [selectedSeries]);\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      if (!selectedSeries) return;\n      try {\n        const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(selectedSeries)}`);\n        const data = await res.json();\n        setSelectedSeriesMetadata(data);\n      } catch (err) {\n        console.error('Error fetching selected series metadata:', err);\n      }\n    };\n    fetchMetadata();\n  }, [selectedSeries]);\n  const filteredSeriesList = seriesList.filter(series => {\n    const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase());\n    return matchesSearch && matchesGenre;\n  });\n  const filteredEpisodes = episodes.filter(episode => {\n    const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSeason = episode.season === currentSeason;\n    return matchesSearch && matchesSeason;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiv\",\n      children: [isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-row\",\n        children: !selectedSeries ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"msTitel\",\n            children: \"Series\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"searchBox\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sokDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Search series...\",\n                value: searchTerm,\n                onChange: e => setSearchTerm(e.target.value),\n                className: \"msSearch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"centreraCards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"genre-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(''),\n                  className: !selectedGenre ? 'active' : '',\n                  children: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 45\n                }, this), genres.map((genre, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setSelectedGenre(genre),\n                  className: selectedGenre === genre ? 'active' : '',\n                  children: genre\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredSeriesList.map(series => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => setSelectedSeries(series.folder),\n                children: [series.poster && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: series.poster,\n                  alt: series.title,\n                  className: \"movie-poster\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"movieTitle\",\n                  children: [series.title, \" \\u2B50\", series.imdbRating]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 49\n                }, this)]\n              }, series.folder, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"episodeTitel\",\n            className: \"msTitel\",\n            children: [selectedSeries, \" \", currentSeason]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backButtonDiv\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedSeries(null),\n              className: \"backButton\",\n              children: \"\\u2B05 Back to Series\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"season-buttons\",\n              children: availableSeasons.map(season => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setCurrentSeason(season),\n                className: currentSeason === season ? 'active' : '',\n                children: season\n              }, season, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"centreraCards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards\",\n              children: filteredEpisodes.map(episode => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"movie-card\",\n                onClick: () => setSelectedMovie({\n                  filename: episode.filename,\n                  seriesName: episode.seriesName,\n                  path: episode.path\n                }),\n                children: [(selectedSeriesMetadata === null || selectedSeriesMetadata === void 0 ? void 0 : selectedSeriesMetadata.Poster) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: selectedSeriesMetadata.Poster,\n                  alt: episode.title,\n                  className: \"movie-poster\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"movieTitle\",\n                  children: [episode.title, \" \\u2B50\", (selectedSeriesMetadata === null || selectedSeriesMetadata === void 0 ? void 0 : selectedSeriesMetadata.imdbRating) || 'N/A']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 49\n                }, this)]\n              }, `${episode.seriesName}-${episode.filename}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), selectedMovie && /*#__PURE__*/_jsxDEV(VideoOverlay, {\n        path: selectedMovie.path,\n        onClose: () => setSelectedMovie(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Series, \"76KLZnRlIWNrQrNv28rdiuNyHEU=\", false, function () {\n  return [useLocation, useAuth];\n});\n_c = Series;\nfunction VideoOverlay({\n  path,\n  onClose\n}) {\n  const token = localStorage.getItem('token');\n  const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: onClose,\n        children: \"\\u2716\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        controls: true,\n        autoPlay: true,\n        className: \"video-player\",\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n}\n_c2 = VideoOverlay;\nexport default Series;\nvar _c, _c2;\n$RefreshReg$(_c, \"Series\");\n$RefreshReg$(_c2, \"VideoOverlay\");","map":{"version":3,"names":["useAuth","React","useEffect","useState","Header","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","Series","_s","location","params","URLSearchParams","search","initialSeries","get","isLoggedIn","selectedSeries","setSelectedSeries","selectedMovie","setSelectedMovie","seriesList","setSeriesList","episodes","setEpisodes","searchTerm","setSearchTerm","selectedGenre","setSelectedGenre","genres","setGenres","selectedSeriesMetadata","setSelectedSeriesMetadata","availableSeasons","setAvailableSeasons","currentSeason","setCurrentSeason","fetchSeries","token","localStorage","getItem","res","fetch","headers","Authorization","folders","json","seriesWithMetadata","Promise","all","map","folder","metaRes","encodeURIComponent","metaData","poster","Poster","title","imdbRating","genre","Genre","allGenres","flatMap","series","split","g","trim","Set","err","console","error","fetchEpisodes","ok","Error","data","allEpisodes","seasonNames","seasons","seasonObj","season","forEach","episode","push","filename","seriesName","replace","path","fetchMetadata","filteredSeriesList","filter","matchesSearch","toLowerCase","includes","matchesGenre","filteredEpisodes","matchesSeason","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","idx","src","alt","id","VideoOverlay","onClose","_c","videoUrl","controls","autoPlay","_c2","$RefreshReg$"],"sources":["D:/Erkflix/src/Series.js"],"sourcesContent":["import { useAuth } from './authContext';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Header from './Header';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nfunction Series() {\r\n    const location = useLocation();\r\n    const params = new URLSearchParams(location.search);\r\n    const initialSeries = params.get('name');\r\n\r\n    const { isLoggedIn } = useAuth();\r\n    const [selectedSeries, setSelectedSeries] = useState(initialSeries);\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [episodes, setEpisodes] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [selectedGenre, setSelectedGenre] = useState('');\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedSeriesMetadata, setSelectedSeriesMetadata] = useState(null);\r\n    const [availableSeasons, setAvailableSeasons] = useState([]);\r\n    const [currentSeason, setCurrentSeason] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchSeries = async () => {\r\n            const token = localStorage.getItem('token');\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const folders = await res.json();\r\n\r\n                const seriesWithMetadata = await Promise.all(\r\n                    folders.map(async (folder) => {\r\n\r\n                        const metaRes = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(folder)}`);\r\n                        const metaData = await metaRes.json();\r\n\r\n                        return {\r\n                            folder,\r\n                            poster: metaData.Poster && metaData.Poster !== 'N/A' ? metaData.Poster : null,\r\n                            title: folder,\r\n                            imdbRating: metaData.imdbRating || 'N/A',\r\n                            genre: metaData.Genre || '',\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setSeriesList(seriesWithMetadata);\r\n\r\n                const allGenres = seriesWithMetadata.flatMap(series =>\r\n                    series.genre.split(',').map(g => g.trim())\r\n                );\r\n                setGenres([...new Set(allGenres)]);\r\n            } catch (err) {\r\n                console.error('Error fetching series folders or metadata:', err);\r\n            }\r\n        };\r\n\r\n        fetchSeries();\r\n    }, []);\r\n\r\n    // Fetch episodes for selected series\r\n    useEffect(() => {\r\n        if (!selectedSeries) return;\r\n\r\n        const fetchEpisodes = async () => {\r\n            const token = localStorage.getItem('token');\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/series/${encodeURIComponent(selectedSeries)}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    throw new Error('Failed to fetch episodes');\r\n                }\r\n\r\n                const data = await res.json();\r\n                const allEpisodes = [];\r\n\r\n                const seasonNames = data.seasons.map((seasonObj) => seasonObj.season);\r\n                setAvailableSeasons(seasonNames);\r\n                setCurrentSeason(seasonNames[0] || ''); // Default to first season\r\n\r\n                data.seasons.forEach((seasonObj) => {\r\n                    seasonObj.episodes.forEach((episode) => {\r\n                        allEpisodes.push({\r\n                            filename: episode.filename,\r\n                            seriesName: selectedSeries,\r\n                            season: seasonObj.season,\r\n                            title: episode.filename.replace(/\\.[^/.]+$/, ''),\r\n                            path: episode.path,\r\n                        });\r\n                    });\r\n                });\r\n\r\n                setEpisodes(allEpisodes);\r\n            } catch (err) {\r\n                console.error('Error fetching episodes:', err);\r\n            }\r\n        };\r\n\r\n        fetchEpisodes();\r\n    }, [selectedSeries]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchMetadata = async () => {\r\n            if (!selectedSeries) return;\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/metadata/${encodeURIComponent(selectedSeries)}`);\r\n                const data = await res.json();\r\n                setSelectedSeriesMetadata(data);\r\n            } catch (err) {\r\n                console.error('Error fetching selected series metadata:', err);\r\n            }\r\n        };\r\n        fetchMetadata();\r\n    }, [selectedSeries]);\r\n\r\n\r\n    const filteredSeriesList = seriesList.filter(series => {\r\n        const matchesSearch = series.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesGenre = !selectedGenre || (series.genre && series.genre.toLowerCase().includes(selectedGenre.toLowerCase()));\r\n        return matchesSearch && matchesGenre;\r\n    });\r\n\r\n    const filteredEpisodes = episodes.filter(episode => {\r\n        const matchesSearch = episode.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n        const matchesSeason = episode.season === currentSeason;\r\n        return matchesSearch && matchesSeason;\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mainDiv\">\r\n                {isLoggedIn && (\r\n                    <div className=\"movie-row\">\r\n                        {!selectedSeries ? (\r\n                            <>\r\n                                <h3 className=\"msTitel\">Series</h3>\r\n                                <div className='searchBox'>\r\n                                    <div className=\"sokDiv\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Search series...\"\r\n                                            value={searchTerm}\r\n                                            onChange={(e) => setSearchTerm(e.target.value)}\r\n                                            className=\"msSearch\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className='centreraCards'>\r\n                                        <div className=\"genre-buttons\">\r\n                                            <button\r\n                                                onClick={() => setSelectedGenre('')}\r\n                                                className={!selectedGenre ? 'active' : ''}\r\n                                            >\r\n                                                All\r\n                                            </button>\r\n                                            {genres.map((genre, idx) => (\r\n                                                <button\r\n                                                    key={idx}\r\n                                                    onClick={() => setSelectedGenre(genre)}\r\n                                                    className={selectedGenre === genre ? 'active' : ''}\r\n                                                >\r\n                                                    {genre}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredSeriesList.map(series => (\r\n                                            <div\r\n                                                key={series.folder}\r\n                                                className=\"movie-card\"\r\n                                                onClick={() => setSelectedSeries(series.folder)}\r\n\r\n                                            >\r\n                                                {series.poster && (\r\n                                                    <img src={series.poster} alt={series.title} className=\"movie-poster\" />\r\n                                                )}\r\n                                                <span className=\"movieTitle\">{series.title} ⭐{series.imdbRating}</span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <h3 id='episodeTitel' className=\"msTitel\">{selectedSeries} {currentSeason}</h3>\r\n                                <div className='backButtonDiv'>\r\n                                <button onClick={() => setSelectedSeries(null)} className=\"backButton\">⬅ Back to Series</button>\r\n                                    <div className=\"season-buttons\">\r\n                                        {availableSeasons.map((season) => (\r\n                                            <button\r\n                                                key={season}\r\n                                                onClick={() => setCurrentSeason(season)}\r\n                                                className={currentSeason === season ? 'active' : ''}\r\n                                            >\r\n                                                {season}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className='centreraCards'>\r\n                                    <div className=\"cards\">\r\n                                        {filteredEpisodes.map((episode) => (\r\n                                            <div\r\n                                                className=\"movie-card\"\r\n                                                key={`${episode.seriesName}-${episode.filename}`}\r\n                                                onClick={() =>\r\n                                                    setSelectedMovie({\r\n                                                        filename: episode.filename,\r\n                                                        seriesName: episode.seriesName,\r\n                                                        path: episode.path,\r\n                                                    })\r\n                                                }\r\n\r\n                                            >\r\n                                                {selectedSeriesMetadata?.Poster && (\r\n                                                    <img\r\n                                                        src={selectedSeriesMetadata.Poster}\r\n                                                        alt={episode.title}\r\n                                                        className=\"movie-poster\"\r\n                                                    />\r\n                                                )}\r\n                                                <span className=\"movieTitle\">\r\n                                                    {episode.title} ⭐{selectedSeriesMetadata?.imdbRating || 'N/A'}\r\n                                                </span>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {selectedMovie && (\r\n                    <VideoOverlay\r\n                        path={selectedMovie.path}\r\n                        onClose={() => setSelectedMovie(null)}\r\n                    />\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction VideoOverlay({ path, onClose }) {\r\n    const token = localStorage.getItem('token');\r\n    const videoUrl = `${API_URL}/api/stream/file?path=${encodeURIComponent(path)}&token=${token}`;\r\n\r\n    return (\r\n        <div className=\"video-overlay\">\r\n            <div className=\"video-wrapper\">\r\n                <button className=\"close-button\" onClick={onClose}>✖</button>\r\n                <video controls autoPlay className=\"video-player\">\r\n                    <source src={videoUrl} type=\"video/mp4\" />\r\n                    Your browser does not support the video tag.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Series;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}